{"version":3,"sources":["sci/impl/protocols.cljc"],"mappings":";AAUA,AAAA,iCAAA,yCAAAA,1EAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,sEAAA,tEAAME,iFAAaS,EAAEA,MAAEC,KAAKC,cAAgBC;AAA5C,AACE,IAAAC,aACM,iBAAMW,MAAI,AAACrB,gBAAMS;AAAjB,AACE,GAAI,OAASY;AAAb,0FAAmBA,IAAI,AAACC,eAAKb;;AAA7B,0FAAA,KACSA;;;gBAHjB,AAAAE,4CAAAD,WAAA,IAAA,vEAAOU;qBAAP,AAAAT,4CAAAD,WAAA,IAAA,5EAAiBD;IAAjBG,aAKM,iBAAMY,MAAI,AAACxB,gBAAMS;AAAjB,AACE,GAAI,gBAAAgB,fAAUD;AAAd,0FAAA,gDAAqBA,IAAI,AAACE,iBAAOjB,kBAAa,AAACkB,gBAAMlB;;AAArD,0FAAA,KACSA;;;WAPjB,AAAAE,4CAAAC,WAAA,IAAA,lEAIOW;qBAJP,AAAAZ,4CAAAC,WAAA,IAAA,5EAIYH;IAINmB,aAAW,4CAAK,AAACC;gBARvB,AAAAhB,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,qDAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,sDAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,wJAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAAC,8CAAAC,oBAAA,AAAAL,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,0DAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAC,8CAAAE,mBAAA,AAAAN,iDAAA,AAAAC,cAAA,AAAAC,oDAAA,KAAA,IAAA,yDAAA,KAAAC,eAAA,KAAA,gDAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,0EAAA,KAAA,IAAA,gBAAA,KAAA,IAAA,eAAA,KAAA,IAAA,l/CASMc,qeAEU,kCAAA,2CAAA,7EAACC,oBAAUvB,4GACHY,s8BAEb,AAACY,4CAAI,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAArB,cAAAoB;IAAAE,eAAA,AAAApC,gBAAAmC;IAAAA,iBAAA,AAAAlC,eAAAkC;kBAAAC,dAAMC;YAANF,RAAoB7B;AAApB,AACE,IAAMiC,UAAQ,AAACC,+CAAYZ,WAAY,4CAAKS;YAA5C,mFAAA,AAAAxB,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,iFAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,iBAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAA,qGAAA,KAAA,IAAA,eAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,oFAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,iBAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,+FAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAsB,cAAA,AAAAzB,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,gFAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,oDAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAA,uFAAA,KAAA,IAAA,gBAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,wEAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAsB,cAAA,AAAAzB,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,6FAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,mGAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,gFAAA,KAAA,IAAA,UAAA,KAAA,IAAA,WAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,4EAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,wEAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,6FAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,2DAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,iBAAA,KAAA,IAAA,UAAA,KAAA,IAAA,eAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAA,gFAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,uFAAA,KAAA,IAAA,eAAA,KAAA,IAAA,eAAA,KAAA,IAAA,77HACMyB,mWAAmBJ,+eACCA,gtFAEeA;IACnCI,YAAM,kBAAI,AAAA,iHAAsBlB,OACxB,mDAAA,AAAAV,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,oFAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,iBAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,4DAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAsB,cAAA,AAAAzB,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,iFAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,oDAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAA,sFAAA,KAAA,IAAA,gBAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,wEAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAsB,cAAA,AAAAzB,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,sFAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,0EAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,iFAAA,KAAA,IAAA,UAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAA,4FAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,wEAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,sFAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,2DAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,aAAA,KAAA,IAAA,UAAA,KAAA,IAAA,eAAA,KAAA,IAAA,gBAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,qDAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,4FAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,4EAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,4FAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAA,iFAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,sFAAA,KAAA,IAAA,eAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,0DAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,uDAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,+DAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,yEAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,gCAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,kEAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,iBAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,sDAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,mBAAA,KAAA,IAAA,UAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,eAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,qGAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,iFAAA,KAAA,IAAA,UAAA,KAAA,IAAA,eAAA,KAAA,IAAA,eAAA,KAAA,IAAA,UAAA,KAAA,IAAA,eAAA,KAAA,IAAA,eAAA,KAAA,IAAA,zjMAAC0B,6CAAKD,iRACaJ,4/EAEiBE,kwEAML,AAACI,gDAAQN,sVACJ7B,uoBAEpCiC;AAlBd,AAAA,OAAA5B,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,qDAAA,KAAA,IAAA,mEAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,sDAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,mBAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,8EAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,mBAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,0DAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAA,0EAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,iBAAA,KAAA,IAAA,eAAA,KAAA,IAAA,eAAA,KAAA,IAAA,pjCAoBOyB,kUAGajC,8WACKA,+TAA6B6B;GACxD5B;AAxChB,AAyCEqB;;;AA1CJ,CAAA,yDAAA,zDAAMjC;;AAAN;AAAA,CAAA,mDAAA,WAAAC,9DAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAI,WAAA,AAAAF,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAK,WAAA,AAAAH,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAM,WAAA,AAAAJ,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAO,qBAAA;AAAA,AAAA,OAAAA,wDAAAN,SAAAG,SAAAC,SAAAC,SAAAN;;;AAAA,AA4CA,AAAA,qCAAA,6CAAAP,lFAAMqD;AAAN,AAAA,IAAApD,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAoD,wEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAjD;;;AAAA,AAAA,CAAA,0EAAA,1EAAMiD,qFAAiBtC,EAAEA,MAAE4C,IAAI1C,cAAgBiC;AAA/C,AACE,IAAMA,YAAM,0BAAA,WAAAW,rCAACC;AAAD,AAAmB,UAAK,qBAAAD,rBAACE;GAASb;IACxCc,eAAa,iBAAAC,eAAA,AAAAC,gBAAEC;AAAF,AAAA,QAAAF,6CAAAA,gEAAAA,rBAA2BN,4CAAAA,xCAAI1C,4CAAAA;;IAC5CmD,cAAY,AAAA,8EAAA,gBAAIJ,hBAAaE;IAC7BG,MAAI,4CAAK,AAACC,sBAAaF;mBAH7B,WAAAR,1BAIMW;AAJN,AAIoB,0DAAAX,nDAACX,+CAAOoB;;gBAJ5B,AAAA/C,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,qDAAA,KAAA,IAAA,jNAKMc,wNACO,AAACE,4CAAI,WAAA+B;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAAnD,cAAAkD;IAAAE,eAAA,AAAAlE,gBAAAiE;IAAAA,iBAAA,AAAAhE,eAAAgE;WAAAC,PAAMC;YAANF,RAAaG;AAAb,AAAA,OAAAvD,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,qDAAA,KAAA,IAAA,OAEO,AAACgB,4CAAI,WAAKqC;AAAL,AAAA,OAAAxD,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,oFAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,sFAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,UAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,4BAAA,KAAA,IAAA,1PACe,AAAC8C,aAAa,4CAAK,AAAC9D,gBAAMqE,mGACnCF,8CACA,AAACzC,iBAAO2C,sBAAQ,AAAC1C,gBAAM0C;GAC7BD;GACZ3B;AAblB,AAeEX;;;AAhBJ,CAAA,6DAAA,7DAAMc;;AAAN;AAAA,CAAA,uDAAA,WAAAC,lEAAMD;AAAN,AAAA,IAAAE,WAAA,AAAA9C,gBAAA6C;IAAAA,eAAA,AAAA5C,eAAA4C;IAAAE,WAAA,AAAA/C,gBAAA6C;IAAAA,eAAA,AAAA5C,eAAA4C;IAAAG,WAAA,AAAAhD,gBAAA6C;IAAAA,eAAA,AAAA5C,eAAA4C;IAAAI,WAAA,AAAAjD,gBAAA6C;IAAAA,eAAA,AAAA5C,eAAA4C;AAAA,AAAA,IAAAxC,qBAAA;AAAA,AAAA,OAAAA,wDAAAyC,SAAAC,SAAAC,SAAAC,SAAAJ;;;AAAA,AAkBA,AAAA,4BAAA,oCAAAtD,hEAAM+E;AAAN,AAAA,IAAA9E,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAA8E,+DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA3E;;;AAAA,AAAA,CAAA,iEAAA,jEAAM2E,4EAAQpB,IAAIwB,MAAQC;AAA1B,AACE,IAAAC,aAAA,AAAA9D,cAAqB,kDAAA,lDAAC4E,sDAAYf;IAAlCE,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,IAAAE,aAAA,AAAAH,kDAAAE;YAAA,AAAApE,4CAAAqE,WAAA,IAAA,nEAASQ;WAAT,AAAA7E,4CAAAqE,WAAA,IAAA,lEAAeS;AAAf,AAAA,IACcE,iBAAS,AAAA,8EAAKH;IACd5B,YAAI,AAACC,sBAAa8B;AAFhC,AAAA,AAYE,IAAAC,mBAAA,AAAA9E,cAAoB2E;IAApBI,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,IAAAE,mBAAA,AAAAH,wDAAAE;oBAAA,AAAApF,4CAAAqF,iBAAA,IAAA,jFAASQ;cAAT,AAAA7F,4CAAAqF,iBAAA,IAAA,3EAAiBS;AAAjB,AAAA,AACE,IAAMC,eAAO,AAAClE,+CAAO,AAACmE,eAAKH;gBAA3B,AAAA/C,ZACMmD,4BAAK,AAAA,kFAAM1D;IACX2D,yBAAiB,yDAAA,mFAAA,5IAACC,+CAAOF,+JAAiBhD,UAAI8C;yBAFpD,AAAAjD,rBAGMsD,qCAAcF;AAHpB,AAIE,AAACG,+CAA6BD,mBAAarC,MAAM+B;;AALrD;AAAA,eAAAb;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAd,2BAAA,AAAAnE,cAAA8E;AAAA,AAAA,GAAAX;AAAA,AAAA,IAAAW,uBAAAX;AAAA,AAAA,GAAA,AAAAC,6BAAAU;AAAA,IAAAT,wBAAA,AAAAC,sBAAAQ;AAAA,AAAA,eAAA,AAAAP,qBAAAO;eAAAT;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAc,mBAAA,AAAAjG,gBAAA4F;oBAAA,AAAAjF,4CAAAsF,iBAAA,IAAA,jFAASO;cAAT,AAAA7F,4CAAAsF,iBAAA,IAAA,3EAAiBQ;AAAjB,AAAA,AACE,IAAMC,eAAO,AAAClE,+CAAO,AAACmE,eAAKH;gBAA3B,AAAA/C,ZACMmD,4BAAK,AAAA,kFAAM1D;IACX2D,yBAAiB,yDAAA,mFAAA,5IAACC,+CAAOF,+JAAiBhD,UAAI8C;yBAFpD,AAAAjD,rBAGMsD,qCAAcF;AAHpB,AAIE,AAACG,+CAA6BD,mBAAarC,MAAM+B;;AALrD;AAAA,eAAA,AAAAxG,eAAA2F;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAZF;AAAA,eAAAhB;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAE,qBAAA,AAAAnE,cAAA8D;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,iBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,kBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAI,aAAA,AAAAvF,gBAAA4E;YAAA,AAAAjE,4CAAA4E,WAAA,IAAA,nEAASC;WAAT,AAAA7E,4CAAA4E,WAAA,IAAA,lEAAeE;AAAf,AAAA,IACcE,iBAAS,AAAA,8EAAKH;IACd5B,YAAI,AAACC,sBAAa8B;AAFhC,AAAA,AAYE,IAAAO,mBAAA,AAAApF,cAAoB2E;IAApBU,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,IAAAE,mBAAA,AAAAH,wDAAAE;oBAAA,AAAA1F,4CAAA2F,iBAAA,IAAA,jFAASE;cAAT,AAAA7F,4CAAA2F,iBAAA,IAAA,3EAAiBG;AAAjB,AAAA,AACE,IAAMC,eAAO,AAAClE,+CAAO,AAACmE,eAAKH;gBAA3B,AAAA/C,ZACMmD,4BAAK,AAAA,kFAAM1D;IACX2D,yBAAiB,yDAAA,mFAAA,5IAACC,+CAAOF,+JAAiBhD,UAAI8C;yBAFpD,AAAAjD,rBAGMsD,qCAAcF;AAHpB,AAIE,AAACG,+CAA6BD,mBAAarC,MAAM+B;;AALrD;AAAA,eAAAP;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAApB,+BAAA,AAAAnE,cAAAoF;AAAA,AAAA,GAAAjB;AAAA,AAAA,IAAAiB,uBAAAjB;AAAA,AAAA,GAAA,AAAAC,6BAAAgB;AAAA,IAAAf,wBAAA,AAAAC,sBAAAc;AAAA,AAAA,eAAA,AAAAb,qBAAAa;eAAAf;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAoB,mBAAA,AAAAvG,gBAAAkG;oBAAA,AAAAvF,4CAAA4F,iBAAA,IAAA,jFAASC;cAAT,AAAA7F,4CAAA4F,iBAAA,IAAA,3EAAiBE;AAAjB,AAAA,AACE,IAAMC,eAAO,AAAClE,+CAAO,AAACmE,eAAKH;gBAA3B,AAAA/C,ZACMmD,4BAAK,AAAA,kFAAM1D;IACX2D,yBAAiB,yDAAA,mFAAA,5IAACC,+CAAOF,+JAAiBhD,UAAI8C;yBAFpD,AAAAjD,rBAGMsD,qCAAcF;AAHpB,AAIE,AAACG,+CAA6BD,mBAAarC,MAAM+B;;AALrD;AAAA,eAAA,AAAAxG,eAAAiG;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAZF;AAAA,eAAA,AAAAjG,eAAA2E;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;;AADF,CAAA,oDAAA,pDAAMN;;AAAN;AAAA,CAAA,8CAAA,WAAAC,zDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAxE,gBAAAuE;IAAAA,eAAA,AAAAtE,eAAAsE;IAAAE,WAAA,AAAAzE,gBAAAuE;IAAAA,eAAA,AAAAtE,eAAAsE;AAAA,AAAA,IAAAlE,qBAAA;AAAA,AAAA,OAAAA,wDAAAmE,SAAAC,SAAAF;;;AAAA,AAsBA,AAAA,iCAAA,yCAAAhF,1EAAM0H;AAAN,AAAA,IAAAzH,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAyH,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAtH;;;AAAA,AAAA,CAAA,sEAAA,tEAAMsH,iFAAa3G,EAAEA,MAAE4C,IAAIiB,KAAOoD;AAAlC,AACE,IAAMA,uBAAY,0BAAA,WAAAC,rCAACnE;AAAD,AAAmB,UAAK,qBAAAmE,rBAAClE;GAASiE;AAApD,AAAA,OAAA1G,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,qDAAA,KAAA,IAAA,OACS,AAACgB,4CAAI,WAAAyF;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAA7G,cAAA4G;IAAAE,eAAA,AAAA5H,gBAAA2H;IAAAA,iBAAA,AAAA1H,eAAA0H;YAAAC,RAAMpC;YAANmC,RAAcvD;AAAd,AACE,IAAMb,eAAa,iBAAAuE,eAAA,AAAArE,gBAAEC;AAAF,AAAA,QAAAoE,6CAAAA,wDAAAA,bAA2B5E,oCAAAA,hCAAIsC,oCAAAA;;IAC5C7B,cAAY,AAAA,8EAAA,gBAAIJ,hBAAaE;IAC7BG,MAAI,4CAAK,AAACC,sBAAaF;mBAF7B,WAAAkE,1BAGM/D;AAHN,AAGoB,0DAAA+D,nDAACrF,+CAAOoB;;AAH5B,AAAA,OAAA/C,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,qDAAA,KAAA,IAAA,OAKO,AAACgB,4CAAI,WAAKqC;AAAL,AAAA,OAAAxD,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,oFAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,sFAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,UAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,4BAAA,KAAA,IAAA,1PACe,AAAC8C,aAAa,4CAAK,AAAC9D,gBAAMqE,mGACnCF,8CAAM,AAACzC,iBAAO2C,sBAAQ,AAAC1C,gBAAM0C;GACnCD;GAAUmD;;;AAXxC,CAAA,yDAAA,zDAAMN;;AAAN;AAAA,CAAA,mDAAA,WAAAC,9DAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAnH,gBAAAkH;IAAAA,eAAA,AAAAjH,eAAAiH;IAAAE,WAAA,AAAApH,gBAAAkH;IAAAA,eAAA,AAAAjH,eAAAiH;IAAAG,WAAA,AAAArH,gBAAAkH;IAAAA,eAAA,AAAAjH,eAAAiH;IAAAI,WAAA,AAAAtH,gBAAAkH;IAAAA,eAAA,AAAAjH,eAAAiH;AAAA,AAAA,IAAA7G,qBAAA;AAAA,AAAA,OAAAA,wDAAA8G,SAAAC,SAAAC,SAAAC,SAAAJ;;;AAAA,AAaA,AAAA,2BAAA,mCAAA3H,9DAAMwI;AAAN,AAAA,IAAAvI,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAuI,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAApI;;;AAAA,AAAA,CAAA,gEAAA,hEAAMoI,2EAAOzH,EAAEA,MAAEC,KAAK8H,WAAYjE;AAAlC,AACE,IAAMA,YAAM,6CAAA,7CAACkE,gFAAQ,AAACtG,4CAAI,WAAKqC;AAAL,AAAA,OAAA/B,cAAA,AAAAzB,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,2DAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,2BAAA,KAAA,IAAA,UAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,uEAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,4BAAA,KAAA,IAAA,uFAAA,KAAA,IAAA,hdACM,AAAChB,gBAAMqE,gUAAW,AAAC3C,iBAAO2C,wEAAQ,AAAC1C,gBAAM0C;GAC/CD;AAF1B,AAAA,OAAAvD,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,mFAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,gBAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,eAAA,KAAA,IAAA,zHAG2BqH,sGAAWjE;;;AAJxC,CAAA,mDAAA,nDAAM2D;;AAAN;AAAA,CAAA,6CAAA,WAAAC,xDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAjI,gBAAAgI;IAAAA,eAAA,AAAA/H,eAAA+H;IAAAE,WAAA,AAAAlI,gBAAAgI;IAAAA,eAAA,AAAA/H,eAAA+H;IAAAG,WAAA,AAAAnI,gBAAAgI;IAAAA,eAAA,AAAA/H,eAAA+H;IAAAI,WAAA,AAAApI,gBAAAgI;IAAAA,eAAA,AAAA/H,eAAA+H;AAAA,AAAA,IAAA3H,qBAAA;AAAA,AAAA,OAAAA,wDAAA4H,SAAAC,SAAAC,SAAAC,SAAAJ;;;AAAA,AAMA,sCAAA,tCAAMO,oFAAYC,SAASC;AAA3B,AACE,OAACC,mBAAQ,eAAA,WAAAC,1BAACC;AAAD,AAAO,4BAAAD,rBAACE,sCAAa,AAACC,yBAAgBL;GAAM,AAAA,wFAAUD;;AAEjE;;;oCAAA,pCAAMO,gFAEHP,SAAS9D;AAFZ,AAGE,OAACgE,mBAAQ,eAAA,WAAAM,1BAACJ;AAAD,AAAO,4BAAAI,rBAACH,sCAAanE;GAAO,AAAA,wFAAU8D","names":["var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","sci.impl.protocols/defprotocol","seq71825","G__71826","cljs.core/first","cljs.core/next","G__71827","G__71828","G__71829","self__4816__auto__","_","_ctx","protocol-name","signatures","vec__71835","cljs.core.nth","vec__71838","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core.apply","cljs.core/array-map","cljs.core/hash-set","docstring","sig","cljs.core/rest","opts","opt","cljs.core/Keyword","cljs.core/second","cljs.core/nnext","current-ns","sci.impl.vars/current-ns-name","expansion","cljs.core/with-meta","cljs.core.map","p__71846","vec__71848","seq__71849","first__71850","method-name","cljs.core/vec","fq-name","cljs.core.symbol","impls","cljs.core.conj","cljs.core.keyword","sci.impl.protocols/extend-protocol","seq71884","G__71885","G__71886","G__71887","G__71888","ctx","p1__71881#","p1__71880#","sci.impl.utils/split-when","cljs.core/seq?","protocol-var","fexpr__71892","cljs.core/deref","sci.impl.utils/eval-resolve-state","protocol-ns","pns","sci.impl.vars/getName","fq-meth-name","p__71897","vec__71898","seq__71899","first__71900","type","meths","meth","sci.impl.protocols/extend","seq71909","G__71911","G__71912","atype","proto+mmaps","seq__71917","chunk__71919","count__71920","i__71921","vec__71994","temp__5753__auto__","cljs.core/chunked-seq?","c__4649__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__72027","proto","mmap","cljs.core.partition","proto-ns","seq__71999","chunk__72000","count__72001","i__72002","vec__72016","vec__72022","seq__72031","chunk__72032","count__72033","i__72034","vec__72050","vec__72056","fn-name","f","fn-sym","cljs.core/name","env","multi-method-var","cljs.core.get_in","multi-method","sci.impl.multimethods/multi-fn-add-method-impl","sci.impl.protocols/extend-type","seq72070","G__72071","G__72072","G__72073","G__72074","proto+meths","p1__72067#","p__72082","vec__72083","seq__72084","first__72085","p1__72068#","fexpr__72087","sci.impl.protocols/reify","seq72098","G__72099","G__72100","G__72101","G__72102","interface","cljs.core.into","sci.impl.protocols/satisfies?","protocol","obj","cljs.core/boolean","p1__72114#","cljs.core/some","cljs.core/get-method","sci.impl.types/type-impl","sci.impl.protocols/extends?","p1__72122#"],"sourcesContent":["(ns sci.impl.protocols\n  {:no-doc true}\n  (:refer-clojure :exclude [defprotocol extend-protocol\n                            extend extend-type reify satisfies?\n                            extends? implements?])\n  (:require [sci.impl.multimethods :as mms]\n            [sci.impl.types :as types]\n            [sci.impl.utils :as utils]\n            [sci.impl.vars :as vars]))\n\n(defn defprotocol [_ _ _ctx protocol-name & signatures]\n  (let [[docstring signatures]\n        (let [sig (first signatures)]\n          (if (string? sig) [sig (rest signatures)]\n              [nil signatures]))\n        [opts signatures]\n        (let [opt (first signatures)]\n          (if (keyword? opt) [{opt (second signatures)} (nnext signatures)]\n              [nil signatures]))\n        current-ns (str (vars/current-ns-name))\n        expansion\n        `(do\n           (def  ~(with-meta protocol-name\n                    {:doc docstring}) {:methods #{}\n                                       :ns *ns*})\n           ~@(map (fn [[method-name & _]]\n                    (let [fq-name (symbol (str current-ns) (str method-name))\n                          impls [`(defmulti ~method-name clojure.core/protocol-type-impl)\n                                 `(defmethod ~method-name :sci.impl.protocols/reified [x# & args#]\n                                    (let [methods# (clojure.core/-reified-methods x#)]\n                                      (apply (get methods# '~method-name) x# args#)))]\n                          impls (if (:extend-via-metadata opts)\n                                  (conj impls\n                                        `(defmethod ~method-name :default [x# & args#]\n                                           (let [meta# (meta x#)\n                                                 method# (get meta# '~fq-name)]\n                                             (if method#\n                                               (apply method# x# args#)\n                                               (throw (new #?(:clj IllegalArgumentException\n                                                              :cljs js/Error)\n                                                           (str \"No implementation of method: \"\n                                                                ~(keyword method-name) \" of protocol: \"\n                                                                (var ~protocol-name) \" found for: \"\n                                                                (clojure.core/protocol-type-impl x#))))))))\n                                  impls)]\n                      `(do\n                         ~@impls\n                         #?(:clj (alter-var-root (var ~protocol-name)\n                                                 update :methods conj ~method-name)\n                            :cljs (def ~protocol-name\n                                    (update ~protocol-name :methods conj ~method-name))))))\n                  signatures))]\n    expansion))\n\n(defn extend-protocol [_ _ ctx protocol-name & impls]\n  (let [impls (utils/split-when #(not (seq? %)) impls)\n        protocol-var (@utils/eval-resolve-state ctx protocol-name)\n        protocol-ns (-> protocol-var deref :ns)\n        pns (str (vars/getName protocol-ns))\n        fq-meth-name #(symbol pns %)\n        expansion\n        `(do ~@(map (fn [[type & meths]]\n                      `(do\n                         ~@(map (fn [meth]\n                                  `(defmethod ~(fq-meth-name (str (first meth)))\n                                     ~type\n                                     ~(second meth) ~@(nnext meth)))\n                                meths)))\n                    impls))]\n    #_(prn expansion)\n    expansion))\n\n(defn extend [ctx atype & proto+mmaps]\n  (doseq [[proto mmap] (partition 2 proto+mmaps)\n          :let [proto-ns (:ns proto)\n                pns (vars/getName proto-ns)]]\n    #_(when-not (protocol? proto)\n        (throw (new #?(:clj IllegalArgumentException\n                       :cljs js/Error)\n                    (str proto \" is not a protocol\"))))\n    #_(when (implements? proto atype)\n        (throw (new #?(:clj IllegalArgumentException\n                       :cljs js/Error)\n                    (str atype \" already directly implements \" (:on-interface proto) \" for protocol:\"\n                         (:var proto)))))\n    (doseq [[fn-name f] mmap]\n      (let [fn-sym (symbol (name fn-name))\n            env @(:env ctx)\n            multi-method-var (get-in env [:namespaces pns fn-sym])\n            multi-method @multi-method-var]\n        (mms/multi-fn-add-method-impl multi-method atype f))\n      )\n    #_(-reset-methods (vars/alter-var-root (:var proto) assoc-in [:impls atype] mmap))))\n\n(defn extend-type [_ _ ctx type & proto+meths]\n  (let [proto+meths (utils/split-when #(not (seq? %)) proto+meths)]\n    `(do ~@(map (fn [[proto & meths]]\n                  (let [protocol-var (@utils/eval-resolve-state ctx proto)\n                        protocol-ns (-> protocol-var deref :ns)\n                        pns (str (vars/getName protocol-ns))\n                        fq-meth-name #(symbol pns %)]\n                    `(do\n                       ~@(map (fn [meth]\n                                `(defmethod ~(fq-meth-name (str (first meth)))\n                                   ~type ~(second meth) ~@(nnext meth)))\n                              meths)))) proto+meths))))\n\n(defn reify [_ _ _ctx interface & meths]\n  (let [meths (into {} (map (fn [meth]\n                              `['~(first meth) (fn ~(second meth) ~@(nnext meth))])\n                            meths))]\n    `(clojure.core/-reified ~interface ~meths)))\n\n(defn satisfies? [protocol obj]\n  (boolean (some #(get-method % (types/type-impl obj)) (:methods protocol))))\n\n(defn extends?\n  \"Returns true if atype extends protocol\"\n  [protocol atype]\n  (boolean (some #(get-method % atype) (:methods protocol))))\n"]}