{"version":3,"sources":["rewrite_clj/zip/base.cljc"],"mappings":"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","names":["rewrite-clj.zip.base/get-opts","zloc","cljs.core/meta","rewrite-clj.zip.base/set-opts","opts","cljs.core/with-meta","cljs.core.merge","rewrite-clj.node.protocols/default-auto-resolve","var_args","G__57712","rewrite-clj.zip.base/edn*","js/Error","node","rewrite_clj.zip.base.edn_STAR_","rewrite-clj.custom-zipper.core/custom-zipper","rewrite-clj.custom-zipper.core/zipper","G__57719","rewrite-clj.zip.base/edn","rewrite_clj.zip.base.edn","cljs.core._EQ_","rewrite-clj.node.protocols/tag","top","or__4223__auto__","rewrite-clj.custom-zipper.core/down","rewrite_clj.zip.whitespace.skip_whitespace","rewrite-clj.node.forms/forms-node","rewrite-clj.zip.base/tag","G__57720","rewrite-clj.custom-zipper.core/node","rewrite-clj.zip.base/sexpr-able?","G__57722","rewrite-clj.node.protocols/sexpr-able?","rewrite-clj.zip.base/sexpr","G__57724","rewrite_clj.node.protocols.sexpr","rewrite-clj.zip.base/child-sexprs","G__57725","rewrite_clj.node.protocols.child_sexprs","rewrite-clj.zip.base/length","G__57726","rewrite-clj.node.protocols/length","rewrite-clj.zip.base/value","G__57727","rewrite-clj.node.protocols/value","G__57729","rewrite-clj.zip.base/of-string","s","rewrite_clj.zip.base.of_string","G__57730","rewrite-clj.parser/parse-string-all","rewrite-clj.zip.base/string","G__57731","rewrite-clj.node.protocols/string","rewrite-clj.zip.base/->string","rewrite-clj.zip.base/root-string","G__57732","rewrite-clj.custom-zipper.core/root","rewrite-clj.zip.base/->root-string","rewrite-clj.zip.base/print!","_writer","cljs.core/string-print","G__57734","rewrite-clj.zip.base/print","writer","G__57735","rewrite_clj.zip.base.print","G__57737","rewrite-clj.zip.base/print-root","G__57739","rewrite_clj.zip.base.print_root"],"sourcesContent":["(ns ^:no-doc rewrite-clj.zip.base\n  (:refer-clojure :exclude [print])\n  (:require [rewrite-clj.custom-zipper.core :as zraw]\n            [rewrite-clj.node.forms :as nforms]\n            [rewrite-clj.node.protocols :as node]\n            [rewrite-clj.parser :as p]\n            [rewrite-clj.zip.whitespace :as ws]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn get-opts [zloc]\n  (:rewrite-clj.zip/opts (meta zloc)))\n\n(defn set-opts [zloc opts]\n  (with-meta zloc\n    (merge (meta zloc)\n           {:rewrite-clj.zip/opts (merge {:auto-resolve node/default-auto-resolve}\n                                         opts)})))\n\n;; ## Zipper\n\n(defn edn*\n  \"Create and return zipper from Clojure/ClojureScript/EDN `node` (likely parsed by [[rewrite-clj.parse]]).\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n  ([node]\n   (edn* node {}))\n  ([node opts]\n   (-> (if (:track-position? opts)\n         (zraw/custom-zipper node)\n         (zraw/zipper node))\n       (set-opts opts))))\n\n(defn edn\n  \"Create and return zipper from Clojure/ClojureScript/EDN `node` (likely parsed by [[rewrite-clj.parse]]),\n  and move to the first non-whitespace/non-comment child. If node is not forms node, is wrapped in forms node\n  for a consistent root.\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n  ([node] (edn node {}))\n  ([node opts]\n   (loop [node node opts opts]\n     (if (= (node/tag node) :forms)\n       (let [top (edn* node opts)]\n         (or (-> top zraw/down ws/skip-whitespace)\n             top))\n       (recur (nforms/forms-node [node]) opts)))))\n\n;; ## Inspection\n\n(defn tag\n  \"Return tag of current node in `zloc`.\"\n  [zloc]\n  (some-> zloc zraw/node node/tag))\n\n(defn sexpr-able?\n  \"Return true if current node in `zloc` can be [[sexpr]]-ed.\"\n  [zloc]\n  (some-> zloc zraw/node node/sexpr-able?))\n\n(defn sexpr\n  \"Return s-expression (the Clojure form) of current node in `zloc`.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\"\n  ([zloc]\n   (some-> zloc zraw/node (node/sexpr (get-opts zloc)))))\n\n(defn ^{:added \"0.4.4\"} child-sexprs\n  \"Return s-expression (the Clojure forms) of children of current node in `zloc`.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\"\n  ([zloc]\n   (some-> zloc zraw/node (node/child-sexprs (get-opts zloc)))))\n\n(defn length\n  \"Return length of printable [[string]] of current node in `zloc`.\"\n  [zloc]\n  (or (some-> zloc zraw/node node/length) 0))\n\n(defn ^{:deprecated \"0.4.0\"} value\n  \"DEPRECATED. Return a tag/s-expression pair for inner nodes, or\n   the s-expression itself for leaves.\"\n  [zloc]\n  (some-> zloc zraw/node node/value))\n\n;; ## Read\n(defn of-string\n  \"Create and return zipper from all forms in Clojure/ClojureScript/EDN string `s`.\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n  ([s] (of-string s {}))\n  ([s opts]\n   (some-> s p/parse-string-all (edn opts))))\n\n#?(:clj\n   (defn of-file\n     \"Create and return zipper from all forms in Clojure/ClojureScript/EDN File `f`.\n\n     Optional `opts` can specify:\n     - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n     - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n     ([f] (of-file f {}))\n     ([f opts]\n      (some-> f p/parse-file-all (edn opts)))))\n\n;; ## Write\n\n(defn ^{:added \"0.4.0\"} string\n  \"Return string representing the current node in `zloc`.\"\n  [zloc]\n  (some-> zloc zraw/node node/string))\n\n(defn ^{:deprecated \"0.4.0\"} ->string\n  \"DEPRECATED. Renamed to [[string]].\"\n  [zloc]\n  (string zloc))\n\n(defn ^{:added \"0.4.0\"} root-string\n  \"Return string representing the zipped-up `zloc` zipper.\"\n  [zloc]\n  (some-> zloc zraw/root node/string))\n\n(defn ^{:deprecated \"0.4.0\"} ->root-string\n  \"DEPRECATED. Renamed to [[root-string]].\"\n  [zloc]\n  (root-string zloc))\n\n#?(:clj\n   (defn- print! [^String s writer]\n     (if writer\n       (.write ^java.io.Writer writer s)\n       (recur s *out*)))\n   :cljs\n   (defn- print! [s _writer]\n     (string-print s)))\n\n(defn print\n  \"Print current node in `zloc`.\n\n   NOTE: Optional `writer` is currently ignored for ClojureScript.\"\n  ([zloc writer]\n   (some-> zloc\n           string\n           (print! writer)))\n  ([zloc] (print zloc nil)))\n\n(defn print-root\n  \"Zip up and print `zloc` from root node.\n\n   NOTE: Optional `writer` is currently ignored for ClojureScript.\"\n  ([zloc writer]\n   (some-> zloc\n           root-string\n           (print! writer)))\n  ([zloc] (print-root zloc nil)))\n"]}