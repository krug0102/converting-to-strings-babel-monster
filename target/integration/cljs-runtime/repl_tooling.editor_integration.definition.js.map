{"version":3,"sources":["repl_tooling/editor_integration/definition.cljs"],"mappings":";AAGA,6DAAA,7DAAMA,kIAAiBC,MAAMC;AAA7B,AACE,IAAAC,aAAA,AAAAC,gBAA8BH;IAA9BE,iBAAA,AAAAE,4BAAAF;mBAAA,AAAAG,4CAAAH,eAAA,1EAAcK;IAAdD,aACoB,AAAA,sGAAA,AAAAH,gBAAmBH;IADvCM,iBAAA,AAAAF,4BAAAE;UAAA,AAAAD,4CAAAC,eAAA,jEACcE;AADd,yGAEM,iBAAAC,WAAKR,5EAIL,AAACU,zDAcD,OAACa;IAlBDd,WAAA,mFAAA,gFAAA,gFAAA,qEAAA;AAAA,AAAA,8EAAAD,SAAAC,0BAAAD,SAAAC,lHAACF,oCAAAA,uDAAAA;KAIO,WAAAI;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAT,4BAAAS;eAAA,AAAAR,4CAAAQ,eAAA,tEAAwBC;UAAxB,AAAAT,4CAAAQ,eAAA,jEAAiCE;eAAjC,AAAAV,4CAAAQ,eAAA,tEAAqCG;UAArC,AAAAX,4CAAAQ,eAAA,jEAA8CI;AAA9C,AACE,oBAAID;AACF,IAAAE,WAAA;IAAAC,WACc,iBAAAC,WAAA,2CAAA,yEAAA,TAAoBJ,6DAAgBC;IAApCG,eAAA,+PAAAA,7OAEQN,UACA,8CAAAM,SAAA,vDAACC,qHAAgB,AAAA,mGAAgBP;AAHzC,AAAA,oBAKQC;AACA,qDAAAK,aAAA,3DAACC,oHAAcN;;AANvBK;;;AADd,AAAA,gGAAAF,SAAAC,mCAAAD,SAAAC,7IAACZ,6CAAAA,gEAAAA;;AASD,IAAAe,WAAA;IAAAC,WAAA,2CAAA,qDAAA,uDAAA,sDAAA;AAAA,AAAA,gGAAAD,SAAAC,mCAAAD,SAAAC,7IAAChB,6CAAAA,gEAAAA;;IAGb;AAAA,AAAU,IAAAkB,WAAA;IAAAC,WAAA,2CAAA,qDAAA,uDAAA,sDAAA;AAAA,AAAA,gGAAAD,SAAAC,mCAAAD,SAAAC,7IAACnB,6CAAAA,gEAAAA;;;AAGnB,8DAAA,9DAAMoB,oIAAkB3B;AAAxB,AACE,wEAAA,jEAACD,2DAAgBC","names":["repl-tooling.editor-integration.definition/goto-definition","state","resolver-opts","map__65983","cljs.core/deref","cljs.core/--destructure-map","cljs.core.get","map__65984","run-callback","eql","G__65985","G__65986","promesa.core.then","p__65987","map__65988","contents","col","filename","row","G__65990","G__65991","G__65992","cljs.core.assoc","G__65994","G__65995","promesa.core.catch$","G__65996","G__65997","repl-tooling.editor-integration.definition/goto-current-var"],"sourcesContent":["(ns repl-tooling.editor-integration.definition\n  (:require [promesa.core :as p]))\n\n(defn goto-definition [state resolver-opts]\n  (let [{:keys [run-callback]} @state\n        {:keys [eql]} (:editor/features @state)]\n    (-> (eql resolver-opts [:definition/filename\n                            :definition/contents\n                            :definition/row\n                            :definition/col])\n        (p/then (fn [{:definition/keys [contents col filename row]}]\n                  (if filename\n                    (run-callback :open-editor\n                                  (cond-> {:file-name filename, :line row}\n\n                                          contents\n                                          (assoc :contents (:text/contents contents))\n\n                                          col\n                                          (assoc :column col)))\n\n                    (run-callback :notify\n                                  {:type :error\n                                   :title \"Could not find definition for var\"}))))\n        (p/catch #(run-callback :notify\n                                {:type :error :title \"Could not find definition for var\"})))))\n\n(defn goto-current-var [state]\n  (goto-definition state nil))\n"]}