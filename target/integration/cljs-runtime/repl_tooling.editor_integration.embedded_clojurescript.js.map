{"version":3,"sources":["repl_tooling/editor_integration/embedded_clojurescript.cljs"],"mappings":"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","names":["repl-tooling.editor-integration.embedded-clojurescript/trs","repl-tooling.editor-integration.embedded-clojurescript/notify!","notify","params","js/Promise","repl-tooling.editor-integration.embedded-clojurescript/treat-error","error","message","G__145219","cljs.core/Keyword","repl-tooling.editor-integration.embedded-clojurescript/save-repl-info!","state","target","repl","cljs.core.swap_BANG_","s","cljs.core.assoc","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/assoc-in","p__145232","map__145233","cljs.core/--destructure-map","cljs.core.get","repl-tooling.editor-integration.embedded-clojurescript/warn-html","title","line","column","msg","file","full-path","norm-name","cljs.core/take-last","cljs.core.apply","cljs.core/str","repl-tooling.editor-integration.embedded-clojurescript/compile-error!","compile-error","txt","cljs.core._EQ_","id","cljs.core.gensym","warnings","p1__145276#","cljs.core.map","cljs.core/cons","cljs.core/vec","interactive","cljs.core.pr_str","cljs.core/tagged-literal","repl_tooling.editor_integration.commands.run_callback_BANG_","repl-tooling.editor-helpers/parse-result","repl-tooling.editor-integration.embedded-clojurescript/connect-and-update-state!","opts","upgrade-cmd","map__145441","map__145445","p1__145403#","on-result","on-stdout","host","port","cljs.core/deref","config","repl-tooling.editor-integration.commands/run-callback!","after-connect","temp__5751__auto__","p1__145413#","p1__145417#","repl-tooling.integrations.connection/connect-self-hosted!","and__4221__auto__","repl-tooling.integrations.connection/connect-shadow-ws!","p1__145418#","p__145485","map__145486","repl-tooling.editor-integration.embedded-clojurescript/choose-id!","prompt","commands","use-new?","p1__145484#","G__145487","cljs.core/keys","cljs.core/name","cljs.core.keyword","p__145489","map__145490","repl-tooling.editor-integration.embedded-clojurescript/connect-embedded","get-config","repl-tooling.features.shadow-cljs/command-for","G__145491","cljs.core/count","cljs.core/first","cljs.core/vals","p__145492","map__145493","repl-tooling.editor-integration.embedded-clojurescript/connect!"],"sourcesContent":["(ns repl-tooling.editor-integration.embedded-clojurescript\n  (:require [repl-tooling.features.shadow-cljs :as shadow]\n            [repl-tooling.integrations.connection :as conn]\n            [repl-tooling.editor-integration.commands :as cmds]\n            [repl-tooling.editor-helpers :as helpers]))\n\n(def trs {:no-build-id \"There's no build ID detected on shadow-cljs file\"\n          :no-shadow-file \"File shadow-cljs.edn not found\"\n          :no-shadow \"This project is not a shadow-cljs, can't connect to CLJS REPL\"\n          :workers-empty \"No shadow-cljs workers running\"\n          :access-denied (str \"Shadow Socket-REPL was given an wrong token. \"\n                              \"Please, be sure you have the Shadow-CLJS compiler \"\n                              \"running and watching some build-id\")\n          :timeout-runtime (str \"Timeout trying to find runtime for Javascript, or \"\n                                \"runtime for Javascript not found. If you're connecting \"\n                                \"to a browser target, make sure that the browser is open, \"\n                                \"on the page you want, and that JS compiled by \"\n                                \"ClojureScript is loaded on the page. If it's not a \"\n                                \"browser, make sure that the app that runs the \"\n                                \"compiled Javascript is running\")\n          :no-worker \"No worker for build\"})\n\n(defn- notify! [notify params]\n  (notify params)\n  (. js/Promise resolve nil))\n\n(defn- treat-error [error notify]\n  (let [message (cond-> error (keyword? error) (trs \"Unknown Error\"))]\n    (notify! notify {:type :error\n                     :title \"Error connecting to ClojureScript\"\n                     :message message})\n    nil))\n\n(defn- save-repl-info! [state target repl]\n  (swap! state\n         (fn [s] (-> s\n                     (assoc :cljs/repl repl)\n                     (assoc-in [:repl/info :cljs/repl-env]\n                               `(shadow.cljs.devtools.api/compiler-env ~target))))))\n\n(defn- warn-html [title {:keys [line column msg file]}]\n  (let [full-path (str file \":\" line \":\" column)\n        norm-name (if (-> full-path count (> 60))\n                    [:abbr {:title file :style {:border \"none\"\n                                                :text-decoration \"none\"}}\n                     (->> full-path (take-last 60) (apply str \"...\"))]\n                    full-path)]\n\n    [:<>\n     [:div.col\n      [:div.title.error title \": \"]\n      [:div.pre msg]]\n     [:a {:href \"#\"\n          :on-click (list 'fn '[_]\n                          (list 'editor/run-callback\n                                :open-editor {:file-name file\n                                              :line (dec line)\n                                              :column (dec column)}))}\n      norm-name]\n     [:div.space]]))\n\n(defn- compile-error! [state compile-error]\n  (let [txt (if (-> compile-error :type (= :warnings)) \"Warning\" \"Error\")\n        id (gensym \"shadow-error-\")\n        warnings (->> compile-error :warnings\n                      (map #(warn-html txt %))\n                      (cons :<>)\n                      vec)\n        interactive (pr-str (tagged-literal\n                             'repl-tooling/interactive\n                             {:html [:div.row\n                                     [:div.title \"Errors while compiling\"]\n                                     warnings]}))]\n    (cmds/run-callback! state :on-start-eval {:id id\n                                              :editor-data {:filename \"<compile>.cljs\"\n                                                            :range [[0 0] [0 0]]\n                                                            :contents \"\"}\n                                              :range [[0 0] [0 0]]})\n    (cmds/run-callback! state :on-eval {:id id\n                                        :editor-data {:filename \"<compile>.cljs\"\n                                                      :range [[0 0] [0 0]]\n                                                      :contents \"\"}\n                                        :range [[0 0] [0 0]]\n                                        :repl nil\n                                        :result (helpers/parse-result\n                                                 {:result interactive\n                                                  :as-text interactive})})))\n\n(defn- connect-and-update-state! [state opts target upgrade-cmd]\n  (let [{:keys [notify on-result on-stdout]} opts\n        {:keys [host port]} (:repl/info @state)\n        config (cmds/run-callback! state :get-config)\n        after-connect #(if-let [error (:error %)]\n                         (treat-error error notify)\n                         (do\n                           (save-repl-info! state target %)\n                           (notify! notify\n                                    {:type :info\n                                     :title \"Connected to ClojureScript\"\n                                     :message (str \"Connected to Shadow-CLJS target \" target)})\n                           %))]\n    (if target\n      ; FIXME: feature toggle\n      (if upgrade-cmd\n        (.then (conn/connect-self-hosted! {:host host\n                                           :port port\n                                           :code upgrade-cmd\n                                           :on-result #(and on-result (on-result %))\n                                           :on-stdout #(and on-stdout (on-stdout %))})\n               after-connect)\n        (.then (conn/connect-shadow-ws! (assoc opts\n                                               :directories (:project-paths config)\n                                               :host host\n                                               :port port\n                                               :build-id target\n                                               :compile-error #(compile-error! state %)))\n               after-connect))\n      (notify! notify {:type :warn\n                       :title \"No option selected\"\n                       :message \"Please select a valid target for Shadow-CLJS\"}))))\n\n(defn- choose-id! [state {:keys [prompt] :as opts} commands use-new?]\n  (.. (prompt {:title \"Multiple Shadow-CLJS targets\"\n               :message \"Choose the build target that you want to connect\"\n               :arguments (->> commands keys (map (fn [id] {:key id :value (name id)})))})\n      (then #(connect-and-update-state! state opts\n                                        (keyword %)\n                                        (when-not use-new? (->> % keyword (get commands)))))))\n\n(defn- connect-embedded [state {:keys [get-config notify] :as opts} use-new?]\n  (let [commands (shadow/command-for (:project-paths (get-config)))]\n    (if-let [error (:error commands)]\n      (treat-error error notify)\n      (case (count commands)\n        0 (treat-error :no-build-id notify)\n        1 (.then (connect-and-update-state! state opts\n                                            (-> commands keys first)\n                                            (when-not use-new? (-> commands vals first))))\n        (choose-id! state opts commands use-new?)))))\n\n(defn connect! [state {:keys [notify] :as opts} use-new?]\n  (cond\n    (:cljs/repl @state)\n    (notify! notify {:type :warn\n                     :title \"REPL already connected\"\n                     :message (str \"REPL is already connected.\\n\\n\"\n                                   \"Please, disconnect the current REPL \"\n                                   \"if you want to connect to another.\")})\n\n    (:clj/aux @state)\n    (connect-embedded state opts use-new?)\n\n    :else\n    (notify! notify {:type :warn\n                     :title \"REPL not connected\"\n                     :message (str \"To connect a self-hosted REPL, \"\n                                   \"you first need to connect a Clojure REPL\")})))\n"]}