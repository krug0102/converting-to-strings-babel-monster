{"version":3,"sources":["repl_tooling/integration/ui_macros.cljc"],"mappings":";AAQA,4DAAA,5DAAOA;AAAP,AAAA;;AAkEG,oDAAA,pDAAMC;AAAN,AACE,IAAMC,OAAK,uBAAA,vBAAGC;AAAd,AAAA,kDAAA,sGAAA,zBACaD,vBAAiB,uBAAA,eAAA,KAAA,3CAACE,qGACtB,AAAaF;;AAGxB,8CAAA,9CAAMG,oGAAUC;AAAhB,AACE,IAAAC,qBAAgB,gBAEK,+CAAA,WAAAE,1DAACC,hBACDE;AADA,AAAS,OAACD,6CAAE,AAAAF,2BAAgBH;8BAF5B,0BAAA,1BAAGH,3BACHK,AACA;AAFrB,AAAA,oBAAAD;AAAA,AAAA,WAAAA,PAAWL;AAAX,AAIE,OAAQA;;AAJV","names":["repl-tooling.integration.ui-macros/type-and-just-for-test","repl-tooling.integration.ui-macros/text-on-result","elem","js/document","clojure.string/replace","repl-tooling.integration.ui-macros/click-on","link-label","temp__5753__auto__","js/Array.prototype.slice.call","p1__93889#","cljs.core.filter","cljs.core._EQ_","cljs.core/first"],"sourcesContent":["(ns repl-tooling.integration.ui-macros\n  #?(:cljs (:require-macros [repl-tooling.integration.ui-macros]))\n  (:require [clojure.core.async :as async]\n            [clojure.string :as str]\n            [reagent.core :as r]\n            [devcards.core :as cards :include-macros true]\n            #?(:cljs [repl-tooling.editor-integration.renderer.protocols :as proto])))\n\n(defn- type-and-just-for-test [])\n\n(defmacro type-and-result [cmd]\n  `(do\n     (~'type-and-eval ~cmd)\n     (async/<! (~'change-stdout))))\n\n(defmacro assert-out [representation cmd]\n  `(do\n     (~'type-and-eval ~cmd)\n     (async/<! (~'change-stdout))\n     (~'check (str/replace (~'txt-for-selector \"#result\") #\"(\\n|\\s+)+\" \" \") ~'=> ~representation)))\n\n(defmacro type-and-assert-result [representation cmd]\n  `(do\n     (repl-tooling.integration.fake-editor/type-and-eval ~cmd)\n     (promesa.core/let [res# (repl-tooling.integration.fake-editor/change-result-p)]\n       (check.async/check (str/replace res# #\"(\\n|\\s+)+\" \" \") ~'=> ~representation))))\n\n(defmacro click-nth-link-and-assert [representation nth]\n  `(do\n     (~'click-selector ~(str \"#result a:nth-child(n+\" nth \")\"))\n     (async/<! (~'change-result))\n     (~'check (str/replace (~'txt-for-selector \"#result\") #\"(\\n|\\s+)+\" \" \")\n       ~'=> ~representation)))\n\n(defmacro click-nth-link-and-assert-children [representation nth]\n  `(do\n     (~'click-selector ~(str \"#result a:nth-child(n+\" nth \")\"))\n     (async/<! (~'change-result))\n     (~'check (str/replace (~'txt-for-selector \"#result .children\") #\"(\\n|\\s+)+\" \" \")\n       ~'=> ~representation)))\n\n(defmacro click-link-and-assert [representation nth]\n  `(promesa.core/do!\n    (.. ~'js/document\n        (~'querySelector ~(str \"#result a:nth-child(n+\" nth \")\"))\n        ~'click)\n\n    (promesa.core/let [res# (repl-tooling.integration.fake-editor/change-result-p)]\n      (check.async/check (str/replace res# #\"(\\n|\\s+)+\" \" \") ~'=> ~representation))))\n\n(defmacro click-link-and-assert-children [representation nth]\n  `(promesa.core/do!\n     (.. ~'js/document\n         (~'querySelector ~(str \"#result a:nth-child(n+\" nth \")\"))\n         ~'click)\n\n     (repl-tooling.integration.fake-editor/change-result-p)\n     (promesa.core/let [res# (repl-tooling.integration.fake-editor/txt-for-selector\n                              \"#result .children\")]\n        (check.async/check (str/replace res# #\"(\\n|\\s+)+\" \" \") ~'=> ~representation))))\n\n(defmacro card-for-renderer! []\n  `(do\n    (defonce ~'state (r/atom nil))\n    (defn ~'result []\n      (if-let [obj# @~'state]\n        (let [html# (repl-tooling.editor-integration.renderer.protocols/as-html obj# ~'state true)]\n          [:div.result html#])\n        [:div.result \"Waiting for result\"]))\n\n    (cards/defcard-rg ~'render-viewport\n      [~'result])))\n\n#?(:cljs\n   (defn text-on-result []\n     (let [elem (. js/document querySelector \"div.result\")]\n       {:text (-> elem .-innerText (str/replace #\"\\n\" \" \"))\n        :html (.-innerHTML elem)})))\n\n#?(:cljs\n   (defn click-on [link-label]\n     (when-let [elem (->> (. js/document querySelectorAll \"a\")\n                          js/Array.prototype.slice.call\n                          (filter #(= (.-innerText %) link-label))\n                          first)]\n       (.click elem))))\n"]}