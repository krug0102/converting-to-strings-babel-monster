{"version":3,"sources":["duck_repled/editor_resolvers.cljc"],"mappings":"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","names":["com.wsscode.pathom3.connect.operation.resolver","p__89048","map__89049","cljs.core/--destructure-map","cljs.core.get","original89044","resolver89045","outputs89046","op89047","cljs.core.assoc","a__89033__auto__","b__89034__auto__","promesa.protocols/-bind","___56277__auto__","result__89035__auto__","___56267__auto__","promesa.protocols/-promise","duck_repled.schemas.validate_BANG_","cljs.core/keys","duck-repled.editor-resolvers/seed-data","seed","_","duck-repled.schemas/registry","cljs.core.remove","cljs.core/vec","p__89070","map__89071","original89050","resolver89051","outputs89052","op89053","duck-repled.editor-resolvers/separate-data","editor-data","file","G__89072","p__89083","map__89084","original89079","resolver89080","outputs89081","op89082","duck-repled.editor-resolvers/namespace-from-text","top-blocks","range","temp__5753__auto__","vec__89088","cljs.core.nth","ns","duck-repled.editor-helpers/ns-range-for","cljs.core/first","p__89107","map__89108","original89103","resolver89104","outputs89105","op89106","duck-repled.editor-resolvers/contents-top-blocks","contents","duck-repled.editor-helpers/top-blocks","p__89122","map__89123","original89118","resolver89119","outputs89120","op89121","duck-repled.editor-resolvers/contents-top-block","com.wsscode.pathom3.connect.operation/?","vec__89124","text","duck-repled.editor-helpers/top-block-for","G__89127","p__89148","map__89149","original89140","resolver89141","outputs89142","op89143","duck-repled.editor-resolvers/text-block","vec__89150","duck-repled.editor-helpers/block-for","G__89153","p__89169","map__89170","original89161","resolver89162","outputs89163","op89164","duck-repled.editor-resolvers/text-selection","duck-repled.editor-helpers/text-in-range","G__89173","p__89188","map__89191","original89175","resolver89176","outputs89177","op89178","duck-repled.editor-resolvers/default-text-elements","original89196","resolver89197","outputs89198","op89199","duck-repled.editor-resolvers/resolver-for-ns","inputs","or__4223__auto__","kind","cljs.core.symbol","cljs.core._EQ_","p__89209","map__89210","original89204","resolver89205","outputs89206","op89207","duck-repled.editor-resolvers/resolve-repl-kind","repl-kind","eval-as","filename","and__4221__auto__","cljs.core.not_EQ_","fexpr__89211","cljs-file?","clojure.string/ends-with?","cljc-file?","G__89212","cljs.core/Keyword","p__89239","map__89240","original89233","resolver89234","outputs89235","op89236","duck-repled.editor-resolvers/var-from-text","vec__89245","curr-var","duck-repled.editor-helpers/current-var","G__89248","p__89260","map__89264","original89256","resolver89257","outputs89258","op89259","duck-repled.editor-resolvers/contents-from-filename","env","duck-repled.editor-helpers/read-file","com.wsscode.pathom3.connect.operation/params","duck-repled.editor-resolvers/resolvers"],"sourcesContent":["(ns duck-repled.editor-resolvers\n  (:require [clojure.string :as str]\n            [duck-repled.schemas :as schemas]\n            [duck-repled.connect :as connect]\n            [com.wsscode.pathom3.connect.operation :as pco]\n            [duck-repled.editor-helpers :as editor-helpers]))\n\n(connect/defresolver seed-data [{:keys [seed]} _]\n  {::pco/output (->> schemas/registry keys (remove #{:map}) vec)\n   ::pco/priority 99}\n  seed)\n\n(connect/defresolver separate-data [{editor-data :editor/data}]\n  {::pco/output [:editor/filename {:editor/contents [:text/contents :text/range]}]}\n\n  ; (when-let [editor-data (-> env :seed :editor/data)]\n  (let [file (:filename editor-data)]\n    (cond-> {:editor/contents {:text/contents (:contents editor-data)\n                               :text/range (:range editor-data)}}\n            file (assoc :editor/filename file))))\n\n(connect/defresolver namespace-from-text [{:text/keys [top-blocks range]}]\n  {::pco/output [{:text/ns [:text/contents :text/range :text/ns]}]}\n\n  (when-let [[range ns] (editor-helpers/ns-range-for top-blocks (first range))]\n    {:text/ns {:text/contents (str ns) :text/range range}}))\n\n(connect/defresolver contents-top-blocks [{:text/keys [contents]}]\n  {:text/top-blocks (editor-helpers/top-blocks contents)})\n\n(connect/defresolver contents-top-block [{:text/keys [top-blocks range ns]}]\n  {::pco/input [:text/top-blocks :text/range (pco/? :text/ns)]\n   ::pco/output [{:text/top-block [:text/contents :text/range :text/ns]}]}\n\n  (when-let [[range text] (editor-helpers/top-block-for top-blocks (first range))]\n    {:text/top-block (cond-> {:text/contents text :text/range range}\n                             ns (assoc :text/ns ns))}))\n\n(connect/defresolver text-block [{:text/keys [contents range ns]}]\n  {::pco/input [:text/contents :text/range (pco/? :text/ns)]\n   ::pco/output [{:text/block [:text/contents :text/range :text/ns]}]}\n  (when-let [[range text] (editor-helpers/block-for contents (first range))]\n    {:text/block (cond-> {:text/contents text :text/range range}\n                         ns (assoc :text/ns ns))}))\n\n(connect/defresolver text-selection [{:text/keys [contents range ns]}]\n  {::pco/input [:text/contents :text/range (pco/? :text/ns)]\n   ::pco/output [{:text/selection [:text/contents :text/range :text/ns]}]}\n\n  (when-let [text (editor-helpers/text-in-range contents range)]\n    {:text/selection (cond-> {:text/contents text :text/range range}\n                             ns (assoc :text/ns ns))}))\n\n(connect/defresolver default-text-elements [{:keys [editor/contents]}]\n  {::pco/priority -10}\n  {:text/contents (:text/contents contents)\n   :text/range (:text/range contents)})\n\n(connect/defresolver resolver-for-ns [inputs]\n  {::pco/input [(pco/? :text/ns)\n                (pco/? :repl/kind)]\n   ::pco/output [:repl/namespace]}\n\n  (let [contents (or (-> inputs :text/ns :text/contents)\n                     (-> inputs :editor/contents :text/ns :text/contents))\n        kind (:repl/kind inputs)]\n    (cond\n      contents {:repl/namespace (symbol contents)}\n      (nil? kind) nil\n      (= :cljs kind) {:repl/namespace 'cljs.user}\n      :not-cljs {:repl/namespace 'user})))\n\n(connect/defresolver resolve-repl-kind\n  [{:keys [config/repl-kind config/eval-as editor/filename]}]\n  {::pco/input [(pco/? :config/repl-kind) (pco/? :config/eval-as)\n                (pco/? :editor/filename)]\n   ::pco/output [:repl/kind]}\n\n  (cond\n    (and repl-kind (not= :clj repl-kind))\n    {:repl/kind repl-kind}\n\n    (#{:clj :cljs} eval-as)\n    {:repl/kind eval-as}\n\n    :else\n    (let [cljs-file? (str/ends-with? filename \".cljs\")\n          cljc-file? (or (str/ends-with? filename \".cljc\")\n                         (str/ends-with? filename \".cljx\"))]\n      (case eval-as\n        :prefer-clj {:repl/kind (if cljs-file? :cljs :clj)}\n        :prefer-cljs {:repl/kind (if (and (not cljs-file?) (not cljc-file?))\n                                   :clj\n                                   :cljs)}\n        nil))))\n\n(connect/defresolver var-from-text [{:text/keys [contents range ns]}]\n  {::pco/input [:text/contents :text/range (pco/? :text/ns)]\n   ::pco/output [{:text/current-var [:text/contents :text/range :text/ns]}]}\n\n  (when-let [[range curr-var] (editor-helpers/current-var contents (first range))]\n    {:text/current-var (cond-> {:text/contents curr-var :text/range range}\n                               ns (assoc :text/ns ns))}))\n\n(connect/defresolver contents-from-filename [env {:file/keys [filename]}]\n  {::pco/input [:file/filename]\n   ::pco/output [{:file/contents [:text/contents :text/range]}]}\n\n  (let [contents (editor-helpers/read-file filename)\n        range (-> env pco/params (:range [[0 0] [0 0]]))]\n    (when contents\n      {:file/contents {:text/range range\n                       :text/contents contents}})))\n\n; (pco/defresolver all-namespaces\n;   [env {:keys [repl/clj]}]\n;   {::pco/output [{:repl/namespaces [:repl/namespace]}]}\n;\n;   (p/let [f (-> (pco/params env) :filter)\n;           {:keys [result]} (eval/eval clj \"(clojure.core/mapv clojure.core/ns-name (clojure.core/all-ns))\")]\n;     {:repl/namespaces (cond->> (map (fn [n] {:repl/namespace n}) result)\n;                         f (filter (fn [n]\n;                                     (-> n :repl/namespace str\n;                                         (str/starts-with? f)))))}))\n;\n; (pco/defresolver need-cljs-from-config [{:editor/keys [config]}]\n;   {::pco/output [:cljs/required?]}\n;\n;   (case (:eval-mode config)\n;     :clj {:cljs/required? false}\n;     :cljs {:cljs/required? true}\n;     nil))\n;\n; (pco/defresolver all-vars-in-ns\n;   [_ {:repl/keys [namespace aux]}]\n;   {::pco/output [{:namespace/vars [:var/fqn]}]}\n;\n;   (p/let [{:keys [result]} (eval/eval aux (str \"(clojure.core/ns-interns '\" namespace \")\"))]\n;     {:namespace/vars (map (fn [v] {:var/fqn (symbol namespace v)})\n;                        (keys result))}))\n;\n; (pco/defresolver cljs-env [{:keys [editor-state]} {:keys [repl/clj]}]\n;   {::pco/output [:cljs/env]}\n;\n;   (when-let [cmd (-> @editor-state :repl/info :cljs/repl-env)]\n;     (p/let [{:keys [result]} (eval/eval clj (str cmd))]\n;       {:cljs/env result})))\n;\n; (def ^:private kondo-cache (atom {:cache nil :when 0}))\n;\n; (defn- run-kondo [dirs]\n;   (let [p      (p/deferred)\n;         buffer (atom \"\")\n;         cp     (spawn \"clj-kondo\"\n;                  (clj->js (concat [\"--lint\"]\n;                             dirs\n;                             [\"--config\"\n;                              \"{:output {:analysis true :format :json}}\"])))]\n;     (.. cp -stdout (on \"data\" #(swap! buffer str %)))\n;     (. cp on \"error\" #(p/resolve! p nil))\n;     (. cp on \"close\" #(p/resolve! p @buffer))\n;     p))\n;\n; (defn- run-kondo-maybe [dirs]\n;   (let [curr-time (long (new js/Date))\n;         {:keys [when cache]} @kondo-cache]\n;     (if (< (- curr-time 6000) when)\n;       cache\n;       (p/finally (run-kondo dirs)\n;         (fn [res]\n;           (reset! kondo-cache {:when (int (new js/Date)) :cache res}))))))\n;\n; (pco/defresolver analysis-from-kondo\n;   [{:keys [editor-state]} {:keys [editor/config]}]\n;   {::pco/output [:kondo/analysis]}\n;\n;   (when-not editor-state\n;     (p/let [kondo (run-kondo-maybe (:project-paths config))]\n;       {:kondo/analysis (some-> (.parse js/JSON kondo) .-analysis)})))\n;\n; (defn- get-from-ns-usages [analysis namespace ns-part]\n;   (-> analysis\n;       (aget \"namespace-usages\")\n;       (->> (filter (fn [^js %] (and (-> % .-from (= (str namespace)))\n;                                     (-> % .-alias (= ns-part))))))\n;       first\n;       (some-> .-to)))\n;\n; (defn- get-from-var-usages [analysis namespace current-var]\n;   (-> analysis\n;       (aget \"var-usages\")\n;       (->> (filter (fn [^js %] (and (-> % .-from (= (str namespace)))\n;                                     (-> % .-name (= current-var))))))\n;       first\n;       (some-> .-to)))\n;\n; (defn- get-from-definitions [analysis namespace current-var]\n;   (-> analysis\n;       (aget \"var-definitions\")\n;       (->> (filter (fn [^js %] (and (-> % .-ns (= (str namespace)))\n;                                     (-> % .-name (= current-var))))))\n;       first))\n;\n; (pco/defresolver fqn-from-kondo\n;   [{:keys [kondo/analysis editor/current-var repl/namespace]}]\n;   {::pco/output [:var/fqn]}\n;\n;   (let [as-sym     (symbol current-var)\n;         ns-part    (clojure.core/namespace as-sym)\n;         without-ns (name as-sym)\n;         finding    (if ns-part\n;                      (get-from-ns-usages analysis namespace ns-part)\n;                      (or (get-from-var-usages analysis namespace current-var)\n;                          (some-> (get-from-definitions analysis namespace current-var)\n;                                  .-ns)))]\n;     (when finding\n;       {:var/fqn (symbol finding without-ns)})))\n;\n; (pco/defresolver meta-from-kondo\n;   [{:keys [kondo/analysis var/fqn]}]\n;   {::pco/output [:var/meta]}\n;\n;   (let [ns-part    (namespace fqn)\n;         without-ns (name fqn)]\n;     (when-let [^js res (get-from-definitions analysis ns-part without-ns)]\n;       {:var/meta (cond-> {:file   (.-filename res)\n;                           :line   (.-row res)\n;                           :column (.-col res)\n;                           :ns     (.-ns res) :name (.-name res)}\n;                    (.-doc res) (assoc :doc (.-doc res))\n;                    (.-test res) (assoc :test (.-test res)))})))\n;\n\n(def resolvers [seed-data separate-data resolver-for-ns\n                ; BLOCKS\n                text-block\n                contents-top-blocks contents-top-block\n                var-from-text text-selection namespace-from-text\n\n                resolve-repl-kind default-text-elements\n                contents-from-filename])\n"]}