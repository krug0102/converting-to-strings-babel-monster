{"version":3,"sources":["com/wsscode/log.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","com.wsscode.log/log-levels","this__4472__auto__","k__4473__auto__","this__4474__auto__","k83186","else__4475__auto__","G__83192","cljs.core/Keyword","min-level","cljs.core.get","__extmap","this__4492__auto__","f__4493__auto__","init__4494__auto__","cljs.core.reduce","ret__4495__auto__","p__83195","vec__83196","k__4496__auto__","cljs.core.nth","v__4497__auto__","this__4487__auto__","writer__4488__auto__","opts__4489__auto__","pr-pair__4490__auto__","keyval__4491__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__83185","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4470__auto__","__meta","this__4467__auto__","__hash","this__4476__auto__","cljs.core/count","this__4468__auto__","h__4330__auto__","coll__4469__auto__","cljs.core/hash-unordered-coll","this83187","other83188","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","p__83204","map__83205","cljs.core/--destructure-map","this__4482__auto__","k__4483__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4479__auto__","G__83211","this__4480__auto__","k__4481__auto__","pred__83214","cljs.core/keyword-identical?","expr__83215","cljs.core.assoc","this__4485__auto__","cljs.core/seq","cljs.core/MapEntry","this__4471__auto__","this__4477__auto__","entry__4478__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","com.wsscode.log/PrintLogger","this__4516__auto__","cljs.core/List","writer__4517__auto__","cljs.core/-write","G__83189","extmap__4512__auto__","G__83218","cljs.core/record?","com.wsscode.log/->PrintLogger","com.wsscode.log/map->PrintLogger","_this","timestamp","level","event","data","cljs.core.print","clojure.string/upper-case","cljs.core.subs","cljs.core/name","cljs.core.pr_str","com.wsscode.log/*active-logger*","com.wsscode.log/now","js/Date","com.wsscode.log/log-event","logger","com.wsscode.log.protocols/-log-event","com.wsscode.log/make-event","event-level","event-name","cljs.core.merge"],"sourcesContent":["(ns com.wsscode.log\n  (:require\n    [clojure.string :as str]\n    [com.fulcrologic.guardrails.core :refer [<- => >def >defn >fdef ? |]]\n    [com.wsscode.log.protocols :as logp])\n  #?(:cljs\n     (:require-macros\n       [com.wsscode.log]))\n  #?(:clj\n     (:import\n       (java.util\n         Date))))\n\n(>def ::level #{::level-debug\n                ::level-info\n                ::level-warn\n                ::level-error})\n\n(def log-levels\n  {::level-debug 1\n   ::level-info  2\n   ::level-warn  3\n   ::level-error 4})\n\n(defrecord PrintLogger [min-level]\n  logp/Logger\n  (-log-event [_this {::keys [timestamp level event] :as data}]\n              (print (str\n                       timestamp \" \"\n                       (if level (str (str/upper-case (subs (name level) 6)) \" \"))\n                       event\n                       \" - \"\n                       (pr-str (dissoc data ::level ::event ::timestamp))\n                       \"\\n\"))))\n\n(def ^:dynamic *active-logger* (->PrintLogger ::level-debug))\n\n(defn now []\n  #?(:clj  (Date.)\n     :cljs (js/Date.)))\n\n(defn log-event [logger event]\n  (logp/-log-event logger event))\n\n(defn make-event [event-level event-name data]\n  (merge\n    {::event     event-name\n     ::level     event-level\n     ::timestamp (now)}\n    data))\n\n#?(:clj\n   (defmacro debug\n     [event-name event-data]\n     `(log-event *active-logger*\n                 (make-event ::level-debug ~event-name ~event-data))))\n\n#?(:clj\n   (defmacro info\n     [event-name event-data]\n     `(log-event *active-logger*\n                 (make-event ::level-info ~event-name ~event-data))))\n\n#?(:clj\n   (defmacro warn\n     [event-name event-data]\n     `(log-event *active-logger*\n                 (make-event ::level-warn ~event-name ~event-data))))\n\n#?(:clj\n   (defmacro error\n     [event-name event-data]\n     `(log-event *active-logger*\n                 (make-event ::level-error ~event-name ~event-data))))\n\n#?(:clj\n   (defmacro with-logger [logger & body]\n     `(binding [*active-logger* ~logger]\n        ~@body)))\n"]}