{"version":3,"sources":["devcards/util/edn_renderer.cljs"],"mappings":"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","names":["js/devcards","js/devcards.util","js/devcards.util.edn-renderer","js/devcards.util.edn-renderer.*key-counter*","devcards.util.edn-renderer/*key-counter*","devcards.util.edn-renderer/get-key","cljs.core.swap_BANG_","cljs.core/inc","cljs.core/deref","devcards.util.edn-renderer/literal?","x","cljs.core/seq?","cljs.core/coll?","devcards.util.edn-renderer/separator*","s","js/React.createElement","sablono.interpreter/interpret","devcards.util.edn-renderer/clearfix-separator*","devcards.util.edn-renderer/separate-fn","coll","cljs.core/every?","devcards.util.edn-renderer/interpose-separator","rct-coll","sep-fn","cljs.core/rest","cljs.core.interleave","cljs.core.repeatedly","cljs.core/cons","cljs.core/first","cljs.core/to-array","devcards.util.edn-renderer/literal","class","devcards.util.utils/pprint-str","devcards.util.edn-renderer/html-val","index","v","devcards.util.edn-renderer/html","devcards.util.edn-renderer/join-html","separator","cljs.core.into","cljs.core.map_indexed","p__46944","vec__46945","cljs.core.nth","devcards.util.edn-renderer/html-keyval","k","cljs.core.prn_str","devcards.util.edn-renderer/html-keyvals","cljs.core.mapv","cljs.core/vals","devcards.util.edn-renderer/open-close","class-str","opener","closer","cljs.core/hash","devcards.util.edn-renderer/html-collection","devcards.util.edn-renderer/html-map","devcards.util.edn-renderer/html-string","cljs.core/Keyword","cljs.core/Symbol","cljs.core/map?","cljs.core/set?","cljs.core/vector?","devcards.util.edn-renderer/html-edn","e","*key-counter*-orig-val__46973","*key-counter*-temp-val__46974","cljs.core.atom"],"sourcesContent":["(ns devcards.util.edn-renderer\n  (:require\n   [sablono.core :as sab]\n   [devcards.util.utils :as utils]))\n\n(defonce ^:dynamic *key-counter* nil)\n\n(defn get-key []\n  (swap! *key-counter* inc)\n  (str \"k-\" @*key-counter*))\n\n(declare html)\n\n(defn literal? [x]\n  (and (not (seq? x))\n       (not (coll? x))))\n\n(defn separator* [s]\n  (sab/html [:span.seperator {:key (get-key)} s]))\n\n(defn clearfix-separator* [s]\n  (sab/html [:span {:key (get-key)} (separator* s) [:span.clearfix]]))\n\n(defn separate-fn [coll]\n  (if (not (every? literal? coll)) clearfix-separator* separator*))\n\n(defn interpose-separator [rct-coll s sep-fn]\n  (->> (rest rct-coll)\n       (interleave (repeatedly #(sep-fn s))) \n       (cons (first rct-coll))\n       to-array))\n\n(defn literal [class x]\n  (sab/html [:span { :className class :key (get-key)} (utils/pprint-str x)]))\n\n(defn html-val [index v]\n  (sab/html [:span {:key index} (html v)]))\n\n(defn join-html [separator coll]\n  (interpose-separator (into [] (map-indexed html-val coll))\n                       separator\n                       (separate-fn coll)))\n\n(defn html-keyval [[k v]]\n  (sab/html\n   [:span.keyval { :key (prn-str k)} (html k) (html v)]))\n\n(defn html-keyvals [coll]\n  (interpose-separator (mapv html-keyval coll)\n                       \" \"\n                       (separate-fn (vals coll))))\n\n(defn open-close [class-str opener closer rct-coll]\n  (sab/html\n   [:span {:className class-str :key (str (hash rct-coll))}\n    [:span.opener {:key 1} opener]\n    [:span.contents {:key 2} rct-coll]\n    [:span.closer {:key 3} closer]]))\n\n(defn html-collection [class opener closer coll]\n  (open-close (str \"collection \" class ) opener closer (join-html \" \" coll))\n    ;; this speeds things up but fails in om\n  #_(rct/pure coll ...)\n  )\n\n(defn html-map [coll]\n  (open-close \"collection map\" \"{\" \"}\" (html-keyvals coll))\n  ;; this speeds things up but fails in om\n  #_(rct/pure coll ...))\n\n(defn html-string [s]\n  (open-close \"string\" \"\\\"\" \"\\\"\" s))\n\n(defn html [x]\n  (cond\n   (number? x)  (literal \"number\" x)\n   (keyword? x) (literal \"keyword\" x)\n   (symbol? x)  (literal \"symbol\" x)\n   (string? x)  (html-string x)\n   (map? x)     (html-map x)\n   (set? x)     (html-collection \"set\"    \"#{\" \"}\" x)\n   (vector? x)  (html-collection \"vector\" \"[\" \"]\" x)\n   (seq? x)     (html-collection \"seq\"    \"(\" \")\" x)\n   :else        (literal \"literal\" x)))\n\n(defn html-edn [e]\n  (binding [*key-counter* (atom 0)]\n    (sab/html [:div.com-rigsomelight-rendered-edn.com-rigsomelight-devcards-typog\n               {:key \"devcards-edn-block\"} (html e)])))\n"]}