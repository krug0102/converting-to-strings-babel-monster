{"version":3,"sources":["com/wsscode/pathom3/plugin.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/symbol?","cljs.spec.alpha.every_impl","cljs.spec.alpha.tuple_impl","cljs.spec.alpha/map-spec-impl","G__81178","cljs.core/map?","cljs.core/contains?","G__81176","i__11949__auto__","v__11950__auto__","cljs.core.nth","G__81181","G__81182","cljs.core/coll?","cljs.spec.alpha/or-spec-impl","G__81183","G__81185","G__81184","cljs.core/keyword?","cljs.core/fn?","cljs.core/vector?","G__81187","com.wsscode.pathom3.plugin/compile-extensions","f","extension-wrappers","cljs.core.reduce","wrapper","com.wsscode.pathom3.plugin/compile-env-extensions","env","plugin-type","plugins","cljs.core.get_in","p__81189","map__81190","cljs.core/--destructure-map","cljs.core.get","com.wsscode.pathom3.plugin/build-plugin-actions","plugin-order","index-plugins","k","cljs.core/assoc-in","cljs.core.into","cljs.core.keep","p__81191","map__81192","id","cljs.core/rseq","p__81194","p__81195","map__81196","map__81197","com.wsscode.pathom3.plugin/add-plugin-at-order","add-before","add-after","js/Error","cljs.core/not","or__4223__auto__","and__4221__auto__","ref-id","ref-position","com.wsscode.misc.coll/index-of","G__81198","cljs.core.update_in","com.wsscode.misc.coll/conj-at-index","com.wsscode.misc.coll/vconj","com.wsscode.pathom3.plugin/plugin-extensions","plugin","cljs.core/keys","com.wsscode.misc.coll/filter-vals","com.wsscode.pathom3.plugin/refresh-actions-from-plugin","var_args","G__81201","com.wsscode.pathom3.plugin/register-plugin","p__81202","map__81203","com.wsscode.pathom3.plugin.register_plugin","env'","com.wsscode.pathom3.plugin/register-before","cljs.core.assoc","com.wsscode.pathom3.plugin/register-after","G__81205","com.wsscode.pathom3.plugin/register","com.wsscode.pathom3.plugin.register","cljs.core/sequential?","cljs.core.ex_info","com.wsscode.pathom3.plugin/remove-plugin","plugin-id","temp__5751__auto__","map__81207","cljs.core.update","cljs.core/dissoc","p1__81206#","cljs.core.remove","G__81223","com.wsscode.pathom3.plugin/run-with-plugins","args-arr__4850__auto__","len__4829__auto__","i__4830__auto__","argseq__4851__auto__","cljs.core/IndexedSeq","seq81211","G__81212","cljs.core/first","cljs.core/next","G__81213","G__81214","G__81215","G__81216","G__81217","G__81218","G__81219","G__81220","G__81221","G__81222","self__4816__auto__","augmented-v","a1","a2","a3","a4","a5","a6","a7","a8","args","cljs.core.apply"],"sourcesContent":["(ns com.wsscode.pathom3.plugin\n  (:require\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.guardrails.core :refer [<- => >def >defn >fdef ? |]]\n    [com.wsscode.misc.coll :as coll]\n    #?(:clj [com.wsscode.misc.macros :as macros]))\n  #?(:cljs\n     (:require-macros\n       [com.wsscode.pathom3.plugin])))\n\n(>def ::id \"Plugin ID\" symbol?)\n(>def ::index-plugins (s/map-of ::id (s/keys :req [::id])))\n\n(>def ::plugin (s/keys :req [::id]))\n(>def ::plugins (s/coll-of ::plugin))\n\n(>def ::plugin-or-plugins\n  (s/or :one ::plugin :many\n        (s/coll-of ::plugin-or-plugins)))\n\n(>def ::plugin-actions \"Compiled list of actions for a given plugin type\"\n  (s/map-of keyword? (s/coll-of fn? :kind vector?)))\n\n(>def ::plugin-order (s/coll-of ::plugin :kind vector?))\n\n(defn compile-extensions\n  \"Given a function and a list of extension wrappers, call then in order to create\n  a composed functions of them.\"\n  [f extension-wrappers]\n  (reduce\n    (fn [f wrapper]\n      (wrapper f))\n    f\n    extension-wrappers))\n\n(defn compile-env-extensions\n  [env plugin-type f]\n  (let [plugins (get-in env [::plugin-actions plugin-type])]\n    (compile-extensions f plugins)))\n\n(defn build-plugin-actions [{::keys [plugin-order index-plugins] :as env} k]\n  (assoc-in env [::plugin-actions k]\n    (into\n      []\n      (keep\n        (fn [{::keys [id]}]\n          (get-in index-plugins [id k])))\n      (rseq plugin-order))))\n\n(defn add-plugin-at-order\n  [{::keys [plugin-order] :as env} {::keys [id add-before add-after]}]\n  (assert (or (not (or add-before add-after))\n              (not (and add-before add-after)))\n    \"You can provide add-before or add-after, but not both at the same time.\")\n  (let [ref-id       (or add-before add-after)\n        ref-position (coll/index-of plugin-order {::id ref-id})]\n    (cond-> env\n      add-before\n      (update-in [::plugin-order] coll/conj-at-index ref-position {::id id})\n\n      add-after\n      (update-in [::plugin-order] coll/conj-at-index (inc ref-position) {::id id})\n\n      (not (or add-before add-after))\n      (update-in [::plugin-order] coll/vconj {::id id}))))\n\n(defn plugin-extensions [plugin]\n  (keys (coll/filter-vals fn? plugin)))\n\n(defn refresh-actions-from-plugin [env plugin]\n  (reduce\n    build-plugin-actions\n    env\n    (plugin-extensions plugin)))\n\n(>defn register-plugin\n  \"Add a new plugin to the end. This will create the appropriated structures to optimize\n  the plugin call speed.\"\n  ([plugin]\n   [::plugin => map?] (register-plugin {} plugin))\n  ([env {::keys [id] :as plugin}]\n   [map? ::plugin => map?]\n   (assert (nil? (get-in env [::index-plugins id]))\n     (str \"Tried to add duplicated plugin: \" id))\n   (let [env' (-> env\n                  (assoc-in [::index-plugins id] plugin)\n                  (add-plugin-at-order plugin))]\n     (refresh-actions-from-plugin env' plugin))))\n\n(>defn register-before\n  ([env ref-id plugin]\n   [map? ::id ::plugin => map?]\n   (register-plugin env (assoc plugin ::add-before ref-id))))\n\n(>defn register-after\n  ([env ref-id plugin]\n   [map? ::id ::plugin => map?]\n   (register-plugin env (assoc plugin ::add-after ref-id))))\n\n(>defn register\n  \"Add one or many plugins.\"\n  ([plugins] [::plugin-or-plugins => map?] (register {} plugins))\n  ([env plugins]\n   [map? ::plugin-or-plugins => map?]\n   (cond\n     (::id plugins)\n     (register-plugin env plugins)\n\n     (sequential? plugins)\n     (reduce\n       register\n       env\n       plugins)\n\n     :else\n     (throw\n       (ex-info \"Invalid plugin, make sure you set the ::p.plugin/id on it.\"\n                {:plugin plugins})))))\n\n(>defn remove-plugin\n  \"Remove a plugin.\"\n  [env plugin-id]\n  [map? ::id => map?]\n  (if-let [{::keys [id] :as plugin} (get-in env [::index-plugins plugin-id])]\n    (let [env' (-> env\n                   (update ::index-plugins dissoc id)\n                   (update ::plugin-order #(into [] (remove #{{::id id}}) %)))]\n      (refresh-actions-from-plugin env' plugin))\n    env))\n\n(defn run-with-plugins\n  \"Run some operation f wrapping it with the plugins of a given plugin-type installed\n  in the environment.\"\n  ([env plugin-type f]\n   (let [augmented-v (compile-env-extensions env plugin-type f)]\n     (augmented-v)))\n  ([env plugin-type f a1]\n   (let [augmented-v (compile-env-extensions env plugin-type f)]\n     (augmented-v a1)))\n  ([env plugin-type f a1 a2]\n   (let [augmented-v (compile-env-extensions env plugin-type f)]\n     (augmented-v a1 a2)))\n  ([env plugin-type f a1 a2 a3]\n   (let [augmented-v (compile-env-extensions env plugin-type f)]\n     (augmented-v a1 a2 a3)))\n  ([env plugin-type f a1 a2 a3 a4]\n   (let [augmented-v (compile-env-extensions env plugin-type f)]\n     (augmented-v a1 a2 a3 a4)))\n  ([env plugin-type f a1 a2 a3 a4 a5]\n   (let [augmented-v (compile-env-extensions env plugin-type f)]\n     (augmented-v a1 a2 a3 a4 a5)))\n  ([env plugin-type f a1 a2 a3 a4 a5 a6]\n   (let [augmented-v (compile-env-extensions env plugin-type f)]\n     (augmented-v a1 a2 a3 a4 a5 a6)))\n  ([env plugin-type f a1 a2 a3 a4 a5 a6 a7]\n   (let [augmented-v (compile-env-extensions env plugin-type f)]\n     (augmented-v a1 a2 a3 a4 a5 a6 a7)))\n  ([env plugin-type f a1 a2 a3 a4 a5 a6 a7 a8]\n   (let [augmented-v (compile-env-extensions env plugin-type f)]\n     (augmented-v a1 a2 a3 a4 a5 a6 a7 a8)))\n  ([env plugin-type f a1 a2 a3 a4 a5 a6 a7 a8 & args]\n   (apply (compile-env-extensions env plugin-type f) a1 a2 a3 a4 a5 a6 a7 a8 args)))\n\n#?(:clj\n   (defmacro defplugin\n     ([id doc options]\n      (let [fqsym (macros/full-symbol id (str *ns*))]\n        `(def ~id ~doc (merge {::id '~fqsym} ~options))))\n     ([id options]\n      (let [fqsym (macros/full-symbol id (str *ns*))]\n        `(def ~id (merge {::id '~fqsym} ~options))))))\n"]}