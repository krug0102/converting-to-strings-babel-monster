{"version":3,"sources":["paprika/collection.cljc"],"mappings":";AAGA,4BAAA,5BAAMA,gEAAQC,EAAEC;AAAhB,uFAEO,AAACC,4CAAI,WAAAC,9IACL,oDAAA,7CAACK;AADI,AAAA,IAAAJ,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAME;QAAN,AAAAD,4CAAAD,WAAA,IAAA,/DAAQG;AAAR,AAAY,QAACP,kCAAAA,uCAAAA,PAAEM,mBAAAA,jBAAEC,mBAAAA;GADtBN;;AAIP,8BAAA,9BAAMQ,oEAAUT,EAAEC;AAAlB,AACE,iCAAA,WAAAS,iBAAAC,tDAACZ;AAAD,AAAS,YAAAa,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,uHAAAD,kBAAA,xIAAQ,mEAAAD,gCAAAA,lGAACV,kCAAAA,oDAAAA;GAAUC;;AAE9B,gCAAA,hCAAMY,wEAAYb,EAAEC;AAApB,AACE,iCAAA,WAAAa,iBAAAC,tDAAChB;AAAD,AAAS,YAAAa,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAAE,wIAAA,vHAAW,mEAAAC,gCAAAA,lGAACf,kCAAAA,oDAAAA;GAAOC;;AAE9B,AAAA,oCAAA,4CAAAe,hFAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,uEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,yEAAA,zEAAME,oFAAgBQ,IAAIC,KAAKC,IAAMC;AAArC,AACE,IAAMC,WAAS,AAACC,+CAAOL,IAAIC;IACrBK,UAAQ,AAACC,8CAAML,IAAIE,SAASD;AADlC,AAEE,GAAI,YAAA,XAAMG;AACRN;;AACA,OAACQ,mBAASR,IAAIC,KAAKK;;;;AALzB,CAAA,4DAAA,5DAAMd;;AAAN;AAAA,CAAA,sDAAA,WAAAC,jEAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAI,WAAA,AAAAF,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAK,WAAA,AAAAH,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAM,qBAAA;AAAA,AAAA,OAAAA,wDAAAL,SAAAG,SAAAC,SAAAL;;;AAAA,AAOA;;;;;8BAAA,9BAAMgB,oEAIHvC,EAAEwC;AAJL,AAKE,OAACC,2DAAgB,WAAKX,IAAIY;AAAT,AAAY,OAACC,8CAAMb,IAAI,CAAC9B,kCAAAA,qCAAAA,LAAE0C,iBAAAA,IAAGA;GAA9C,mCAAqDF","names":["paprika.collection/map-kv","f","clj-map","cljs.core.map","p__66279","vec__66280","cljs.core.nth","k","v","cljs.core.into","paprika.collection/map-keys","p1__66284#","p2__66286#","cljs.core/PersistentVector","paprika.collection/map-values","p1__66290#","p2__66292#","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","paprika.collection/update-in-when","seq66295","G__66296","cljs.core/first","cljs.core/next","G__66297","G__66299","self__4816__auto__","map","path","fun","args","curr-val","cljs.core.get_in","new-val","cljs.core.apply","cljs.core/assoc-in","paprika.collection/index-by","collection","clojure.core.reducers.reduce","m","cljs.core.assoc"],"sourcesContent":["(ns paprika.collection\n  (:require [clojure.core.reducers :as reducers]))\n\n(defn map-kv [f clj-map]\n  (->> clj-map\n       (map (fn [[k v]] (f k v)))\n       (into {})))\n\n(defn map-keys [f clj-map]\n  (map-kv #(vector (f %1) %2) clj-map))\n\n(defn map-values [f clj-map]\n  (map-kv #(vector %1 (f %2)) clj-map))\n\n(defn update-in-when [map path fun & args]\n  (let [curr-val (get-in map path)\n        new-val (apply fun curr-val args)]\n    (if (nil? new-val)\n      map\n      (assoc-in map path new-val))))\n\n(defn index-by\n  \"Exactly the same as clojure.core/group-by, except it returns a single\n   element. If there are more than one element that matches the function,\n   the ending indexed element is undefined\"\n  [f collection]\n  (reducers/reduce (fn [map m] (assoc map (f m) m)) {} collection))\n"]}