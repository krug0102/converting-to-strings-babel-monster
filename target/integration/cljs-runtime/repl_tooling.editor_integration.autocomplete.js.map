{"version":3,"sources":["repl_tooling/editor_integration/autocomplete.cljs"],"mappings":"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","names":["repl-tooling.editor-integration.autocomplete/have-ns?","repl","namespace","repl_tooling.eval.eval","repl-tooling.repl-client.source/have-ns-command","promesa.core.then","promesa.core.catch$","cljs.core/constantly","repl-tooling.editor-integration.autocomplete/detect-clj-compliment","state","temp__5751__auto__","kind","cljs.core/deref","promesa.protocols/-bind","___31820__auto__","___31810__auto__","___31809__auto__","promesa.protocols/-promise","res","cljs.core.swap_BANG_","cljs.core/assoc-in","repl-tooling.editor-integration.autocomplete/detect-cljs-engine","suit","compliment","G__144465","cljs.core.conj","cljs.core._EQ_","repl-tooling.editor-integration.autocomplete/non-clj-var-regex","repl-tooling.editor-integration.autocomplete/get-prefix","code","row","col","clojure.string/split-lines","cljs.core.nth","cljs.core.take","cljs.core.apply","cljs.core/str","clojure.string.split","cljs.core/last","p__144477","map__144484","cljs.core/--destructure-map","cljs.core.get","repl-tooling.editor-integration.autocomplete/autocomplete-clj","contents","range","vec__144491","vec__144494","vec__144497","vec__144500","vec__144503","position","cljs.core/first","orig-row","orig-col","block-row","_","block-text","repl-tooling.editor-helpers/top-block-for","prefix","ns-name","repl-tooling.editor-helpers/ns-range-for","cljs.core/second","repl_tooling.features.autocomplete.compliment.for_clojure","repl-tooling.features.autocomplete.simple/for-clj","p__144517","map__144518","repl-tooling.editor-integration.autocomplete/autocomplete-cljs","clj-repl","cljs-repl","cmd","vec__144519","vec__144522","vec__144525","vec__144528","vec__144531","shadow-env","suits","repl-tooling.features.autocomplete.suitable/for-cljs","compls","repl-tooling.features.autocomplete.compliment/for-cljs","simples","G__144534","repl-tooling.features.autocomplete.simple/for-cljs","promesa.core/all","p1__144516#","cljs.core.comp","cljs.core/distinct","cljs.core/concat","repl-tooling.editor-integration.autocomplete/resolve-clj","editor-data","aux-repl","promesa.core.promise","repl-tooling.editor-integration.autocomplete/resolve-cljs","p__144552","map__144553","repl-tooling.editor-integration.autocomplete/command","get-config","repl-tooling.editor-integration.evaluation/need-cljs?"],"sourcesContent":["(ns repl-tooling.editor-integration.autocomplete\n  (:require [clojure.string :as str]\n            [promesa.core :as p]\n            [repl-tooling.editor-helpers :as helpers]\n            [repl-tooling.eval :as eval]\n            [repl-tooling.editor-integration.evaluation :as evaluation]\n            [repl-tooling.features.autocomplete.simple :as simple]\n            [repl-tooling.features.autocomplete.compliment :as compliment]\n            [repl-tooling.features.autocomplete.suitable :as suit]\n            [repl-tooling.repl-client.source :as source]))\n\n(defn- have-ns? [repl namespace]\n  (-> (eval/eval repl (source/have-ns-command namespace))\n      (p/then :result)\n      (p/catch (constantly false))))\n\n(defn- detect-clj-compliment [repl state]\n  (if-let [kind (-> @state :repl/info :clj/autocomplete-kind)]\n    kind\n    (p/let [res (have-ns? repl \"compliment.core\")\n            res (if res :compliment :simple)]\n      (swap! state assoc-in [:repl/info :clj/autocomplete-kind] res)\n      res)))\n\n(defn- detect-cljs-engine [repl state]\n  (if repl\n    (if-let [kind (-> @state :repl/info :cljs/autocomplete-kind)]\n      kind\n      (p/let [suit (have-ns? repl \"suitable.js-completions\")\n              compliment (have-ns? repl \"suitable.js-completions\")\n              res (cond-> #{}\n                          suit (conj :suitable)\n                          compliment (conj :compliment)\n                          (= false suit compliment) (conj :simple))]\n        (swap! state assoc-in [:repl/info :cljs/autocomplete-kind] res)\n        res))\n    :simple))\n\n(def ^:private non-clj-var-regex #\"[^a-zA-Z0-9\\-.$!?\\/><*=\\?_:]+\")\n(defn- get-prefix [code row col]\n  (-> code\n      str/split-lines\n      (nth row \"\")\n      (->> (take col)\n           (apply str))\n      (str/split non-clj-var-regex)\n      last\n      str))\n\n(defn- autocomplete-clj [repl kind {:keys [contents range]}]\n  (let [position (first range)\n        [orig-row orig-col] position\n        [[[block-row _]] block-text] (helpers/top-block-for contents position)\n        prefix (get-prefix contents orig-row orig-col)\n        ns-name (-> contents\n                    (helpers/ns-range-for position)\n                    second)\n        [row col] (if block-text\n                    [(- orig-row block-row) orig-col]\n                    [0 0])]\n    (if (= :compliment kind)\n      (compliment/for-clojure repl ns-name (str block-text) prefix row col)\n      (simple/for-clj repl ns-name prefix))))\n\n(defn- autocomplete-cljs [clj-repl cljs-repl kind cmd {:keys [contents range]}]\n  (let [position (first range)\n        [orig-row orig-col] position\n        [[[block-row _]] block-text] (helpers/top-block-for contents position)\n        prefix (get-prefix contents orig-row orig-col)\n        ns-name (-> contents\n                    (helpers/ns-range-for position)\n                    second)\n        [row col] (if block-text\n                    [(- orig-row block-row) orig-col]\n                    [0 0])\n        shadow-env (second cmd)\n        suits (when (:suitable kind)\n                (suit/for-cljs cljs-repl clj-repl shadow-env cmd ns-name (str block-text) prefix row col))\n        compls (when (:compliment kind)\n                 (compliment/for-cljs clj-repl cmd ns-name (str block-text) prefix row col))\n        simples (when (:simple kind)\n                  (some-> cljs-repl (simple/for-cljs ns-name prefix)))]\n    (-> (p/all [suits compls simples])\n        (p/then (comp distinct #(apply concat %))))))\n\n(defn- resolve-clj [state editor-data]\n  (if-let [aux-repl (:clj/aux @state)]\n    (p/let [kind (detect-clj-compliment aux-repl state)]\n      (autocomplete-clj (:clj/aux @state) kind editor-data))\n    (p/promise [])))\n\n(defn- resolve-cljs [state editor-data]\n  (p/let [kind (detect-cljs-engine (:clj/aux @state) state)]\n    (autocomplete-cljs (:clj/aux @state)\n                       (:cljs/repl @state)\n                       kind\n                       (-> @state :repl/info :cljs/repl-env)\n                       editor-data)))\n\n(defn command [state {:keys [get-config]} editor-data]\n  (if (evaluation/need-cljs? (get-config) (:filename editor-data))\n    (resolve-cljs state editor-data)\n    (resolve-clj  state editor-data)))\n"]}