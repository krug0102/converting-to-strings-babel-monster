{"version":3,"sources":["matcher_combinators/parser.cljc"],"mappings":"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","names":["goog.object/set","matcher-combinators.core/Matcher","matcher-combinators.core/-match","cljs.core/PROTOCOL_SENTINEL","this","actual","matcher-combinators.core/match","matcher-combinators.matchers/pred","matcher-combinators.matchers/equals","cljs.core/Keyword","cljs.core/Symbol","cljs.core/UUID","js/goog.Uri","matcher-combinators.matchers/cljs-uri","js/Date","cljs.core/Var","cljs.core/Cons","cljs.core/Repeat","cljs.core/native-satisfies?","cljs.core/IMap","matcher-combinators.matchers/embeds","or__4223__auto__","cljs.core/ISet","cljs.core/ISequential","js/RegExp","matcher-combinators.matchers/regex"],"sourcesContent":["(ns matcher-combinators.parser\n  (:require [matcher-combinators.core :as core]\n            [matcher-combinators.matchers :as matchers])\n  #?(:cljs (:import goog.Uri)\n     :clj  (:import (clojure.lang IPersistentMap)\n                    (java.util.regex Pattern))))\n\n#?(:cljs\n(extend-protocol\n  core/Matcher\n\n  ;; function as predicate\n  function\n  (-match [this actual]\n    (core/match (matchers/pred this) actual))\n\n  ;; equals base types\n  nil\n  (-match [this actual]\n    (core/match (matchers/equals this) actual))\n\n  number\n  (-match [this actual]\n    (core/match (matchers/equals this) actual))\n\n  string\n  (-match [this actual]\n    (core/match (matchers/equals this) actual))\n\n  boolean\n  (-match [this actual]\n    (core/match (matchers/equals this) actual))\n\n  Keyword\n  (-match [this actual]\n    (core/match (matchers/equals this) actual))\n\n  Symbol\n  (-match [this actual]\n    (core/match (matchers/equals this) actual))\n\n  UUID\n  (-match [this actual]\n    (core/match (matchers/equals this) actual))\n\n  goog.Uri\n  (-match [this actual]\n    (core/match (matchers/cljs-uri this) actual))\n\n  js/Date\n  (-match [this actual]\n    (core/match (matchers/equals this) actual))\n\n  Var\n  (-match [this actual]\n    (core/match (matchers/equals this) actual))\n\n  ;; equals nested types\n  Cons\n  (-match [this actual]\n    (core/match (matchers/equals this) actual))\n\n  Repeat\n  (-match [this actual]\n    (core/match (matchers/equals this) actual))\n\n  default\n  (-match [this actual]\n    (cond\n      (satisfies? IMap this)\n      (core/match (matchers/embeds this) actual)\n\n      (or (satisfies? ISet this)\n          (satisfies? ISequential this))\n      (core/match (matchers/equals this) actual)))\n\n  js/RegExp\n  (-match [this actual]\n    (core/match (matchers/regex this) actual))))\n\n#?(:clj (do\n(defmacro mimic-matcher [matcher t]\n  `(extend-type ~t\n     core/Matcher\n     (~'-matcher-for\n      ([this#] ~matcher)\n      ([this# t->m#] (matchers/lookup-matcher this# t->m#)))\n     (~'-match [this# actual#]\n      (core/match (~matcher this#) actual#))))\n\n;; default for most objects\n(mimic-matcher matchers/equals Object)\n\n;; nil is a special case\n(mimic-matcher matchers/equals nil)\n\n;; regex\n(mimic-matcher matchers/regex Pattern)\n\n;; collections\n(mimic-matcher matchers/embeds IPersistentMap)\n\n;; functions are special, too\n(extend-type clojure.lang.Fn\n  core/Matcher\n  (-matcher-for\n    ([this] (matchers/pred this))\n    ([this t->m] (matchers/pred this)))\n  (-match [this actual]\n    (core/match (matchers/pred this) actual)))))\n"]}