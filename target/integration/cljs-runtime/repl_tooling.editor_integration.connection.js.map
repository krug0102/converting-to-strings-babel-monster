{"version":3,"sources":["repl_tooling/editor_integration/connection.cljs"],"mappings":"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","names":["repl-tooling.editor-integration.connection/disconnect!","repl-tooling.integrations.repls/disconnect!","p__147075","map__147076","cljs.core/--destructure-map","cljs.core.get","p1__147071#","p1__147072#","p2__147073#","p1__147069#","p1__147068#","repl-tooling.editor-integration.connection/features-for","state","editor-data","opts","_repl-kind","promesa.protocols/-bind","___31820__auto__","___31810__auto__","promesa.protocols/-promise","data","repl-tooling.editor-integration.autocomplete/command","code","range","repl_tooling$editor_integration$connection$features_for_$_eval_and_render","pass","repl-tooling.commands-to-repl.all-cmds/eval-range","cljs.core.assoc","cljs.core/constantly","options","p__147083","map__147084","text","cljs.core.dissoc","vec__147088","vec__147091","cljs.core.nth","row","col","eval-opts","G__147095","repl-tooling.editor-integration.evaluation/eval-with-promise","repl-tooling.editor-integration.renderer/parse-result","repl-tooling.editor-integration.definition/goto-definition","repl-tooling.commands-to-repl.all-cmds/fqn-for-var","repl-tooling.editor-integration.evaluation/get-code","repl-tooling.editor-integration.evaluation/repl-for","repl-tooling.commands-to-repl.pathom/eql-from-state","repl-tooling.editor-integration.connection/file-exists?","file","js/Promise","resolve","js/shadow.js.shim.module$fs.exists","repl-tooling.editor-integration.connection/read-file","editor-state","run-callback","cljs.core/deref","existing-file","cljs.core/cons","p1__147101#","cljs.core.map","js/shadow.js.shim.module$path.join","p1__147102#","cljs.core.filter","js/shadow.js.shim.module$fs.existsSync","cljs.core/first","js/shadow.js.shim.module$fs.readFile","error","not-error","G__147109","repl-tooling.editor-integration.connection/default-opts","cljs.core/identity","_","repl-tooling.editor-integration.connection/swap-state!","kind","___31809__auto__","cmds","repl-tooling.commands-to-repl.all-cmds/all","feats","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core.partial","repl-tooling.editor-integration.commands/run-callback!","repl-tooling.editor-integration.commands/run-feature!","p1__147113#","cljs.core/update-in","or__4223__auto__","repl-tooling.editor-integration.configs/prepare-commands","repl-tooling.editor-integration.connection/connect-evaluator!","evaluators","cljs.core.atom","cljs.core.merge","repl-tooling.editor-integration.connection/tr-kind","kinds","G__147124","G__147125","cljs.core/name","clojure.string/capitalize","repl-tooling.editor-integration.connection/prepare-cljs","primary","host","port","cljs.core/merge","repl_tooling.eval.eval","repl-tooling.editor-integration.connection/prepare-joker","repl-tooling.editor-integration.connection/prepare-generic","aux","cljs.core._EQ_","repl-tooling.eval/evaluate","repl-tooling.repl-client.clojure/disable-limits!","repl-tooling.editor-integration.connection/connection-error!","notify","G__147138","G__147140","js/console","repl-tooling.editor-integration.connection/callback-fn","output","map__147143","on-stdout","on-stderr","on-result","on-disconnect","on-patch","and__4221__auto__","repl-tooling.commands-to-repl.all-cmds/handle-disconnect!","temp__5753__auto__","out","cljs.core/contains?","G__147150","repl-tooling.editor-helpers/parse-result","patch","G__147151","cljs.core.update","repl-tooling.editor-integration.connection/find-patch","id","maybe-coll","elem","reagent.ratom/RAtom","repl-tooling.editor-integration.renderer/Patchable","cljs.core/coll?","p1__147152#","cljs.core/flatten","p__147153","map__147154","repl-tooling.editor-integration.connection/prepare-patch","get-rendered-results","callbacks","p__147155","map__147156","result","seq__147157","cljs.core/seq","chunk__147158","count__147159","i__147160","cljs.core/chunked-seq?","c__4649__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","patchable","repl-tooling.editor-integration.connection/callback-aux","original-callback","msg","repl-tooling.editor-helpers/*out-on-aux*","ufv__","schema.utils/use-fn-validation","output-schema147303","schema.core/Any","input-schema147304","schema.core/one","input-checker147305","cljs.core/Delay","schema.core/checker","output-checker147306","ret__40409__auto__","validate__38124__auto__","args__38125__auto__","G__147307","G__147308","G__147309","schema.core/fn-validator","G__147361","G__147364","G__147365","G__147366","G__147368","fexpr__147379","error__38126__auto__","cljs.core.ex_info","schema.utils.format_STAR_","cljs.core.pr_str","o__38127__auto__","G__147407","map__147408","map__147418","G__147582","G__147583","G__147584","G__147585","G__147586","fexpr__147596","schema.utils/declare-class-schema!","schema.utils/fn-schema-bearer","schema.core/->FnSchema","repl-tooling.editor-integration.connection/connect!","schema.core/Str","schema.core/Int","p1__147302#","promesa.core.catch$","p__147470","vec__147472","callback","repl-tooling.integrations.repls/connect-repl!","G__147489","cljs.core/Keyword","p__147513","vec__147517","nrepl?","repl-tooling.repl-client.nrepl/Evaluator","G__147558","repl-tooling.editor-integration.connection/connect-callbacks!","state-ish","callback-cmds","repl-tooling.editor-integration.commands/->Callbacks","p1__147636#","G__147676","fexpr__147675","repl-tooling.commands-to-repl.all-cmds/static-commands"],"sourcesContent":["(ns repl-tooling.editor-integration.connection\n  (:require [reagent.core :as r]\n            [promesa.core :as p]\n            [clojure.string :as str]\n            [repl-tooling.editor-helpers :as helpers]\n            [repl-tooling.eval :as eval]\n            [repl-tooling.repl-client.clojure :as clj-repl]\n            [repl-tooling.editor-integration.evaluation :as e-eval]\n            [repl-tooling.editor-integration.autocomplete :as autocomplete]\n            [repl-tooling.integrations.repls :as repls]\n            [repl-tooling.editor-integration.renderer :as renderer]\n            [repl-tooling.editor-integration.schemas :as schemas]\n            [repl-tooling.repl-client.nrepl :as nrepl]\n            [repl-tooling.commands-to-repl.all-cmds :as cmds]\n            [repl-tooling.commands-to-repl.pathom :as pathom]\n            [repl-tooling.editor-integration.commands :as commands]\n            [schema.core :as s]\n            [repl-tooling.editor-integration.definition :as definition]\n            [repl-tooling.editor-integration.configs :as configs]\n            [\"fs\" :refer [exists readFile existsSync]]\n            [\"path\" :refer [join]]))\n\n; FIXME: This only here because of tests\n(defn disconnect!\n  \"Disconnect all REPLs. Indempotent.\"\n  []\n  (repls/disconnect! :clj-eval)\n  (repls/disconnect! :clj-aux)\n  (repls/disconnect! :cljs-aux)\n  (repls/disconnect! :cljs-eval))\n\n(defn- features-for [state {:keys [editor-data] :as opts} _repl-kind]\n  {:autocomplete #(p/let [data (editor-data)]\n                    (autocomplete/command state opts data))\n   ; TODO: Deprecate this\n   :eval-and-render (fn eval-and-render\n                      ([code range] (eval-and-render code range nil))\n                      ([code range pass]\n                       (p/let [data (editor-data)]\n                         (cmds/eval-range state\n                                          data\n                                          (assoc opts :pass pass)\n                                          (constantly [range code])))))\n   :evaluate-and-render (fn [options]\n                          (p/let [data (editor-data)\n                                  {:keys [text range]} options]\n                            (cmds/eval-range state\n                                             data\n                                             (dissoc options :text :range)\n                                             (constantly [range text]))))\n   :eval (fn [options]\n           (let [code (:text options)\n                 [[row col]] (:range options)\n                 eval-opts (cond-> (dissoc options :text)\n                                   row (assoc :row row)\n                                   col (assoc :col col))]\n             (e-eval/eval-with-promise state code eval-opts)))\n   :result-for-renderer #(renderer/parse-result (:result %) (:repl %) state)\n   :go-to-var-definition #(definition/goto-definition state %)\n   :get-full-var-name #(cmds/fqn-for-var state)\n   :get-code #(e-eval/get-code state %)\n   :repl-for #(e-eval/repl-for state %1 %2)\n   :eql (pathom/eql-from-state state)})\n\n(defn- file-exists? [file]\n  (js/Promise. (fn [resolve] (exists file resolve))))\n\n(defn- read-file [editor-state file]\n  (let [run-callback (:run-callback @editor-state)\n        existing-file (->> (run-callback :get-config)\n                           :project-paths\n                           (cons \".\")\n                           (map #(join % file))\n                           (filter #(existsSync %))\n                           first)]\n    (js/Promise. (fn [resolve]\n                   (if existing-file\n                     (readFile existing-file (fn [error not-error]\n                                               (if error\n                                                 (resolve nil)\n                                                 (resolve (str not-error)))))\n                     (resolve nil))))))\n\n(def ^:private default-opts\n  {:on-start-eval identity\n   :file-exists file-exists?\n   :config-file-path nil\n   :register-commands identity\n   :open-editor identity\n   :get-rendered-results (constantly [])\n   :on-copy identity\n   :on-eval identity\n   :on-result identity\n   :on-stdout identity\n   :on-stderr identity\n   :editor-data identity\n   :notify identity\n   :get-config (constantly {:project-paths [], :eval-mode :prefer-clj})\n   :prompt (fn [ & _] (js/Promise. (fn [])))})\n\n(defn- swap-state! [state options kind]\n  (p/let [cmds (cmds/all state options kind)\n          feats (features-for state options kind)]\n    (swap! state assoc\n           :editor/features feats\n           :run-callback (partial commands/run-callback! state)\n           :run-feature (partial commands/run-feature! state))\n    (swap! state update-in [:editor/callbacks :read-file]\n           #(or % (partial read-file state)))\n    (configs/prepare-commands state cmds)))\n\n(defn connect-evaluator!\n  \"\"\n  [evaluators opts]\n  (js/Promise.\n   (fn [resolve]\n     (let [state (atom evaluators)\n           options (merge default-opts opts)]\n\n       ; TODO: Check this last parameter\n       (swap-state! state options :clj)\n       (resolve state)))))\n\n(defn- tr-kind [kind]\n  (let [kinds {:clj \"Clojure\"\n               :cljs \"ClojureScript\"\n               :cljr \"ClojureCLR\"\n               :clje \"Clojerl\"\n               :bb \"Babaska\"}]\n    (kinds kind (-> kind name str/capitalize))))\n\n(defn- prepare-cljs [primary host port state options]\n  (swap! state merge {:cljs/repl primary\n                      :repl/info {:host host :port port :kind :cljs :kind-name (tr-kind :cljs)}})\n  (eval/eval primary \"(set! lumo.repl/*pprint-results* false)\" {:ignore true})\n  (swap-state! state options :cljs))\n\n(defn- prepare-joker [primary host port state options]\n  (swap! state merge {:clj/repl primary\n                      :clj/aux primary\n                      :repl/info {:host host :port port\n                                  :kind :joker :kind-name (tr-kind :joker)}})\n  (swap-state! state options :joker))\n\n(defn- prepare-generic [primary aux host port state options kind]\n  (when (= :clj kind)\n    ; (clj-repl/disable-limits! primary)\n    (eval/evaluate aux \":aux-connected\" {:ignore true} #(clj-repl/disable-limits! aux)))\n\n  (swap! state merge {:clj/aux aux\n                      :clj/repl primary\n                      :repl/info {:host host :port port :kind kind :kind-name (tr-kind kind)}})\n  (swap-state! state options kind))\n\n(defn- connection-error! [error notify]\n  (disconnect!)\n  (if (= \"ECONNREFUSED\" error)\n    (notify {:type :error\n             :title \"REPL not connected\"\n             :message (str \"Connection refused. Ensure that you have a \"\n                           \"Socket REPL started on this host/port\")})\n    (do\n      (notify {:type :error\n               :title \"REPL not connected\"\n               :message (str \"Unknown error while connecting to the REPL: \"\n                             error)})\n      (.error js/console error)))\n  nil)\n\n(defn- callback-fn [state output]\n  (let [{:keys [on-stdout on-stderr on-result on-disconnect on-patch]}\n        (:editor/callbacks @state)]\n    (when (and (nil? output) on-disconnect)\n      (cmds/handle-disconnect! state)\n      (on-disconnect))\n    (when-let [out (:out output)] (and on-stdout (on-stdout out)))\n    (when-let [out (:err output)] (and on-stderr (on-stderr out)))\n    (when (and on-result (or (contains? output :result)\n                             (contains? output :error)))\n      (on-result (helpers/parse-result output)))\n    (when-let [patch (:patch output)]\n      (on-patch (update patch :result helpers/parse-result)))))\n\n(defn- find-patch [id maybe-coll]\n  (let [elem (if (instance? reagent.ratom/RAtom maybe-coll)\n               (dissoc @maybe-coll :editor-state :repl)\n               maybe-coll)]\n    (if (and (instance? renderer/Patchable elem)\n             (= id (:id elem)))\n      maybe-coll\n      (when (coll? elem)\n        (->> elem\n             (map #(find-patch id %))\n             flatten\n             (filter identity))))))\n\n(defn- prepare-patch [{:keys [on-patch get-rendered-results] :as callbacks}]\n  (if on-patch\n    callbacks\n    (assoc callbacks\n           :on-patch (fn [{:keys [id result]}]\n                       (doseq [patchable (find-patch id (get-rendered-results))]\n                         (swap! patchable assoc :value\n                                (renderer/parse-result result\n                                                       (:repl @patchable)\n                                                       (:editor-state @patchable))))))))\n\n(defn- callback-aux [original-callback]\n  (fn [msg]\n    (if (or (:out msg) (:err msg))\n      (when helpers/*out-on-aux* (original-callback msg))\n      (original-callback msg))))\n\n; Config Options:\n; {:project-paths [...]\n;  :eval-mode (enum :clj :cljs :prefer-clj :prefer-cljs)}\n(s/defn connect!\n  \"Connects to a clojure-like REPL that supports the socket REPL protocol.\nExpects host, port, and some callbacks:\n* on-start-eval -> a function that'll be called when an evaluation starts\n* on-eval -> a function that'll be called when an evaluation ends\n* editor-data -> a function that'll be called when a command needs editor's data.\n  Editor's data is a map (or a promise that resolves to a map) with the arguments:\n    :contents - the editor's contents.\n    :filename - the current file's name. Can be nil if file was not saved yet.\n    :range - a vector containing [[start-row start-col] [end-row end-col]], representing\n      the current selection\n* open-editor -> asks the editor to open an editor. Expects a map with `:filename`,\n  `:line` and maybe `:contents`. If there's `:contents` key, it defines a \\\"virtual\n  file\\\" so it's better to open up an read-only editor\n* notify -> when something needs to be notified, this function will be called with a map\n  containing :type (one of :info, :warning, or :error), :title and :message\n* get-config -> when some function needs the configuration from the editor, this fn\n  is called without arguments. Need to return a map with the config options.\n* get-rendered-results -> gets all results that are rendered on the editor. This is\n  used so that the REPL can 'patch' these results when new data appears (think\n  of resolving promises in JS)\n* on-patch -> patches the result. Optional, if you send a :get-rendered-results\n  callback, one will be generated for you\n* prompt -> when some function needs an answer from the editor, it'll call this\n  callback passing :title, :message, and :arguments (a vector that is composed by\n  :key and :value). The callback needs to return a `Promise` with one of the\n  :key from the :arguments, or nil if nothing was selected.\n* on-copy -> a function that receives a string and copies its contents to clipboard\n* on-stdout -> a function that receives a string when some code prints to stdout\n* on-stderr -> a function that receives a string when some code prints to stderr\n* on-result -> returns a clojure EDN with the result of code\n* on-disconnect -> called with no arguments, will disconnect REPLs. Can be called more\nthan once\n\nReturns a promise that will resolve to a map with two repls: :clj/aux will be used\nto autocomplete/etc, :clj/repl will be used to evaluate code.\"\n  [host :- s/Str\n   port :- s/Int\n   {:keys [notify] :as opts} :- s/Any]\n  (p/catch\n   (p/let [options (-> default-opts (merge opts) prepare-patch)\n           state (atom {:editor/callbacks options})\n           callback (partial callback-fn state)\n           [kind primary] (repls/connect-repl! :clj-eval host port callback)\n           _ (eval/eval primary \"1234\")\n           _ (case kind\n               :cljs (prepare-cljs primary host port state options)\n               :joker (prepare-joker primary host port state options)\n               (p/let [[_ aux] (repls/connect-repl! :clj-aux host port (callback-aux callback))]\n                 (prepare-generic primary aux host port state options kind)))\n           nrepl? (instance? nrepl/Evaluator primary)]\n     (do\n       (notify {:type :info :title (str (tr-kind kind)\n                                        (if nrepl? \" nREPL\" \" socket REPL\")\n                                        \" Connected\")})\n       state))\n   #(connection-error! % notify)))\n\n(defn connect-callbacks!\n  \"Connects callbacks only, for commands that can work without a REPL.\"\n  [callbacks]\n  (let [options (merge default-opts callbacks)\n        state-ish (atom  {:editor/callbacks options})\n        callback-cmds (commands/->Callbacks state-ish)]\n    (swap! state-ish assoc\n           :editor/features {:result-for-renderer\n                             #(renderer/parse-result (:result %)\n                                                     (:repl %)\n                                                     state-ish)\n                             ;; FIXME: Re-add pathom without REPL\n                             :eql (constantly nil)} ;(partial pathom/eql {:callbacks options})}\n           :run-callback (partial commands/run-callback! callback-cmds)\n           :run-feature (partial commands/run-feature! callback-cmds))\n    ((:register-commands options) (cmds/static-commands state-ish))\n    state-ish))\n"]}