{"version":3,"sources":["repl_tooling/integration/fake_editor.cljs"],"mappings":"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","names":["repl-tooling.integration.fake-editor/wait-for","f","c__35941__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__35942__auto__","switch__34939__auto__","state_72453","state_val_72454","inst_72434","statearr-72459","inst_72429","statearr-72462","statearr-72463","statearr-72466","statearr-72468","statearr-72469","inst_72448","statearr-72470","inst_72450","cljs.core.async.impl.ioc-helpers/return-chan","inst_72431","statearr-72474","statearr-72475","inst_72445","statearr-72478","statearr-72479","inst_72440","inst_72441","statearr-72481","statearr-72482","inst_72438","cljs.core.async.impl.ioc-helpers/take!","statearr-72484","state-machine__34940__auto__","ret-value__34941__auto__","result__34942__auto__","cljs.core/keyword-identical?","ex__34943__auto__","e72486","statearr-72487","cljs.core/seq","statearr-72488","cljs.core/first","state__35943__auto__","statearr-72491","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/timeout","repl-tooling.integration.fake-editor/wait-for-p","run72501","promesa.core/*loop-run-fn*","deferred72500","promesa.core/deferred","loop72499","params__31844__auto__","promesa.core.handle","promesa.core.then","promesa.core/all","p__72503","vec__72505","cljs.core.nth","promesa.protocols/-bind","___31810__auto__","promesa.protocols/-promise","res__31845__auto__","err__31846__auto__","promesa.core/reject!","cljs.core/map?","cljs.core._EQ_","G__72521","promesa.core.resolve_BANG_","G__72526","t","temp__5751__auto__","res","___31809__auto__","promesa.core.delay","cljs.core/PersistentArrayMap","js/repl-tooling","js/repl-tooling.integration","js/repl-tooling.integration.fake-editor","js/repl-tooling.integration.fake-editor.state","repl-tooling.integration.fake-editor/state","reagent.core.atom","repl-tooling.integration.fake-editor/reset-state!","cljs.core.swap_BANG_","cljs.core/merge","repl-tooling.integration.fake-editor/res","result","___31820__auto__","parse","cljs.core/deref","cljs.core/reset!","repl-tooling.integration.fake-editor/run-command!","command","cmd","cljs.core.get_in","cljs.core.prn","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","repl-tooling.integration.fake-editor/run-feature!","seq72537","G__72538","cljs.core/next","self__4816__auto__","feature","args","cljs.core.apply","repl-tooling.editor-integration.commands/run-feature!","repl-tooling.integration.fake-editor/evaluate","lines","clojure.string/split-lines","cljs.core/assoc","cljs.core/count","cljs.core/last","repl-tooling.integration.fake-editor/type","txt","repl-tooling.integration.fake-editor/type-and-eval","repl-tooling.integration.fake-editor/change-stdout","old","and__4221__auto__","cljs.core.not_EQ_","repl-tooling.integration.fake-editor/txt-for-selector","sel","G__72593","js/document","repl-tooling.integration.fake-editor/change-result","repl-tooling.integration.fake-editor/change-result-p","repl-tooling.integration.fake-editor/change-stdout-p","repl-tooling.integration.fake-editor/change-stderr-p","repl-tooling.integration.fake-editor/handle-disconnect","G__72685","repl-tooling.integration.fake-editor/connect!","js/Error","repl_tooling.integration.fake_editor.connect_BANG_","additional-callbacks","js/Promise","repl-tooling.editor-integration.connection/connect!","p1__72679#","p1__72681#","cljs.core.merge","cljs.core/update","e","cljs.core/identity","cljs.core/constantly","js/process","code","repl-tooling.integration.fake-editor/disconnect!","repl-tooling.commands-to-repl.all-cmds/disconnect!","p1__72699#","p1__72700#","p1__72701#","p1__72702#","repl-tooling.integration.fake-editor/editor","state","iter__4622__auto__","s__72766","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4620__auto__","size__4621__auto__","b__72768","cljs.core/chunk-buffer","i__72767","vec__72779","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__72765","cljs.core/chunk-rest","vec__72786","cljs.core/cons","cljs.core/rest","cljs.core.pr_str","repl-tooling.editor-integration.renderer/view-for-result","out","repl-tooling.integration.fake-editor/click-link","link-text","find-link","p1__72799#","cljs.core.filter","cljs.core/re-find","cljs.core/re-pattern","link","repl-tooling.integration.fake-editor/clear-results!","cljs.core/chunk-first"],"sourcesContent":["(ns repl-tooling.integration.fake-editor\n  (:require-macros [repl-tooling.integration.fake-editor])\n  (:refer-clojure :exclude [type])\n  (:require [clojure.string :as str]\n            [promesa.core :as p]\n            [reagent.core :as r]\n            [clojure.core.async :as async]\n            [repl-tooling.editor-integration.commands :as cmds]\n            [repl-tooling.editor-integration.renderer :as render]\n            [repl-tooling.editor-integration.connection :as conn]\n            [repl-tooling.commands-to-repl.all-cmds :as all-cmds]))\n\n(defn wait-for [f]\n  (async/go\n   (loop [t 0]\n     (when (< t 100)\n       (if-let [res (f)]\n         res\n         (do\n           (async/<! (async/timeout 100))\n           (recur (inc t))))))))\n\n(defn wait-for-p [f]\n  (p/loop [t 0]\n    (when (< t 100)\n      (if-let [res (f)]\n        res\n        (p/do!\n         (p/delay 100)\n         (p/recur (inc t)))))))\n\n(defonce state (r/atom {:host \"localhost\"\n                        :filename \"foo.clj\"\n                        :port 2233\n                        :code \"(do (defrecord Foo [a b]) (->Foo (range 20) 20))\"\n                        :repls {:eval nil\n                                :aux nil}\n                        :commands {}\n                        :stdout nil\n                        :stderr nil\n                        :range [[0 0] [0 0]]\n                        :eval-result (r/atom nil)}))\n\n(defn- reset-state! []\n  (swap! state merge {:code \"\"\n                      :filename \"file.clj\"\n                      :stdout nil\n                      :stderr nil\n                      :range [[0 0] [0 0]]\n                      :eval-result (r/atom nil)}))\n\n(defn- res [result]\n  (p/let [parse (-> @state :features :result-for-renderer)\n          res (parse result)]\n    (reset! (:eval-result @state) res)))\n\n(defn run-command! [command]\n  ;;(println (get-in @state [:commands]))\n  (if-let [cmd (get-in @state [:commands command :command])]\n    (cmd)\n    (prn \"Command not found\" command)))\n\n(defn run-feature! [feature & args]\n  (apply cmds/run-feature! (:editor-state @state) feature args))\n\n(defn evaluate []\n  (let [lines (-> @state :code str/split-lines)]\n    (swap! state assoc :range [[0 0] [(-> lines count dec) (-> lines last count dec)]])\n    (run-command! :evaluate-selection)))\n\n(defn type [txt] (swap! state assoc :code txt))\n(defn type-and-eval [txt]\n  (type txt)\n  (evaluate))\n\n(defn change-stdout []\n  (let [old (:stdout @state)]\n    (wait-for #(and (not= old (:stdout @state))\n                    (:stdout @state)))))\n\n(defn txt-for-selector [sel]\n  (str (some-> js/document\n               (.querySelector sel)\n               .-innerText\n               .trim)))\n\n(defn change-result []\n  (let [old (txt-for-selector \"#result\")]\n    (wait-for #(and (not= old (txt-for-selector \"#result\"))\n                    (txt-for-selector \"#result\")))))\n\n(defn change-result-p []\n  (let [old (txt-for-selector \"#result\")]\n    (wait-for-p #(and (not= old (txt-for-selector \"#result\"))\n                      (txt-for-selector \"#result\")))))\n\n(defn change-stdout-p []\n  (let [old (txt-for-selector \"#stdout\")]\n    (wait-for-p #(and (not= old (txt-for-selector \"#stdout\"))\n                      (txt-for-selector \"#stdout\")))))\n\n(defn change-stderr-p []\n  (let [old (txt-for-selector \"#stderr\")]\n    (wait-for-p #(and (not= old (txt-for-selector \"#stderr\"))\n                      (txt-for-selector \"#stderr\")))))\n\n(defn handle-disconnect []\n  (reset! (:eval-result @state) nil)\n  (swap! state assoc\n         :repls {:eval nil :aux nil}\n         :stdout nil :stderr nil\n         :commands {}))\n\n(defn connect!\n  ([] (connect! {}))\n  ([additional-callbacks]\n   (reset-state!)\n   (if (-> @state :repls :eval)\n     (.resolve js/Promise @state)\n     (.\n       (conn/connect! (:host @state) (:port @state)\n                      (merge {:on-disconnect handle-disconnect\n                              :on-stdout #(swap! state update :stdout (fn [e] (str e %)))\n                              :on-eval res\n                              :notify identity\n                              :prompt (constantly (. js/Promise resolve \"fixture\"))\n                              :get-config (constantly {:eval-mode :prefer-clj\n                                                       :project-paths [(. js/process cwd)]})\n                              :on-stderr #(swap! state update :stderr (fn [e] (str e %)))\n                              :editor-data #(let [code (:code @state)]\n                                              {:contents code\n                                               :filename (:filename @state)\n                                               :range (:range @state)})}\n                             additional-callbacks))\n       (then (fn [res]\n               (swap! state assoc\n                      :editor-state res\n                      :repls {:eval (:clj/repl @res)\n                              :aux (:clj/aux @res)}\n                      :commands (:editor/commands @res)\n                      :features (:editor/features @res)\n                      :stdout \"\" :stderr \"\")))))))\n\n(defn disconnect! [] (all-cmds/disconnect!))\n\n(defn editor [state]\n  [:div\n   [:h4 \"Socket REPL connections\"]\n   [:p [:b \"Hostname: \"] [:input {:type \"text\" :value (:host @state)\n                                  :on-change #(->> % .-target .-value (swap! state assoc :host))}]\n    [:b \" Port: \"] [:input {:type \"text\" :value (:port @state)\n                            :on-change #(->> % .-target .-value int (swap! state assoc :port))}]\n    [:b \" Filename: \"] [:input {:type \"text\" :value (:filename @state)\n                                :on-change #(->> % .-target .-value (swap! state assoc :filename))}]]\n   [:textarea {:style {:width \"100%\" :height \"100px\"}\n               :value (:code @state)\n               :on-change #(->> % .-target .-value (swap! state assoc :code))}]\n   [:div\n    (when (-> @state :repls :eval)\n      (for [[command] (:commands @state)]\n        [:button {:key command\n                  :on-click #(run-command! command)}\n         (pr-str command)]))]\n   [:div\n    (if (-> @state :repls :eval)\n      [:span\n       [:button {:on-click evaluate}\n        \"Evaluate\"] \" \"\n       [:button {:on-click disconnect!} \"Disconnect!\"]]\n      [:button {:on-click #(connect!)} \"Connect!\"])\n    [:p (if (-> @state :repls :eval) \"Connected\" \"Disconnected\")]]\n   [:div\n    [:div\n     [:h5 \"RESULT\"]\n     [:pre\n      [:div {:id \"result\" :class \"result repl-tooling\"}\n       (when-let [res @(:eval-result @state)]\n         (render/view-for-result res))]]]]\n   [:div\n    [:h5 \"STDOUT\"\n     (when-let [out (:stdout @state)]\n       [:pre#stdout out])]]\n   [:div\n    [:h5 \"STDERR\"]]\n   (when-let [out (:stderr @state)]\n     [:pre#stderr out])])\n\n(defn click-link [link-text]\n  (p/let [find-link\n          (fn []\n            (->> \"div.result a\"\n                 (.querySelectorAll js/document)\n                 (filter #(->> % .-innerText (re-find (re-pattern link-text))))\n                 first))\n\n          link (wait-for-p find-link)]\n    (.click link)))\n\n(defn clear-results! []\n  (reset! (:eval-result @state) nil)\n  (swap! state assoc :stderr \"\" :stdout \"\"))\n"]}