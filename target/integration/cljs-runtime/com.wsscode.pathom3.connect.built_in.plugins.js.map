{"version":3,"sources":["com/wsscode/pathom3/connect/built_in/plugins.cljc"],"mappings":"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","names":["com.wsscode.pathom3.connect.built-in.plugins/process-entity-errors","entity","com.wsscode.pathom3.error/scan-for-errors?","ast","cljs.core/meta","errors","cljs.core.into","cljs.core.keep","k","temp__5751__auto__","error","com.wsscode.pathom3.error/attribute-error","com.wsscode.misc.coll/make-map-entry","cljs.core/keys","G__84025","cljs.core/seq","cljs.core.assoc","com.wsscode.pathom3.connect.built-in.plugins/attribute-errors-plugin","process","env","G__84027","G__84028","cljs.core.update","com.wsscode.misc.coll/sconj","run-graph!","ast-or-graph","entity-tree*","r__82170__auto__","promesa.core/promise?","promesa.core.then","clojure.walk/postwalk","x","cljs.core/map?","cljs.core.merge","com.wsscode.pathom3.connect.built-in.plugins/remove-stats-plugin","response","cljs.core.vary_meta","cljs.core/dissoc","com.wsscode.pathom3.connect.built-in.plugins/mutation-resolve-params","mutate","p__84029","map__84030","cljs.core/--destructure-map","cljs.core.get","key","map__84031","params","com.wsscode.pathom3.connect.indexes/mutation-config","params'","com.wsscode.pathom3.interface$.async.eql.process","com.wsscode.pathom3.interface$.eql.process","G__84032","G__84033","G__84035","G__84036"],"sourcesContent":["(ns com.wsscode.pathom3.connect.built-in.plugins\n  (:require\n    [clojure.walk :as walk]\n    [com.wsscode.misc.coll :as coll]\n    [com.wsscode.pathom3.connect.indexes :as pci]\n    [com.wsscode.pathom3.connect.operation :as pco]\n    [com.wsscode.pathom3.connect.runner :as pcr]\n    [com.wsscode.pathom3.connect.runner.async :as pcra]\n    [com.wsscode.pathom3.error :as p.error]\n    [com.wsscode.pathom3.interface.async.eql :as p.a.eql]\n    [com.wsscode.pathom3.interface.eql :as p.eql]\n    [com.wsscode.pathom3.plugin :as p.plugin]\n    [com.wsscode.promesa.macros :refer [clet]]))\n\n(defn process-entity-errors [entity]\n  (if (p.error/scan-for-errors? entity)\n    (let [ast    (-> entity meta\n                     :com.wsscode.pathom3.connect.runner/run-stats\n                     :com.wsscode.pathom3.connect.planner/index-ast)\n          errors (into {}\n                       (keep (fn [k]\n                               (if-let [error (p.error/attribute-error entity k)]\n                                 (coll/make-map-entry k error))))\n                       (keys ast))]\n      (cond-> entity\n        (seq errors)\n        (assoc ::pcr/attribute-errors errors)))\n    entity))\n\n(defn attribute-errors-plugin\n  \"This plugin makes attributes errors visible in the data.\"\n  []\n  {::p.plugin/id\n   `attribute-errors-plugin\n\n   :com.wsscode.pathom3.interface.eql/wrap-process-ast\n   (fn attribute-errors-plugin-wrap-process-ast-external [process]\n     (fn attribute-errors-plugin-wrap-process-ast-internal [env ast]\n       (process\n         (update env :com.wsscode.pathom3.format.eql/map-select-include\n           coll/sconj ::pcr/attribute-errors)\n         ast)))\n\n   ::pcr/wrap-root-run-graph!\n   (fn attribute-errors-plugin-wrap-run-graph-external [run-graph!]\n     (fn attribute-errors-plugin-wrap-run-graph-internal [env ast-or-graph entity-tree*]\n       (clet [entity (run-graph! env ast-or-graph entity-tree*)]\n         (walk/postwalk\n           (fn [x]\n             (if (map? x)\n               (process-entity-errors x)\n               x))\n           entity))))})\n\n(p.plugin/defplugin remove-stats-plugin\n  \"Remove the run stats from the result meta. Use this in production to avoid sending\n  the stats. This is important for performance and security.\"\n  {::pcr/wrap-run-graph!\n   (fn remove-stats-plugin-wrap-run-graph-external [run-graph!]\n     (fn remove-stats-plugin-wrap-run-graph-internal [env ast-or-graph entity-tree*]\n       (clet [response (run-graph! env ast-or-graph entity-tree*)]\n         (vary-meta response dissoc :com.wsscode.pathom3.connect.runner/run-stats))))})\n\n(p.plugin/defplugin mutation-resolve-params\n  \"Remove the run stats from the result meta. Use this in production to avoid sending\n  the stats. This is important for performance and security.\n\n  TODO: error story is not complete, still up to decide what to do when params can't\n  get fulfilled.\"\n  {::pcr/wrap-mutate\n   (fn mutation-resolve-params-external [mutate]\n     (fn mutation-resolve-params-internal [env {:keys [key] :as ast}]\n       (let [{::pco/keys [params]} (pci/mutation-config env key)]\n         (clet [params' (if params\n                          (if (::pcra/async-runner? env)\n                            (p.a.eql/process env (:params ast) params)\n                            (p.eql/process env (:params ast) params))\n                          (:params ast))]\n           (mutate env (assoc ast :params params'))))))})\n"]}