{"version":3,"sources":["duck_repled/repl_resolvers.cljc"],"mappings":"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","names":["com.wsscode.pathom3.connect.operation.resolver","_","p__89058","map__89059","cljs.core/--destructure-map","cljs.core.get","original89054","resolver89055","outputs89056","op89057","cljs.core.assoc","a__89033__auto__","b__89034__auto__","promesa.protocols/-bind","___56277__auto__","result__89035__auto__","___56267__auto__","promesa.protocols/-promise","duck_repled.schemas.validate_BANG_","cljs.core/keys","duck-repled.repl-resolvers/get-right-repl","kind","evaluators","map__89060","clj","cljs","cljs.core.not_EQ_","p__89067","map__89068","original89063","resolver89064","outputs89065","op89066","duck-repled.repl-resolvers/repl-eval","env","evaluator","namespace","contents","range","filename","com.wsscode.pathom3.connect.operation/?","params","com.wsscode.pathom3.connect.operation/params","opts","G__89069","cljs.core.dissoc","p1__89061#","cljs.core.update","or__4223__auto__","cljs.core/first","p1__89062#","cljs.core/second","code","temp__5751__auto__","t","duck-repled.template/template","cljs.core.symbol","result","duck_repled.repl_protocol.eval","duck-repled.repl-resolvers/extract-right-var","current-var","vec__89085","cljs.core.nth","var","duck-repled.editor-helpers/current-var","and__4221__auto__","cljs.core._EQ_","p__89101","map__89102","original89096","resolver89097","outputs89098","op89099","duck-repled.repl-resolvers/fqn-var","temp__5753__auto__","p__89109","map__89110","duck-repled.repl-resolvers/eval-for-meta","var-name","p__89129","map__89130","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","p__89144","map__89145","original89132","resolver89133","outputs89134","op89135","duck-repled.repl-resolvers/meta-for-var","repl-kind","meta","p1__89131#","clojure.walk/postwalk","G__89154","cljs.core/tagged-literal?","p__89171","map__89172","original89165","resolver89166","outputs89167","op89168","duck-repled.repl-resolvers/meta-for-clj-var","fqn","p__89187","map__89190","duck-repled.repl-resolvers/spec-for-var","res","p__89195","map__89200","cljs.core/vec","cljs.core.apply","cljs.core/array-map","p__89201","map__89202","duck-repled.repl-resolvers/doc-for-var","spec","cljs.core/map?","G__89208","cljs.core.pr_str","duck-repled.repl-resolvers/resolvers"],"sourcesContent":["(ns duck-repled.repl-resolvers\n  (:require [clojure.string :as str]\n            [duck-repled.connect :as connect]\n            [com.wsscode.pathom3.connect.operation :as pco]\n            [duck-repled.repl-protocol :as repl]\n            [duck-repled.template :refer [template]]\n            [duck-repled.editor-helpers :as helpers]\n            [clojure.walk :as walk]\n            [promesa.core :as p]))\n\n(connect/defresolver get-right-repl [{:repl/keys [kind evaluators]}]\n  {::pco/output [:repl/evaluator :repl/cljs]}\n\n  (let [{:keys [clj cljs]} evaluators]\n    (cond\n      (not= kind :cljs) {:repl/evaluator clj :repl/clj clj}\n      (nil? clj) {:repl/evaluator cljs}\n      :else {:repl/clj clj :repl/evaluator cljs})))\n\n(connect/defresolver repl-eval [env {:repl/keys [evaluator namespace]\n                                     :text/keys [contents range]\n                                     :editor/keys [filename]}]\n  {::pco/input [:repl/evaluator :text/contents\n                (pco/? :editor/filename) (pco/? :repl/namespace) (pco/? :text/range)]\n   ::pco/output [:repl/result :repl/error]}\n\n  (p/let [params (pco/params env)\n          opts (cond-> (dissoc params :repl/template)\n                       namespace (assoc :namespace namespace)\n                       filename (assoc :filename filename)\n                       range (-> (update :row #(or % (-> range first first)))\n                                 (update :col #(or % (-> range first second)))))\n          code (if-let [t (:repl/template params)]\n                 (template t {:repl/code (symbol contents)})\n                 contents)\n          result (repl/eval evaluator code opts)]\n    (if (:error result)\n      {:repl/error result}\n      {:repl/result result})))\n\n(defn- extract-right-var [current-var contents]\n  (let [contents (or (:text/contents current-var) contents)\n        [_ var] (helpers/current-var (str contents) [0 0])]\n    (when (and var (= var contents))\n      contents)))\n\n(connect/defresolver fqn-var\n  [{:keys [repl/namespace text/current-var text/contents repl/evaluator]}]\n  {::pco/input [:repl/namespace :repl/evaluator\n                (pco/? :text/current-var) (pco/? :text/contents)]\n   ::pco/output [:var/fqn]}\n\n  (when-let [contents (extract-right-var current-var contents)]\n    (p/let [{:keys [result]} (repl/eval evaluator\n                                        (str \"`\" contents)\n                                        {:namespace (str namespace)})]\n      {:var/fqn result})))\n\n(defn- eval-for-meta [evaluator var-name namespace]\n  (p/let [{:keys [result]} (repl/eval evaluator\n                                      (template `(meta ::current-var)\n                                                {::current-var (->> var-name\n                                                                    (str \"#'\")\n                                                                    symbol)})\n                                      {:namespace (str namespace)})]\n    (when result {:var/meta result})))\n\n(connect/defresolver meta-for-var\n  [{:keys [repl/namespace repl/evaluator config/repl-kind\n           text/current-var text/contents]}]\n  {::pco/input [:repl/namespace :repl/evaluator\n                (pco/? :text/current-var) (pco/? :text/contents)\n                (pco/? :config/repl-kind)]\n   ::pco/output [:var/meta]\n   ::pco/priority 1}\n\n  (when-let [contents (extract-right-var current-var contents)]\n    (p/let [meta (eval-for-meta evaluator contents namespace)]\n      (if (= :clje repl-kind)\n        (walk/postwalk #(cond-> %\n                                (and (tagged-literal? %) (-> % .-tag (= 'erl)))\n                                .-form)\n                       meta)\n        meta))))\n\n(connect/defresolver meta-for-clj-var\n  [{:keys [var/fqn repl/clj repl/kind]}]\n  {::pco/output [:var/meta]}\n\n  (when (= :cljs kind)\n    (eval-for-meta clj fqn 'user)))\n\n; TODO: Somehow, test this\n(pco/defresolver spec-for-var [{:keys [var/fqn repl/evaluator]}]\n  {::pco/output [:var/spec]}\n\n  (p/let [res (repl/eval evaluator \"(require 'clojure.spec.alpha)\")]\n    (when-not (:error res)\n      (p/let [{:keys [result]}\n              (repl/eval\n               evaluator\n               (template `(let [s# (clojure.spec.alpha/get-spec ' ::fqn)\n                                fun# #(some->> (% s) clojure.spec.alpha/describe)]\n                            (when s#\n                              (->> [:args :ret :fn]\n                                   (map (juxt identity fun#))\n                                   (filter second)\n                                   (into {}))))\n                         {::fqn fqn}))]\n        (when result {:var/spec result})))))\n\n(pco/defresolver doc-for-var [{:var/keys [fqn meta spec]}]\n  {::pco/input [:var/fqn :var/meta (pco/? :var/spec)]\n   ::pco/output [:var/doc]}\n\n  {:var/doc\n   (str \"-------------------------\\n\"\n        fqn \"\\n\"\n        (:arglists meta) \"\\n  \"\n        (:doc meta)\n        (when (map? spec)\n          (cond-> \"\\nSpec\\n\"\n                  (:args spec) (str \"  args: \" (pr-str (:args spec)) \"\\n\")\n                  (:ret spec) (str \"  ret: \" (pr-str (:ret spec)) \"\\n\")\n                  (:fn spec) (str \"  fn: \" (pr-str (:fn spec))))))})\n\n(def resolvers [get-right-repl repl-eval fqn-var\n                meta-for-var meta-for-clj-var\n                spec-for-var doc-for-var])\n"]}