{"version":3,"sources":["sci/impl/parser.cljc"],"mappings":"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","names":["sci.impl.parser/opts","edamame.impl.parser/normalize-opts","sci.impl.parser/fully-qualify","ctx","sym","cljs.core/deref","env","sym-ns","temp__5753__auto__","n","cljs.core/namespace","cljs.core.symbol","sym-name-str","cljs.core/name","current-ns","sci.impl.vars/current-ns-name","current-ns-str","namespaces","cljs.core.get","the-current-ns","aliases","ret","cljs.core/not","or__4223__auto__","cljs.core/contains?","sci.impl.analyzer/macros","sci.impl.interop/fully-qualify-class","v","m","cljs.core/meta","var-name","ns","sci.impl.vars/getName","cljs.core.get_in","temp__5751__auto__","var_args","G__72329","sci.impl.parser/parse-next","js/Error","r","edamame.impl.parser/parse-next","features","readers","sci.impl.vars/var?","env-val","auto-resolve","cljs.core.assoc","parse-opts","p1__72324#"],"sourcesContent":["(ns sci.impl.parser\n  {:no-doc true}\n  (:refer-clojure :exclude [read-string])\n  (:require\n   [edamame.impl.parser :as parser]\n   [sci.impl.analyzer :as ana]\n   [sci.impl.interop :as interop]\n   [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def opts\n  (parser/normalize-opts\n   {:all true\n    :read-eval false\n    :row-key :line\n    :col-key :column\n    :end-row-key :end-line\n    :end-col-key :end-column}))\n\n(defn fully-qualify [ctx sym]\n  (let [env @(:env ctx)\n        sym-ns (when-let [n (namespace sym)]\n                 (symbol n))\n        sym-name-str (name sym)\n        current-ns (vars/current-ns-name)\n        current-ns-str (str current-ns)\n        namespaces (get env :namespaces)\n        the-current-ns (get namespaces current-ns)\n        aliases (:aliases the-current-ns)\n        ret (if-not sym-ns\n              (or (when (or (get (get namespaces 'clojure.core) sym)\n                            (contains? ana/macros sym))\n                    (symbol \"clojure.core\" sym-name-str))\n                  (interop/fully-qualify-class ctx sym)\n                  (when-let [v (get the-current-ns sym)]\n                    (when-let [m (meta v)]\n                      (when-let [var-name (:name m)]\n                        (when-let [ns (:ns m)]\n                          (symbol (str (vars/getName ns))\n                                  (str var-name))))))\n                  ;; all unresolvable symbols all resolved in the current namespace\n                  (symbol current-ns-str sym-name-str))\n              (if (get-in env [:namespaces sym-ns])\n                sym\n                (if-let [ns (get aliases sym-ns)]\n                  (symbol (str ns) sym-name-str)\n                  sym)))]\n    ret))\n\n(defn parse-next\n  ([r]\n   (parser/parse-next opts r))\n  ([ctx r]\n   (let [features (:features ctx)\n         readers (:readers ctx)\n         readers (if (vars/var? readers) @readers readers)\n         env (:env ctx)\n         env-val @env\n         current-ns (vars/current-ns-name)\n         the-current-ns (get-in env-val [:namespaces current-ns])\n         aliases (:aliases the-current-ns)\n         auto-resolve (assoc aliases\n                             :current current-ns)\n         parse-opts (assoc opts\n                           :read-cond :allow\n                           :features features\n                           :auto-resolve auto-resolve\n                           :syntax-quote {:resolve-symbol #(fully-qualify ctx %)}\n                           :readers readers)\n         ret (parser/parse-next parse-opts\n                                r)]\n     ;; (prn \"ret\" ret)\n     ret)))\n\n;;;; Scratch\n\n(comment\n  )\n"]}