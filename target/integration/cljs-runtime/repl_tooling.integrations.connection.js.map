{"version":3,"sources":["repl_tooling/integrations/connection.cljs"],"mappings":"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","names":["repl-tooling.integrations.connection/treat-result","id","ret","repl-tooling.integrations.repls/disconnect!","success","promesa.protocols/-bind","___31820__auto__","p__141991","map__141992","cljs.core/--destructure-map","cljs.core.get","___31810__auto__","promesa.protocols/-promise","as-text","repl_tooling.eval.eval","cljs.core._EQ_","delay","promesa.core.delay","promesa.core/race","p__141994","map__141995","repl-tooling.integrations.connection/connect-self-hosted!","identifier","host","port","code","on-result","on-stdout","repl-info","cljs.core/Delay","repl-tooling.integrations.repls/connect-repl!","res","cljs.core/contains?","G__142000","repl-tooling.editor-helpers/parse-result","G__142004","cljs.core/deref","p__142009","vec__142011","cljs.core.nth","_","clj-repl","self-hosted","repl-tooling.repl-client.clojure/self-host","p__142032","map__142035","repl-tooling.integrations.connection/connect-shadow-ws!","build-id","on-stderr","on-patch","directories","compile-error","on-eval","on-start-eval","dir","p1__142022#","cljs.core.filter","js/shadow.js.shim.module$fs.existsSync","js/shadow.js.shim.module$path.join","cljs.core/first","port-file","js/shadow.js.shim.module$fs.readFileSync","js/parseInt","token","on-output","G__142073","cljs.core.dissoc","G__142079","cljs.core.update","cljs.core.assoc","G__142089","G__142090","G__142091","G__142092","repl-tooling.repl-client.shadow-ws/connect!"],"sourcesContent":["(ns repl-tooling.integrations.connection\n  (:require [promesa.core :as p]\n            [repl-tooling.repl-client.clj-helper :refer [cljs-blob-contents]]\n            [cljs.reader :as edn]\n            [repl-tooling.repl-client.clojure :as clj-repl]\n            [repl-tooling.eval :as eval]\n            [repl-tooling.editor-helpers :as helpers]\n            [repl-tooling.features.shadow-cljs :as shadow-cljs]\n            [repl-tooling.repl-client.shadow-ws :as shadow-ws]\n            [repl-tooling.integrations.repls :as repls]\n            [\"fs\" :refer [readFileSync existsSync]]\n            [\"path\" :refer [join]]))\n\n; (def blob (cljs-blob-contents))\n\n(defn- treat-result [id ret]\n  (if (:error ret)\n    (do\n      (repls/disconnect! id)\n      ret)\n    (let [success (p/let [{:keys [as-text]} (eval/eval ret \"(/ 10 0)\" {:ignore true})]\n                    (if (= as-text \"##Inf\")\n                      ret\n                      (do\n                        (repls/disconnect! id)\n                        {:error :unknown})))\n          delay (p/delay 4000 {:error :timeout-runtime})]\n      (p/race [success delay]))))\n\n(defn connect-self-hosted!\n  \"Given a host, port, and a clojure command, connects on a Clojure REPL,\nruns the command to change it to CLJS, and returns an evaluator for CLJS.\"\n  [{:keys [identifier host port code on-result on-stdout]\n    :or {identifier :cljs-eval}}]\n  (p/let [repl-info (delay (repls/connect-repl! identifier host port\n                                                (fn [res]\n                                                  (cond\n                                                    (or (contains? res :result)\n                                                        (contains? res :error))\n                                                    (on-result (helpers/parse-result res))\n\n                                                    (:out res)\n                                                    (on-stdout (:out res))))))]\n    (if (:error code)\n      code\n      (p/let [repl-info @repl-info\n              [_ clj-repl] repl-info\n              self-hosted (clj-repl/self-host clj-repl code)]\n        (treat-result identifier self-hosted)))))\n\n(defn connect-shadow-ws!\n  [{:keys [identifier build-id on-stdout on-stderr on-patch directories compile-error\n           on-eval on-start-eval]\n    :or {identifier :cljs-eval}}]\n  (let [host \"localhost\"\n        dir (->> directories\n                 (filter #(existsSync (join % \".shadow-cljs\" \"server.token\")))\n                 first)\n        port-file (if (existsSync (join dir \".shadow-cljs\" \"https-port.port\"))\n                    \"https-port.port\"\n                    \"http.port\")\n        port (-> (join dir \".shadow-cljs\" port-file) readFileSync str js/parseInt)\n        token (-> (join dir \".shadow-cljs\" \"server.token\") readFileSync str)\n        on-output (fn [res]\n                    (cond\n                      (:result res)\n                      (let [res (:result res)]\n                        (on-start-eval (dissoc res :result))\n                        (on-eval (-> res\n                                     (update :result helpers/parse-result)\n                                     (assoc :repl nil))))\n\n                      (:out res)\n                      (on-stdout (:out res))\n\n                      (:err res)\n                      (on-stderr (:err res))\n\n                      (:compile-err res)\n                      (compile-error (:compile-err res))\n\n                      (:patch res)\n                      (on-patch (:patch res))))]\n\n    (shadow-ws/connect! {:id identifier\n                         :build-id build-id\n                         :host host\n                         :port port\n                         :token token\n                         :on-output on-output\n                         :ssl? (= port-file \"https-port.port\")})))\n"]}