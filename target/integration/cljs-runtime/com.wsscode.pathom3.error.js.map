{"version":3,"sources":["com/wsscode/pathom3/error.cljc"],"mappings":";AAMA,AAAAA,yBAAA,AAAA,kHAAA,AAAA,s4BAAA,iFAAA,6IAAA,gIAAA,8HAAA,iJAAA,oIAAA;AAQA,iDAAA,yDAAAC,1GAAMI,mHACmEG;AADzE,AAAA,IAAAN,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAAA,RACkEK;qBADlE,AAAAH,4CAAAF,eAAA,5EAC8CI;AAD9C,AAEE,IAAAG,aAAiF,AAACL,4CAAIE,eAAeE;IAArGC,iBAAA,AAAAN,4BAAAM;iBAAA,AAAAL,4CAAAK,eAAA,xEAAiDC;yBAAjD,AAAAN,4CAAAK,eAAA,hFAA4DE;AAA5D,AACE,oBACED;AACA,oDAAA,2CAAA,kHAAA,2HAAA,rUAACE,qCACCJ,+YAEcE;;AALlB,oBAOEC;AACA,oDAAA,2CAAA,kHAAA,1MAACC,qCACCJ;;AATJ,AAaE,IAAAK,qBAA0B,gBACK,AAACM,6CAAK,WAAKX,xEAGXa;AAHM,AACE,IAAAR,qBAAe,8DAAA,+FAAA,7JAACO,+CAAOd,kGAAgBE;AAAvC,AAAA,oBAAAK;AAAA,YAAAA,RAASI;AAAT,AAAA,0FACGT,YAAQS;;AADX;;GAFR,AAACC,mDAAmBX,MAAMC;AAAzD,AAAA,oBAAAK;AAAA,IAAAC,aAAAD;2BAAA,AAAAE,4CAAAD,WAAA,IAAA,lFAAUE;YAAV,AAAAD,4CAAAD,WAAA,IAAA,nEAAmBG;AAAnB,AAKE,oDAAA,2CAAA,kHAAA,yHAAA,qJAAA,xdAACL,qCACCJ,8ZAEqBQ,oIACAC;;AATzB;;;;;;AAWN;;;4CAAA,5CAAMK,gGAEHC,SAASC;AAFZ,AAGE,GAAI,AAACC,0BAAUF,SAASC;AAAxB;;AAEE,IAAAE,aACM,AAAA,gKAAA,eAAIH,fAASO;IADnBJ,iBAAA,AAAAvB,4BAAAuB;gBAAAA,ZAA6EG;gBAA7E,AAAAzB,4CAAAsB,eAAA,vEAAkDC;kBAAlD,AAAAvB,4CAAAsB,eAAA,zEAA4DE;AAA5D,AAEE,GAAI,AAACH,0BAAUE,UAAUH;AACvB,IAAAX,qBAAe,AAACT,4CAAIwB,YAAYJ;AAAhC,AAAA,oBAAAX;AAAA,YAAAA,RAASkB;AAAT,AAAA,kDAAA,kHAAA,qHAAA,kIAEwB,6CAAA,7CAACC,gFAAQ,6CAAA,WAAAC,xDAACd;AAAD,AAAO,gEAAAc,zDAAC5B,+CAAqBwB;IAAcE;;AAF5E,kDAAA,kHAAA;;;AADF,kDAAA,kHAAA;;;;AAON,mDAAA,nDAAMG,8GAAkBX;AAAxB,AAOE,IAAAY,WAAQZ;IAARY,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,eAAAA,fAAiBL;AAAjB,AAAA,GAAA,CAAAK,gBAAA;AAAA;;AAAsB,iCAAAA,aAAA,vCAACV","names":["cljs.spec.alpha/def-impl","p__83922","map__83923","cljs.core/--destructure-map","cljs.core.get","com.wsscode.pathom3.error/attribute-node-error","node-run-stats","graph","node-id","map__83924","node-error","node-run-finish-ms","com.wsscode.misc.coll/make-map-entry","temp__5751__auto__","vec__83926","cljs.core.nth","node-id'","error","com.wsscode.pathom3.connect.planner/node-ancestors","cljs.core.keep","cljs.core.get_in","cljs.core/first","com.wsscode.pathom3.error/attribute-error","response","attribute","cljs.core/contains?","map__83934","index-ast","index-attrs","run-stats","cljs.core/meta","nodes","cljs.core.into","p1__83931#","com.wsscode.pathom3.error/scan-for-errors?","G__83935"],"sourcesContent":["(ns com.wsscode.pathom3.error\n  (:require\n    [com.fulcrologic.guardrails.core :refer [<- => >def >defn >fdef ? |]]\n    [com.wsscode.misc.coll :as coll]\n    [com.wsscode.pathom3.connect.planner :as pcp]))\n\n(>def ::error-type\n  #{::attribute-unreachable\n    ::attribute-not-requested\n    ::node-errors\n    ::node-exception\n    ::attribute-missing\n    ::ancestor-error})\n\n(defn attribute-node-error\n  [{:com.wsscode.pathom3.connect.runner/keys [node-run-stats] :as graph} node-id]\n  (let [{:com.wsscode.pathom3.connect.runner/keys [node-error node-run-finish-ms]} (get node-run-stats node-id)]\n    (cond\n      node-error\n      (coll/make-map-entry\n        node-id\n        {::error-type ::node-exception\n         ::exception  node-error})\n\n      node-run-finish-ms\n      (coll/make-map-entry\n        node-id\n        {::error-type ::attribute-missing})\n\n      :else\n      (if-let [[node-id' error] (->> (pcp/node-ancestors graph node-id)\n                                     (keep (fn [node-id]\n                                             (if-let [error (get-in node-run-stats [node-id :com.wsscode.pathom3.connect.runner/node-error])]\n                                               [node-id error])))\n                                     first)]\n        (coll/make-map-entry\n          node-id\n          {::error-type        ::ancestor-error\n           ::error-ancestor-id node-id'\n           ::exception         error})))))\n\n(defn attribute-error\n  \"Return the attribute error, in case it failed.\"\n  [response attribute]\n  (if (contains? response attribute)\n    nil\n    (let [{:com.wsscode.pathom3.connect.planner/keys [index-ast index-attrs] :as run-stats}\n          (-> response meta :com.wsscode.pathom3.connect.runner/run-stats)]\n      (if (contains? index-ast attribute)\n        (if-let [nodes (get index-attrs attribute)]\n          {::error-type         ::node-errors\n           ::node-error-details (into {} (keep #(attribute-node-error run-stats %)) nodes)}\n          {::error-type ::attribute-unreachable})\n        {::error-type ::attribute-not-requested}))))\n\n(defn scan-for-errors? [response]\n  ; some node error?\n  ; something unreachable?\n\n  ; is there a way to know if there wasn't any error without checking each attribute?\n\n  ; check if map has meta\n  (some-> response meta (contains? :com.wsscode.pathom3.connect.runner/run-stats)))\n"]}