{"version":3,"sources":["matcher_combinators/printer.cljc"],"mappings":"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","names":["this__4472__auto__","k__4473__auto__","this__4474__auto__","k52605","else__4475__auto__","G__52614","cljs.core/Keyword","color","expression","cljs.core.get","__extmap","this__4492__auto__","f__4493__auto__","init__4494__auto__","cljs.core.reduce","ret__4495__auto__","p__52615","vec__52616","k__4496__auto__","cljs.core.nth","v__4497__auto__","this__4487__auto__","writer__4488__auto__","opts__4489__auto__","pr-pair__4490__auto__","keyval__4491__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__52604","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4470__auto__","__meta","this__4467__auto__","__hash","this__4476__auto__","cljs.core/count","this__4468__auto__","h__4330__auto__","coll__4469__auto__","cljs.core/hash-unordered-coll","this52607","other52608","cljs.core._EQ_","this__4482__auto__","k__4483__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4479__auto__","G__52622","this__4480__auto__","k__4481__auto__","pred__52623","cljs.core/keyword-identical?","expr__52624","cljs.core.assoc","this__4485__auto__","cljs.core/seq","cljs.core/MapEntry","this__4471__auto__","this__4477__auto__","entry__4478__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","matcher-combinators.printer/ColorTag","this__4516__auto__","cljs.core/List","writer__4517__auto__","cljs.core/-write","G__52609","extmap__4512__auto__","G__52632","cljs.core/record?","matcher-combinators.printer/->ColorTag","matcher-combinators.printer/map->ColorTag","js/matcher-combinators","js/matcher-combinators.printer","js/matcher-combinators.printer.markup-expression","method-table__4712__auto__","cljs.core.atom","prefer-table__4713__auto__","method-cache__4714__auto__","cached-hierarchy__4715__auto__","hierarchy__4716__auto__","fexpr__52634","cljs.core/MultiFn","cljs.core.symbol","matcher-combinators.printer/markup-expression","cljs.core/type","p__52639","map__52640","cljs.core/--destructure-map","matcher-combinators.model/Mismatch","expected","actual","p__52641","map__52642","matcher-combinators.model/ExpectedMismatch","matcher-combinators.model/Missing","missing","matcher-combinators.model/Unexpected","unexpected","p__52643","map__52644","matcher-combinators.model/TypeMismatch","matcher-combinators.model/InvalidMatcherType","invalid-type","matcher-combinators.model/InvalidMatcherContext","invalid-context","p__52645","map__52646","matcher-combinators.printer/colorized-print","cljs.pprint/write-out","matcher_combinators.ansi_color.style","matcher-combinators.printer/print-diff-dispatch","markup","cljs.pprint/simple-dispatch","matcher-combinators.printer/pretty-print","expr","*print-pprint-dispatch*-orig-val__52648","cljs.pprint/*print-pprint-dispatch*","*print-pprint-dispatch*-temp-val__52649","cljs.pprint.pprint","matcher-combinators.printer/as-string","value","sb__4760__auto__","goog.string/StringBuffer","*print-newline*-orig-val__52653","cljs.core/*print-newline*","*print-fn*-orig-val__52654","cljs.core/*print-fn*","*print-newline*-temp-val__52655","*print-fn*-temp-val__52656","x__4761__auto__"],"sourcesContent":["(ns matcher-combinators.printer\n  (:refer-clojure :exclude [print])\n  (:require [clojure.pprint :as pprint]\n            #?(:clj  [matcher-combinators.model]\n               :cljs [matcher-combinators.model :refer [ExpectedMismatch\n                                                        Mismatch\n                                                        Missing\n                                                        Unexpected\n                                                        TypeMismatch\n                                                        InvalidMatcherContext\n                                                        InvalidMatcherType]])\n            [matcher-combinators.result :as result]\n            [matcher-combinators.ansi-color :as ansi-color])\n  #?(:clj\n     (:import [matcher_combinators.model ExpectedMismatch Mismatch Missing\n               Unexpected TypeMismatch InvalidMatcherContext InvalidMatcherType])))\n\n(defrecord ColorTag [color expression])\n\n(defmulti markup-expression type)\n\n(defmethod markup-expression Mismatch [{:keys [expected actual]}]\n  (list 'mismatch\n        (list 'expected (->ColorTag :yellow expected))\n        (list 'actual (->ColorTag :red actual))))\n\n(defmethod markup-expression ExpectedMismatch [{:keys [actual expected]}]\n  (list 'mismatch\n        (->ColorTag :yellow (symbol \"expected mismatch from: \"))\n        (->ColorTag :yellow expected)\n        (list 'actual (->ColorTag :red actual))))\n\n(defmethod markup-expression Missing [missing]\n  (list 'missing (->ColorTag :red (:expected missing))))\n\n(defmethod markup-expression Unexpected [unexpected]\n  (list 'unexpected (->ColorTag :red (:actual unexpected))))\n\n(defmethod markup-expression TypeMismatch [{:keys [actual expected]}]\n  (list 'mismatch\n        (list 'expected (->ColorTag :yellow (type expected)))\n        (list 'actual (->ColorTag :red (type actual)))))\n\n(defmethod markup-expression InvalidMatcherType [invalid-type]\n  (list 'invalid-matcher-input\n        (->ColorTag :yellow (:expected-type-msg invalid-type))\n        (->ColorTag :red (:provided invalid-type))))\n\n(defmethod markup-expression InvalidMatcherContext [invalid-context]\n  (list 'invalid-matcher-context\n        (->ColorTag :red (:message invalid-context))))\n\n(defmethod markup-expression :default [expression]\n  expression)\n\n(defn colorized-print [{:keys [color expression]}]\n  (if color\n    #?(:clj  (do (ansi-color/set-color color)\n                 (pprint/write-out expression)\n                 (ansi-color/reset))\n       :cljs (pprint/write-out (ansi-color/style expression color)))\n    (pprint/write-out expression)))\n\n(defn print-diff-dispatch [expression]\n  (let [markup (markup-expression expression)]\n    (if (instance? ColorTag markup)\n      (colorized-print markup)\n      (pprint/simple-dispatch markup))))\n\n(defn pretty-print [expr]\n  (pprint/with-pprint-dispatch\n    print-diff-dispatch\n    (pprint/pprint expr)))\n\n(defn as-string [value]\n  (with-out-str\n    (pretty-print value)))\n"]}