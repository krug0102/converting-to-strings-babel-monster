{"version":3,"sources":["repl_tooling/editor_integration/configs.cljs"],"mappings":"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","names":["repl-tooling.editor-integration.configs/read-config-file","config-file","p","promesa.core/deferred","p1__146899#","p2__146898#","js/shadow.js.shim.module$fs.readFile","promesa.core.resolve_BANG_","repl-tooling.editor-integration.configs/name-for","k","cljs.core/name","clojure.string/capitalize","clojure.string/replace","repl-tooling.editor-integration.configs/catch-errors","fun","editor-state","e146905","e","repl_tooling.editor_integration.commands.run_callback_BANG_","cljs.core.gensym","cljs.core/deref","cljs.core.pr_str","repl-tooling.editor-integration.configs/fns-for","js/shadow.js.shim.module$fs.existsSync","promesa.protocols/-bind","___31820__auto__","___31810__auto__","promesa.protocols/-promise","config","sci-state","cljs.core.atom","_","repl-tooling.editor-integration.interpreter/evaluate-code","vars","sci.core.eval_string","p1__146907#","cljs.core.map","cljs.core/PersistentVector","cljs.core.remove","cljs.core.comp","cljs.core/first","cljs.core.filter","p__146919","vec__146920","cljs.core.nth","v","cljs.core/fn?","cljs.core.reduce","p__146913","vec__146914","acc","cljs.core.assoc","cljs.core.keyword","repl-tooling.editor-integration.configs/watch-config","cmds-from-tooling","dir","js/shadow.js.shim.module$path.dirname","watch-pid","js/shadow.js.shim.module$fs.watch","evt","filename","cljs.core._EQ_","js/shadow.js.shim.module$path.join","repl-tooling.editor-integration.configs/reg-commands","old-disconnect","cljs.core.swap_BANG_","cljs.core/assoc-in","repl-tooling.editor-integration.configs/fns-or-check-errors","promesa.core.catch$","error","serialized","cljs.core/tagged-literal","clojure.string/split-lines","data","repl-tooling.editor-helpers/parse-result","error-data","rowcol","cljs.core.dissoc","repl-tooling.commands-to-repl.pathom/reset-resolvers","___31809__auto__","cmds-from-config","commands","cljs.core.merge","cljs.core/assoc","repl-tooling.editor-integration.configs/clojure-renderer","edn","fake-res","parsed-ratom","repl-tooling.editor-integration.renderer/parse-result","repl-tooling.editor-integration.renderer/view-for-result","repl-tooling.editor-integration.configs/register-custom-tags!","repl-tooling.ui.pinkie/register-tag","repl-tooling.editor-integration.renderer.pinkie/ansi-tag","p1__146945#","repl-tooling.editor-integration.renderer.pinkie/register-tag","repl-tooling.editor-integration.renderer.pinkie/markdown-tag","repl-tooling.editor-integration.renderer.pinkie/code-tag","repl-tooling.editor-integration.configs/prepare-commands"],"sourcesContent":["(ns repl-tooling.editor-integration.configs\n  (:require [sci.core :as sci]\n            [promesa.core :as p]\n            [clojure.string :as str]\n            [repl-tooling.editor-integration.commands :as cmds]\n            [repl-tooling.editor-helpers :as helpers]\n            [repl-tooling.repl-client.clj-helper :refer [contents-for-fn]]\n            [repl-tooling.ui.pinkie :as pinkie]\n            [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [repl-tooling.editor-integration.interpreter :as int]\n            [repl-tooling.editor-integration.renderer :as render]\n            [repl-tooling.commands-to-repl.pathom :as pathom]\n            [repl-tooling.editor-integration.renderer.pinkie :as r-pinkie]\n            [\"highlight.js\" :as highlight]\n            [\"commonmark\" :refer [Parser HtmlRenderer]]\n            [\"path\" :refer [dirname join]]\n            [\"fs\" :refer [watch readFile existsSync]]\n            [\"ansi_up\" :default Ansi]))\n\n(defn- read-config-file [config-file]\n  (let [p (p/deferred)]\n    (readFile config-file #(p/resolve! p (str %2)))\n    p))\n\n(defn- name-for [k]\n  (-> k name str/capitalize (str/replace #\"-\" \" \")))\n\n(defn- catch-errors [fun editor-state]\n  (try\n    (fun)\n    (catch :default e\n      (cmds/run-callback! editor-state :on-eval\n                          {:id (gensym \"custom-eval\")\n                           :editor-data {:contents \"[INTERNAL-FN]\"\n                                         :range [[0 0] [0 0]]\n                                         :filename (-> @editor-state\n                                                       :editor/callbacks\n                                                       :config-file-path)}\n                           :range [[0 0] [0 0]]\n                           :repl nil\n                           :result {:error e\n                                    :as-text (pr-str e)\n                                    :parsed? true}}))))\n\n(defn- fns-for [editor-state config-file]\n  (when (existsSync config-file)\n    (p/let [config (read-config-file config-file)\n            sci-state (atom {})\n            _ (do (int/evaluate-code {:code config\n                                      :sci-state sci-state\n                                      :editor-state editor-state})\n                nil)\n            vars (->> (sci/eval-string \"(->> *ns* ns-publics keys)\" {:env sci-state})\n                      (map #(vector % (sci/eval-string (str %) {:env sci-state})))\n                      (remove (comp '#{println print prn log pr} first)))]\n      (->> vars\n           (filter (fn [[k v]] (fn? v)))\n           (reduce (fn [acc [k fun]]\n                     (assoc acc (-> k str keyword) {:name (name-for k)\n                                                    :command #(catch-errors\n                                                               fun editor-state)}))\n                   {})))))\n\n(declare reg-commands)\n(defn- watch-config [editor-state cmds-from-tooling config-file]\n  (when config-file\n    (let [dir (dirname config-file)\n          watch-pid (watch dir\n                           (fn [evt filename]\n                             (when (= (join dir filename) config-file)\n                               (reg-commands editor-state cmds-from-tooling config-file))))\n          old-disconnect (-> @editor-state :editor/callbacks :on-disconnect)]\n      (swap! editor-state assoc-in\n             [:editor/callbacks :on-disconnect] (fn []\n                                                   (old-disconnect)\n                                                   (.close ^js watch-pid))))))\n\n(defn- fns-or-check-errors [editor-state config-file]\n  (p/catch (fns-for editor-state config-file)\n           (fn [error]\n             (let [serialized (pr-str (tagged-literal 'error\n                                                      {:type (.-name error)\n                                                       :data (.-data error)\n                                                       :message (.-message error)\n                                                       :trace (-> error .-stack str/split-lines)}))\n                   data {:id (gensym \"sci-error-\")\n                         :result (helpers/parse-result {:error serialized\n                                                        :as-text serialized})}\n                   error-data (:data error)\n                   data (if (-> error-data :type (= :sci/error))\n                          (let [rowcol [(-> error-data :line dec)\n                                        (-> error-data :column dec)]]\n                            (assoc data\n                                   :range [rowcol rowcol]\n                                   :editor-data {:filename config-file\n                                                 :contents \"\"\n                                                 :range [rowcol rowcol]}))\n                          (assoc data\n                                 :range [[0 0] [0 0]]\n                                 :editor-data {:filename nil\n                                               :contents \"\"\n                                               :range [[0 0] [0 0]]}))]\n               (cmds/run-callback! editor-state :on-start-eval (dissoc data :result))\n               (cmds/run-callback! editor-state :on-eval (assoc data :repl nil)))\n             nil)))\n\n(defn- reg-commands [editor-state cmds-from-tooling config-file]\n  (pathom/reset-resolvers)\n  (p/let [cmds-from-config (fns-or-check-errors editor-state config-file)\n          commands (-> cmds-from-tooling\n                       (merge cmds-from-config)\n                       (dissoc :let :then :catch))]\n    (swap! editor-state assoc :editor/commands commands)\n    (cmds/run-callback! editor-state :register-commands commands)))\n\n(defn- clojure-renderer [editor-state edn]\n  (let [fake-res {:result edn :parsed? true :as-text (pr-str edn)}\n        parsed-ratom (render/parse-result fake-res nil editor-state)]\n    [render/view-for-result parsed-ratom]))\n\n(defn register-custom-tags! [editor-state]\n  (pinkie/register-tag :div/ansi r-pinkie/ansi-tag)\n  (pinkie/register-tag :div/clj #(clojure-renderer editor-state %))\n  (r-pinkie/register-tag :div/md r-pinkie/markdown-tag)\n  (pinkie/register-tag :div/clj-code r-pinkie/code-tag))\n\n(defn prepare-commands [editor-state cmds-from-tooling]\n  (register-custom-tags! editor-state)\n  (swap! editor-state assoc :editor/commands cmds-from-tooling)\n  (p/let [config-file (-> @editor-state :editor/callbacks :config-file-path)]\n    (watch-config editor-state cmds-from-tooling config-file)\n    (reg-commands editor-state cmds-from-tooling config-file)))\n"]}