{"version":3,"sources":["check/async_old.cljs"],"mappings":"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","names":["check.async-old/timeout","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/vec","check.async-old/to-chan","left","check.async-old/get-from-channel!","cljs?","chan","check.core/assert-arrow","_","right","check.async-old/promise-test*","prom","done","tear","time","teardown","or__4223__auto__","mark-done","cljs.core/Delay","js/setTimeout","cljs.core/deref","cljs.core/realized?","cljs.core.ex_info","error"],"sourcesContent":["(ns check.async-old\n  (:require-macros [check.async-old])\n  (:require [clojure.string :as str]\n            [check.core :as core]\n            [clojure.test :as test :include-macros true]\n            [clojure.core.async :as async :include-macros true]\n            [promesa.core :as p]\n            [net.cgrand.macrovich :as macros]))\n\n(def ^:dynamic timeout 3000)\n(defn- to-chan [left]\n  `(let [chan# (async/promise-chan)]\n       (.then ~left (fn [result#] (async/put! chan# result#)))\n       chan#))\n\n(defn get-from-channel! [cljs? chan]\n  (if cljs?\n   `(async/<! (if (instance? js/Promise ~chan)\n                ~(to-chan chan)\n                ~chan))\n   `(first (async/alts!! [~chan (async/timeout timeout)]))))\n\n(defmethod core/assert-arrow '=resolves=> [cljs? left _ right]\n  `(let [value# (get-from-channel! ~cljs? ~left)]\n     (core/assert-arrow ~cljs? value# '=> ~right)))\n\n(defn promise-test* [prom done tear time]\n  (let [teardown (or tear #())\n        mark-done (delay (do (teardown) (done)))]\n    (js/setTimeout (fn [] (when-not (realized? mark-done)\n                            (throw (ex-info \"Async error - not finalized\" {}))\n                            @mark-done))\n                   time)\n    (.then prom (fn [_] @mark-done))\n    (.catch prom (fn [error]\n                   @done\n                   (throw (ex-info \"Promise resolved with error\" {:error error}))))))\n"]}