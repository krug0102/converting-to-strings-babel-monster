{"version":3,"sources":["repl_tooling/editor_integration/schemas.cljs"],"mappings":"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","names":["repl-tooling.editor-integration.schemas/EvalSuccess","schema.core/Any","schema.core/eq","schema.core/Str","schema.core/Keyword","schema.core/Bool","repl-tooling.editor-integration.schemas/EvalError","repl-tooling.editor-integration.schemas/ReplResult","p1__59783#","p1__59784#","p1__59785#","p1__59786#","schema.core.conditional","and__4221__auto__","cljs.core/contains?","cljs.core.assoc","repl-tooling.editor-integration.schemas/UnparsedResult","p1__59789#","p1__59790#","repl-tooling.editor-integration.schemas/Pos","schema.core/one","schema.core/Num","repl-tooling.editor-integration.schemas/Range","repl-tooling.editor-integration.schemas/EditorData","schema.core/maybe","repl-tooling.editor-integration.schemas/EvalData","schema.core/Symbol","repl-tooling.editor-integration.schemas/EvalResult","repl-tooling.editor-integration.schemas/Config","schema.core.enum$","repl-tooling.editor-integration.schemas/GotoEditorData","schema.core/Int","schema.core/optional-key","repl-tooling.editor-integration.schemas/Command","schema.core/make-fn-schema","repl-tooling.editor-integration.schemas/Commands","repl-tooling.editor-integration.schemas/Callbacks","js/Promise","repl-tooling.editor-integration.schemas/ReplKind","repl-tooling.editor-integration.schemas/PossibleRanges","repl-tooling.editor-integration.schemas/AuxOptions","repl-tooling.editor-integration.schemas/EvalOpts","repl-tooling.editor-integration.schemas/PromisedEvalOpts","repl-tooling.editor-integration.schemas/EditorFeatures","repl-tooling.editor-integration.schemas/EditorState","schema.core/atom","repl-tooling.editor-integration.schemas/OnlyCallbacks","cljs.core/select-keys"],"sourcesContent":["(ns repl-tooling.editor-integration.schemas\n  (:refer-clojure :exclude [Range])\n  (:require [schema.core :as s]))\n\n(def EvalSuccess {:result s/Any :parsed? (s/eq true) :as-text s/Str\n                  s/Keyword s/Bool})\n(def EvalError {:error s/Any :parsed? (s/eq true) :as-text s/Str s/Keyword s/Bool})\n(def ReplResult (s/conditional\n                 #(and (contains? % :result) (:parsed? %)) EvalSuccess\n                 #(:parsed? %) EvalError\n                 #(:literal %) (assoc EvalSuccess\n                                      :result s/Str\n                                      :literal (s/eq true))\n                 #(:interactive %) (assoc EvalSuccess\n                                          :result [s/Any]\n                                          :interactive (s/eq true))\n                 :else EvalSuccess))\n\n(def UnparsedResult (s/conditional\n                     #(:parsed? %) ReplResult\n                     #(contains? % :error) {:as-text s/Str :error s/Str}\n                     :else {:as-text s/Str\n                            :result s/Str\n                            s/Any s/Any}))\n\n(def Pos [(s/one s/Num 'row) (s/one s/Num 'col)])\n(def Range [(s/one Pos 'start) (s/one Pos 'end)])\n\n(def EditorData (s/maybe {:contents s/Str\n                          :filename (s/maybe s/Str)\n                          :range Range\n                          s/Any s/Any}))\n\n(def EvalData {:id s/Symbol\n               :editor-data EditorData\n               :range Range})\n\n(def EvalResult (assoc EvalData :result ReplResult :repl s/Any))\n\n(def Config {:project-paths [s/Str]\n             :eval-mode (s/enum :clj :cljs :prefer-clj :prefer-cljs)\n             s/Any s/Any})\n\n(def GotoEditorData\n  {:file-name s/Str\n   :line s/Int\n   (s/optional-key :column) s/Int\n   (s/optional-key :contents) s/Str})\n\n(def Command {:name s/Str\n              (s/optional-key :description) s/Str\n              (s/optional-key :old-command) (s/=> s/Any)\n              :command (s/=> s/Any)})\n\n(def Commands {:evaluate-top-block Command\n               :evaluate-block Command\n               :evaluate-selection Command\n               :run-tests-in-ns Command\n               :run-test-for-var Command\n               :source-for-var Command\n               :disconnect Command\n               :doc-for-var Command\n               :load-file Command\n               :go-to-var-definition Command\n               (s/optional-key :open-config) Command\n               (s/optional-key :break-evaluation) Command\n               (s/optional-key :connect-embedded) Command\n               s/Keyword Command})\n\n(def Callbacks {:config-file-path (s/maybe s/Str)\n                :register-commands (s/=> s/Any Commands)\n                :on-start-eval (s/=> s/Any EvalData)\n                :open-editor (s/=> s/Any GotoEditorData)\n                :on-eval (s/=> s/Any EvalResult)\n                :editor-data (s/=> EditorData)\n                :notify (s/=> s/Any {:type (s/enum :info :warning :error)\n                                     :title s/Str\n                                     (s/optional-key :message) s/Str})\n                :file-exists (s/=> js/Promise s/Str)\n                :read-file (s/=> js/Promise s/Str)\n                :get-config (s/=> Config)\n                :prompt (s/=> s/Any {:title s/Str\n                                     :message s/Str\n                                     :arguments [{:key s/Keyword :value s/Str}]})\n                :on-copy (s/=> s/Any s/Str)\n                :on-stdout (s/=> s/Any s/Str)\n                :on-stderr (s/=> s/Any s/Str)\n                :on-result (s/=> s/Any ReplResult)\n                (s/optional-key :get-rendered-results) (s/=> s/Any)\n                (s/optional-key :on-patch) (s/=> s/Any {:id s/Symbol\n                                                        :result ReplResult})\n                :on-disconnect (s/=> s/Any)})\n\n(def ReplKind (s/enum :clj :cljs :joker :bb :cljr :clje))\n\n(def PossibleRanges (s/enum :top-block :block :var :selection :ns))\n(def AuxOptions (s/enum true false :always nil))\n(def EvalOpts {(s/optional-key :id) s/Any\n               (s/optional-key :namespace) s/Str\n               (s/optional-key :range) Range\n               (s/optional-key :column) s/Int\n               (s/optional-key :pass) {s/Any s/Any}\n               (s/optional-key :ignore) s/Bool\n               (s/optional-key :aux) AuxOptions\n               s/Keyword s/Any})\n\n(def PromisedEvalOpts (assoc EvalOpts\n                             :text s/Str\n                             (s/optional-key :auto-detect) s/Bool))\n\n(def EditorFeatures {:autocomplete s/Any\n                     :eval-and-render (s/=> s/Any s/Any s/Any s/Any)\n                     :evaluate-and-render (s/=> s/Any PromisedEvalOpts)\n                     :eval (s/=> s/Any PromisedEvalOpts)\n                     :result-for-renderer (s/=> js/Promise)\n                     :go-to-var-definition (s/=> s/Any {:var-name s/Str\n                                                        :namespace s/Str\n                                                        :repl s/Any})\n                     :get-full-var-name (s/=> js/Promise)\n                     :get-code (s/=> js/Promise PossibleRanges)\n                     :repl-for (s/=> s/Any s/Str (s/enum true false :always nil))\n                     :eql (s/=>* s/Any [s/Any] [{s/Keyword s/Any} s/Any])})\n\n(def EditorState (s/atom {:editor/callbacks Callbacks\n                          :editor/features EditorFeatures\n                          (s/optional-key :clj/aux) s/Any\n                          (s/optional-key :clj/repl) s/Any\n                          (s/optional-key :cljs/repl) s/Any\n                          (s/optional-key :repl/info)\n                          {:host s/Str\n                           :port s/Int\n                           :kind ReplKind\n                           :kind-name s/Str\n                           (s/optional-key :cljs/repl-env) s/Any\n                           (s/optional-key :cljs/autocomplete-kind) s/Any\n                           (s/optional-key :clj/autocomplete-kind) s/Any}\n                          :editor/commands Commands\n                          :run-callback (s/=> s/Any s/Any s/Any)\n                          :run-feature (s/=> s/Any s/Any s/Any)}))\n\n(def OnlyCallbacks (s/atom {:editor/callbacks Callbacks\n                            :editor/features (select-keys EditorFeatures [:eql])\n                            :editor/commands (select-keys Commands [:doc-for-var\n                                                                    :go-to-var-definition])\n                            :run-callback (s/=> s/Any s/Any s/Any)\n                            :run-feature (s/=> s/Any s/Any s/Any)}))\n"]}