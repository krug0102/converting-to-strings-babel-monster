{"version":3,"sources":["sci/impl/io.cljc"],"mappings":"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","names":["sci.impl.io/in","*unrestricted*-orig-val__71133","*unrestricted*-temp-val__71134","sci.impl.unrestrict/*unrestricted*","G__71135","sci.impl.vars.dynamic_var","sci.impl.vars/unbind","sci.impl.io/out","*unrestricted*-orig-val__71138","*unrestricted*-temp-val__71139","G__71140","sci.impl.io/err","*unrestricted*-orig-val__71141","*unrestricted*-temp-val__71142","G__71143","sci.impl.io/print-meta","sci.impl.io/print-length","sci.impl.io/print-level","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","sci.impl.io/pr","seq71148","self__4817__auto__","cljs.core/seq","objs","*print-length*-orig-val__71153","*print-level*-orig-val__71154","*print-meta*-orig-val__71155","*print-length*-temp-val__71156","cljs.core/deref","*print-level*-temp-val__71157","*print-meta*-temp-val__71158","cljs.core/*print-length*","cljs.core/*print-level*","cljs.core/*print-meta*","cljs.core.apply","cljs.core/pr-str","sci.impl.io/flush","sci.impl.io/newline","sci.impl.io/println","sci.impl.io/pr-str","seq71168","*print-length*-orig-val__71174","*print-level*-orig-val__71175","*print-meta*-orig-val__71176","*print-length*-temp-val__71177","*print-level*-temp-val__71178","*print-meta*-temp-val__71179","sci.impl.io/prn","seq71186","*print-length*-orig-val__71190","*print-level*-orig-val__71191","*print-meta*-orig-val__71192","*print-length*-temp-val__71193","*print-level*-temp-val__71194","*print-meta*-temp-val__71195","cljs.core/prn-str","sci.impl.io/prn-str","seq71199","*print-length*-orig-val__71203","*print-level*-orig-val__71204","*print-meta*-orig-val__71205","*print-length*-temp-val__71206","*print-level*-temp-val__71207","*print-meta*-temp-val__71208","sci.impl.io/print","seq71213","*print-length*-orig-val__71239","*print-level*-orig-val__71240","*print-length*-temp-val__71241","*print-level*-temp-val__71242","cljs.core/print-str","sci.impl.io/print-str","seq71246","*print-length*-orig-val__71251","*print-level*-orig-val__71252","*print-meta*-orig-val__71253","*print-length*-temp-val__71254","*print-level*-temp-val__71255","*print-meta*-temp-val__71256","seq71261","*print-length*-orig-val__71265","*print-level*-orig-val__71266","*print-meta*-orig-val__71267","*print-length*-temp-val__71268","*print-level*-temp-val__71269","*print-meta*-temp-val__71270","cljs.core/println-str","sci.impl.io/with-out-str","cljs.core.sequence","cljs.core.concat","cljs.core/List","cljs.core/vec","seq71284","G__71285","cljs.core/first","cljs.core/next","G__71286","self__4816__auto__","_","body"],"sourcesContent":["(ns sci.impl.io\n  {:no-doc true}\n  (:refer-clojure :exclude [pr prn pr-str prn-str print print-str println\n                            newline flush with-out-str with-in-str read-line\n                            printf #?@(:cljs [string-print])])\n  (:require #?(:cljs [goog.string])\n            [sci.impl.unrestrict :refer [*unrestricted*]]\n            [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def in (binding [*unrestricted* true]\n          (doto (vars/dynamic-var '*in*)\n                                        (vars/unbind))))\n\n(def out (binding [*unrestricted* true]\n           (doto (vars/dynamic-var '*out*)\n             (vars/unbind))))\n\n(def err (binding [*unrestricted* true]\n           (doto (vars/dynamic-var '*err*)\n             (vars/unbind))))\n\n(def print-meta\n  (vars/dynamic-var '*print-meta* false))\n\n(def print-length (vars/dynamic-var '*print-length* nil))\n\n(def print-level (vars/dynamic-var '*print-level* nil))\n\n#?(:clj (defn pr-on\n          {:private true\n           :static true}\n          [x w]\n          (if *print-dup*\n            (print-dup x w)\n            (print-method x w))\n          nil))\n\n#?(:clj (defn pr\n          ([] nil)\n          ([x]\n           (binding [*print-length* @print-length\n                     *print-level* @print-level\n                     *print-meta* @print-meta]\n             (pr-on x @out)))\n          ([x & more]\n           (pr x)\n           (. ^java.io.Writer @out (append \\space))\n           (if-let [nmore (next more)]\n             (recur (first more) nmore)\n             (apply pr more))))\n   :cljs (defn pr\n           [& objs]\n           (binding [*print-length* @print-length\n                     *print-level* @print-level\n                     *print-meta* @print-meta]\n             (.append @out (apply cljs.core/pr-str objs)))))\n\n#?(:clj\n   (defn flush\n     []\n     (. ^java.io.Writer @out (flush))\n     nil)\n   :cljs (defn flush [] ;stub\n           nil))\n\n#?(:cljs (declare println))\n\n#?(:clj (defn newline\n          []\n          (. ^java.io.Writer @out (append ^String @#'clojure.core/system-newline))\n          nil)\n   :cljs (defn newline\n           []\n           (println)))\n\n#?(:clj\n   (defn pr-str\n     \"pr to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply pr xs))\n       (str sw)))\n   :cljs\n   (defn pr-str\n     \"pr to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta]\n       (apply cljs.core/pr-str objs))))\n\n#?(:clj\n   (defn prn\n     [& more]\n     (apply pr more)\n     (newline)\n     (when *flush-on-newline*\n       (flush)))\n   :cljs\n   (defn prn\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta]\n       (.append @out (apply cljs.core/prn-str objs)))))\n\n#?(:clj\n   (defn prn-str\n     \"pr to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply prn xs))\n       (str sw)))\n   :cljs\n   (defn prn-str\n     \"pr to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta]\n       (apply cljs.core/prn-str objs))))\n\n#?(:clj\n   (defn print\n     [& more]\n     (binding [*print-readably* nil]\n       (apply pr more)))\n   :cljs\n   (defn print\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level]\n       (.append @out (apply cljs.core/print-str objs)))))\n\n#?(:clj\n   (defn print-str\n     \"pr to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply print xs))\n       (str sw)))\n   :cljs\n   (defn print-str\n     \"pr to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta]\n       (apply cljs.core/print-str objs))))\n\n#?(:clj\n   (defn println\n     [& more]\n     (binding [*print-readably* nil]\n       (apply prn more)))\n   :cljs\n   (defn println\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta]\n       (.append @out (apply println-str objs)))))\n\n#?(:clj\n   (defn printf\n     [fmt & args]\n     (print (apply format fmt args))))\n\n(defn with-out-str\n  [_ _ & body]\n  `(let [s# (new #?(:clj java.io.StringWriter\n                    :cljs goog.string.StringBuffer))]\n     (binding [*out* s#]\n       ~@body\n       (str s#))))\n\n#?(:clj\n   (defn with-in-str\n     [_ _ s & body]\n     `(with-open [s# (-> (java.io.StringReader. ~s) clojure.lang.LineNumberingPushbackReader.)]\n        (binding [*in* s#]\n          ~@body))))\n\n#?(:clj\n   (defn read-line\n     []\n     (if (instance? clojure.lang.LineNumberingPushbackReader @in)\n       (.readLine ^clojure.lang.LineNumberingPushbackReader @in)\n       (.readLine ^java.io.BufferedReader @in))))\n"]}