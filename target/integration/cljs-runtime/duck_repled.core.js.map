{"version":3,"sources":["duck_repled/core.cljc"],"mappings":"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","names":["duck-repled.core/original-resolvers","cljs.core/vec","cljs.core.concat","duck-repled.editor-resolvers/resolvers","duck-repled.repl-resolvers/resolvers","duck-repled.definition-resolvers/resolvers","duck-repled.core/gen-resolver-fun","fun","outputs","_","input","promesa.protocols/-bind","___56277__auto__","___56267__auto__","promesa.protocols/-promise","result","duck_repled.schemas.validate_BANG_","cljs.core/keys","var_args","G__89364","duck-repled.core/gen-eql","js/Error","p__89369","map__89370","cljs.core/--destructure-map","cljs.core.get","duck_repled.core.gen_eql","resolvers","plugin","cljs.core/identity","env","G__89371","com.wsscode.pathom3.connect.indexes.register","com.wsscode.pathom3.plugin.register","com.wsscode.pathom3.connect.built-in.plugins/attribute-errors-plugin","query","duck_repled$core$q","seed","com.wsscode.pathom3.interface$.async.eql.process","cljs.core.assoc","G__89373","duck-repled.core/add-resolver","p__89375","map__89376","config","duck_repled.core.add_resolver","inputs","priority","temp__5753__auto__","errors","duck-repled.schemas/explain-add-resolver","cljs.core.ex_info","cljs.core.conj","com.wsscode.pathom3.connect.operation.resolver","cljs.core.gensym","or__4223__auto__","duck-repled.core/rename-resolve-out","resolve-out","out-ns","cljs.core/namespace","out-name","cljs.core/name","cljs.core.keyword","duck-repled.core/rename-resolvers-that-output","rewroted-map","cljs.core/zipmap","cljs.core.map","iter__4622__auto__","s__89383","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__4620__auto__","size__4621__auto__","cljs.core/count","b__89385","cljs.core/chunk-buffer","i__89384","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__89382","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","resolver","resolver-out","new-out","p1__89381#","cljs.core.mapv","G__89390","G__89391","cljs.core._EQ_","cljs.core.symbol","args","res","cljs.core.apply","clojure.set/rename-keys","G__89397","duck-repled.core/compose-resolver","p__89398","map__89399","duck_repled.core.compose_resolver","renamed-resolvers","renamed","cljs.core.into","G__89400","cljs.core/chunk-first"],"sourcesContent":["(ns duck-repled.core\n  (:require [com.wsscode.pathom3.connect.indexes :as indexes]\n            [com.wsscode.pathom3.interface.async.eql :as eql]\n            [com.wsscode.pathom3.plugin :as plugin]\n            [com.wsscode.pathom3.connect.built-in.plugins :as plugins]\n            [duck-repled.schemas :as schemas]\n            [duck-repled.editor-resolvers :as editor]\n            [duck-repled.repl-resolvers :as repl]\n            [duck-repled.definition-resolvers :as def]\n            [promesa.core :as p]\n            [com.wsscode.pathom3.connect.operation :as pco]\n            [clojure.set :as set]))\n\n(def ^:private original-resolvers (vec (concat editor/resolvers\n                                               repl/resolvers\n                                               def/resolvers)))\n\n(defn- gen-resolver-fun [fun outputs]\n  (fn [_ input]\n    (p/let [result (fun input)]\n      (schemas/validate! (keys result)\n                         result\n                         (str \"Invalid schema on custom resolver outputing \" outputs)))))\n\n(defn gen-eql\n  ([] (gen-eql {}))\n  ([{:keys [resolvers plugin]\n     :or {resolvers original-resolvers\n          plugin identity}}]\n   (let [env (-> resolvers\n                 indexes/register\n                 (plugin/register (plugins/attribute-errors-plugin))\n                 plugin)]\n     (fn q\n       ([query] (q {} query))\n       ([seed query]\n        (schemas/validate! (keys seed) seed)\n        (eql/process (assoc env :seed seed) query))))))\n\n(defn add-resolver\n  ([config fun] (add-resolver original-resolvers config fun))\n  ([resolvers {:keys [inputs outputs priority] :as config} fun]\n   (when-let [errors (schemas/explain-add-resolver config)]\n     (throw (ex-info \"Input to add-resolver is invalid\" {:errors errors})))\n\n   (conj resolvers\n         (pco/resolver (gensym \"custom-resolver-\")\n                       {::pco/input inputs\n                        ::pco/output outputs\n                        ::pco/priority (or priority 50)}\n                       (gen-resolver-fun fun outputs)))))\n\n(defn- rename-resolve-out [resolve-out]\n  (let [out-ns (namespace resolve-out)\n        out-name (name resolve-out)]\n    (keyword out-ns (str out-name \"-rewrote\"))))\n\n(defn- rename-resolvers-that-output [resolvers outputs]\n  (let [rewroted-map (zipmap outputs (map rename-resolve-out outputs))]\n    (for [resolver resolvers\n          :let [resolver-out (-> resolver :config ::pco/output)\n                new-out (mapv #(cond-> % (rewroted-map %) rewroted-map)\n                              resolver-out)\n                fun (:resolve resolver)]]\n      (if (= resolver-out new-out)\n        resolver\n        (pco/resolver (-> resolver :config ::pco/op-name (str \"-renamed\") symbol)\n                      {::pco/input (-> resolver :config ::pco/input)\n                       ::pco/output new-out\n                       ::pco/priority (-> resolver :config (::pco/priority 0))}\n                      (fn [ & args]\n                        (p/let [res (apply fun args)]\n                          (set/rename-keys res rewroted-map))))))))\n\n(defn compose-resolver\n  ([config fun] (compose-resolver original-resolvers config fun))\n  ([resolvers {:keys [inputs outputs priority] :as config} fun]\n   (when-let [errors (schemas/explain-add-resolver config)]\n     (throw (ex-info \"Input to add-resolver is invalid\" {:errors errors})))\n\n   (let [renamed-resolvers (rename-resolvers-that-output resolvers outputs)\n         renamed (map rename-resolve-out outputs)\n         inputs (into inputs renamed)\n         fun (fn [input]\n               (-> input\n                   (set/rename-keys (zipmap renamed outputs))\n                   fun))]\n     (-> renamed-resolvers\n         vec\n         (conj (pco/resolver (gensym \"custom-resolver-\")\n                             {::pco/input inputs\n                              ::pco/output outputs\n                              ::pco/priority (or priority 50)}\n                             (gen-resolver-fun fun outputs)))))))\n\n; (pco/defresolver default-namespaces [env {:keys [repl/kind]}]\n;   {::pco/output [:repl/namespace] ::pco/priority 0}\n;\n;   (prn :PRIORITY-0))\n;\n; (pco/defresolver namespace-from-editor [inputs]\n;   {::pco/input [{:editor/ns [:text/contents]}]\n;    ::pco/output [:repl/namespace]\n;    ::pco/priority 1}\n;\n;   (prn :PRIORITY-1)\n;   {:repl/namespace (-> inputs :editor/ns :text/contents symbol)})\n;\n; (pco/defresolver repl-kind-from-config [{:config/keys [eval-as]}]\n;   {::pco/output [:repl/kind] ::pco/priority 1}\n;\n;   {:repl/kind eval-as})\n;\n; (pco/defresolver seed-data [{:keys [seed]} _]\n;   {::pco/output (->> schemas/registry keys (remove #{:map}) vec)\n;    ::pco/priority 99}\n;   seed)\n;\n; #_\n; (-> [seed-data\n;      repl-kind-from-config\n;      default-namespaces namespace-from-editor]\n;     indexes/register\n;     (plugin/register (plugins/attribute-errors-plugin))\n;     (assoc :seed {:repl/kind :clj\n;                   :editor/ns {:text/contents \"some-ns\"}})\n;     (eql/process [:repl/namespace]))\n"]}