{"version":3,"sources":["com/wsscode/pathom3/interface/async/eql.cljc"],"mappings":"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","names":["com.wsscode.pathom3.interface.async.eql/process-ast*","env","ast","promesa.protocols/-bind","___56277__auto__","___56267__auto__","promesa.protocols/-promise","ent-tree*","cljs.core.get","com.wsscode.pathom3.entity-tree/create-entity","result","com.wsscode.pathom3.connect.runner.async/run-graph!","<>","com.wsscode.pathom3.format.eql/map-select-ast","com.wsscode.pathom3.interface.async.eql/process-ast","com.wsscode.pathom3.plugin.run_with_plugins","var_args","G__83967","com.wsscode.pathom3.interface.async.eql/process","js/Error","tx","cljs.core.assoc","edn-query-language.core/query->ast","entity","cljs.core/map?","com.wsscode.pathom3.entity-tree/with-entity","com.wsscode.pathom3.interface.async.eql/boundary-interface","env'","com.wsscode.pathom3.connect.indexes.register","com.wsscode.pathom3.connect.foreign/foreign-indexes-resolver","env-extension","input","p__83968","map__83969","cljs.core/--destructure-map","request","com.wsscode.pathom3.interface.eql/normalize-input","com.wsscode.pathom3.interface.eql/extend-env","entity'","or__4223__auto__","com.wsscode.pathom3.interface$.async.eql.process","com$wsscode$pathom3$interface$async$eql$boundary_interface_$_boundary_interface_internal"],"sourcesContent":["(ns com.wsscode.pathom3.interface.async.eql\n  (:require\n    [com.fulcrologic.guardrails.core :refer [<- => >def >defn >fdef ? |]]\n    [com.wsscode.pathom3.connect.foreign :as pcf]\n    [com.wsscode.pathom3.connect.indexes :as pci]\n    [com.wsscode.pathom3.connect.runner :as pcr]\n    [com.wsscode.pathom3.connect.runner.async :as pcra]\n    [com.wsscode.pathom3.entity-tree :as p.ent]\n    [com.wsscode.pathom3.format.eql :as pf.eql]\n    [com.wsscode.pathom3.interface.eql :as p.eql]\n    [com.wsscode.pathom3.plugin :as p.plugin]\n    [edn-query-language.core :as eql]\n    [promesa.core :as p]))\n\n(defn process-ast* [env ast]\n  (p/let [ent-tree* (get env ::p.ent/entity-tree* (p.ent/create-entity {}))\n          result    (pcra/run-graph! env ast ent-tree*)]\n    (as-> result <>\n      (pf.eql/map-select-ast env <> ast))))\n\n(>defn process-ast\n  [env ast]\n  [::pcra/env :edn-query-language.ast/node => p/promise?]\n  (p/let [env env]\n    (p.plugin/run-with-plugins env ::p.eql/wrap-process-ast\n      process-ast* env ast)))\n\n(>defn process\n  \"Evaluate EQL expression using async runner.\n\n  This interface allows you to request a specific data shape to Pathom and get\n  the response as a map with all data combined.\n\n  This is efficient for large queries, given Pathom can make a plan considering\n  the whole request at once (different from Smart Map, which always plans for one\n  attribute at a time).\n\n  At minimum you need to build an index to use this.\n\n      (p.eql/process (pci/register some-resolvers)\n        [:eql :request])\n\n  By default, processing will start with a blank entity tree. You can override this by\n  sending an entity tree as the second argument in the 3-arity version of this fn:\n\n      (p.eql/process (pci/register some-resolvers)\n        {:eql \\\"initial data\\\"}\n        [:eql :request])\n\n  For more options around processing check the docs on the connect runner.\"\n  ([env tx]\n   [::pcra/env ::eql/query => p/promise?]\n   (p/let [env env]\n     (process-ast (assoc env ::pcr/root-query tx) (eql/query->ast tx))))\n  ([env entity tx]\n   [::pcra/env map? ::eql/query => p/promise?]\n   (assert (map? entity) \"Entity data must be a map.\")\n   (p/let [env env]\n     (process-ast (-> env\n                      (assoc ::pcr/root-query tx)\n                      (p.ent/with-entity entity))\n                  (eql/query->ast tx)))))\n\n(>defn boundary-interface\n  \"Returns a function that wraps the environment. When exposing Pathom to some external\n  system, this is the recommended way to do it. The format here makes your API compatible\n  with Pathom Foreign process, which allows the integration of distributed environments.\n\n  When calling the remote interface the user can send a query or a map containing the\n  query and the initial entity data. This map is open and you can use as a way to extend\n  the API.\"\n  [env]\n  [::pcra/env => fn?]\n  (let [env' (p/let [env env] (pci/register env pcf/foreign-indexes-resolver))]\n    (fn boundary-interface-internal\n      ([env-extension input]\n       (p/let [{:pathom/keys [tx entity ast] :as request} (p.eql/normalize-input input)\n               ; ensure if it's a promise it gets resolved\n               env'          env'\n               env-extension env-extension\n               env'          (-> env'\n                                 (p.eql/extend-env env-extension)\n                                 (assoc ::source-request request))\n               entity'       (or entity {})]\n\n         (if ast\n           (process-ast (p.ent/with-entity env' entity') ast)\n           (process env' entity' tx))))\n      ([input]\n       (boundary-interface-internal nil input)))))\n"]}