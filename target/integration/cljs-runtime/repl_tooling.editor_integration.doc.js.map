{"version":3,"sources":["repl_tooling/editor_integration/doc.cljs"],"mappings":";AASA,uDAAA,vDAAOA,sHAAkBC,KAAKC;AAA9B,AACE,QAAA,+JAAA,0IAAA,mJAAA,lXACK,AAAA,8EAAKD,uDAAU,AAAA,mFAAOA,wDACtB,AAAA,2FAAWA,0DACX,AAAA,iFAAMA,OACN,qCAAA,nCAAM,AAACE,qBAAKD,cACV,iBAAAE,YAAA;IAAAA,gBAAA,sWAAAA,pVACQ,AAAA,mFAAOF,cAAO,CAAAE,UAAA,yNAAA,9MAAgB,AAACC,wGAAO,AAAA,mFAAOH;IADrDE,gBAAA,qWAAAA,nVAEQ,AAAA,iFAAMF,cAAO,CAAAE,cAAA,sNAAA,5MAAe,AAACC,wGAAO,AAAA,iFAAMH;AAFlD,AAAA,oBAGQ,AAAA,gFAAKA;AAAO,QAAAE,cAAA,SAAc,AAACC,wGAAO,AAAA,gFAAKH;;AAH/CE;;KADF;;AAMP,kDAAA,lDAAME,4GAAaC;AAAnB,AACE,OAAAC,wBAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,sFAAA,WAAQW,zEAAG,+CAAA,/CAACC;AAAZ,AAAA,OAAAZ,wBAAA,AAAAE,uBAAA,WAAAC,lBAC4CJ;AAD5C,AAAA,IAAAK,cAAAD;IAAAC,kBAAA,AAAAC,4BAAAD;kBAAA,AAAAE,4CAAAF,gBAAA,1EACgBS;mBADhB,AAAAP,4CAAAF,gBAAA,3EAC4BU;AAD5B,AAAA,OAAAd,wBAEa,iBAAAgB,YAAA;IAAAC,YAAA,mFAAA,iEAAA;AAAA,AAAA,8FAAAD,UAAAC,mCAAAD,UAAAC,7IAACJ,4CAAAA,iEAAAA;KAFd,WAEQE;AAFR,AAAA,OAAAf,6BAAA,WAAAO,hBAG0CQ;AAH1C,AAAA,IAAAP,cAAAD;IAAAC,kBAAA,AAAAH,4BAAAG;kBAAA,AAAAF,4CAAAE,gBAAA,1EAGuBU;WAHvB,AAAAZ,4CAAAE,gBAAA,nEAGmCW;AAHnC,AAAA,OAAAnB,4NAAA,WAIQoB,/MAAc,AAAA,4FAAaF,YAAY,AAAA,qFAAQC;AAJvD,AAAA,OAAAnB,wBAKU,iBAAAsB,YAAA;IAAAC,YAAA,2CAAA,qDAAA,yEAAA,5EAAkCZ,uEACSQ,4DACNC;AAFrC,AAAA,gGAAAE,UAAAC,oCAAAD,UAAAC,hJAACT,6CAAAA,kEAAAA;KALX,WAKQO;AALR,AAAA,OAAArB,wBAQY,iBAAAyB,YAAA;IAAAC,YAAkBX;IAAlBY,YAAA,mFAAA;AAAA,AAAA,8FAAAF,UAAAC,UAAAC,mCAAAF,UAAAC,UAAAC,jKAACd,4CAAAA,2EAAAA;KARb,WAQQW;AARR,AAAA,OAAAxB,wBASY,iBAAA6B,qBAAa,AAAA,6FAAaL;AAA1B,AAAA,oBAAAK;AAAA,UAAAA,NAASD;AAAT,AAAA,kDAAA,yDACW,KAAAE,wCAAsBF;;AADjC,kDAAA,uDAEU,KAAAG,0CAAA;;KAXtB,WASQH;AATR,AAAA,OAAA5B,wBAAA,KAAA,WAAAS;AAAA,AAAA,OAAAC,2BAYE,iBAAAsB,YAAA;IAAAC,YAAA,2CAAA,qDAAA,oDAAA,KAAA,5DAA4BtB,qHAEI,yDAAA,yDAAA,uDAAA,zKAACuB,qDAAMN,+KAES,wGAAA,4IAAI,AAAA,uFAASA,3HACT,iBAAAO,zHACAtC,xGACAA;AAFA,AAAA,oBAAAsC;AAAAA;;AAAI,OAAA,qFAAQP;;uBALhE,yEAAA,LAQqCT,4DACNC;AAT/B,AAAA,gGAAAY,UAAAC,oCAAAD,UAAAC,hJAACnB,6CAAAA,kEAAAA","names":["repl-tooling.editor-integration.doc/translate-to-doc","meta","spec?","cljs.core/map?","G__146602","cljs.core.pr_str","repl-tooling.editor-integration.doc/doc-for-var","state","promesa.protocols/-bind","___31820__auto__","cljs.core/deref","p__146609","map__146610","cljs.core/--destructure-map","cljs.core.get","p__146616","map__146617","___31810__auto__","promesa.protocols/-promise","id","cljs.core.gensym","run-feature","run-callback","seed","G__146613","G__146614","current-var","data","current-range","_","G__146618","G__146619","res","G__146622","G__146623","G__146624","doc","temp__5751__auto__","repl-tooling.editor-helpers/Interactive","repl-tooling.editor-helpers/LiteralRender","G__146625","G__146626","cljs.core.assoc","or__4223__auto__"],"sourcesContent":["(ns repl-tooling.editor-integration.doc\n  (:require [repl-tooling.editor-helpers :as helpers]\n            [repl-tooling.editor-integration.commands :as cmds]\n            [repl-tooling.repl-client.clj-helper :refer [contents-for-fn]]\n            [promesa.core :as p]\n            [repl-tooling.eval :as eval]\n            [repl-tooling.editor-integration.evaluation :as e-eval]\n            [repl-tooling.commands-to-repl.pathom :as pathom]))\n\n(defn- translate-to-doc [meta spec?]\n  (str \"-------------------------\\n\"\n       (:ns meta) \"/\" (:name meta) \"\\n\"\n       (:arglists meta) \"\\n  \"\n       (:doc meta)\n       (when (map? spec?)\n         (cond-> \"\\nSpec\\n\"\n                 (:args spec?) (str \"  args: \" (pr-str (:args spec?)) \"\\n\")\n                 (:ret spec?) (str \"  ret: \" (pr-str (:ret spec?)) \"\\n\")\n                 (:fn spec?) (str \"  fn: \" (pr-str (:fn spec?)))))))\n\n(defn doc-for-var [state]\n  (p/let [id (gensym \"doc-for-var\")\n          {:keys [run-feature run-callback]} @state\n          seed (run-feature :eql [:editor/data :text/current-var])\n          {:editor/keys [current-var data]} seed\n          current-range (:text/range current-var (:range data))\n          _ (run-callback :on-start-eval {:id id\n                                          :editor-data data\n                                          :range current-range})\n          res (run-feature :eql seed [:render/doc])\n          doc (if-let [doc (:render/doc res)]\n                {:result (helpers/Interactive. doc)}\n                {:error (helpers/LiteralRender. \"Can't find doc for this variable\")})]\n    (run-callback :on-eval {:id id\n                            :repl nil\n                            :result (assoc doc\n                                           :parsed? true\n                                           :as-text (-> (:result doc)\n                                                        (or (:error doc))\n                                                        pr-str\n                                                        pr-str))\n                            :editor-data data\n                            :range current-range})))\n"]}