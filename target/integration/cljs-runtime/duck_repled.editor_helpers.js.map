{"version":3,"sources":["duck_repled/editor_helpers.cljc"],"mappings":"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","names":["duck-repled.editor-helpers/simple-read","str","cljs.tools.reader.read_string","_","res","duck-repled.editor-helpers/parse-reader","reader","e59897","parsed","rewrite-clj.parser/parse","rewrite-clj.node/whitespace-or-comment?","rewrite-clj.node.uneval/UnevalNode","cljs.core.remove","cljs.core/first","cljs.tools.reader.reader-types/read-char","duck-repled.editor-helpers/top-blocks","code","cljs.tools.reader.reader_types.indexing_push_back_reader","sofar","G__59904","cljs.core._EQ_","map__59906","cljs.core/--destructure-map","cljs.core.get","as-str","rewrite-clj.node/string","row","col","end-row","end-col","cljs.core/meta","cljs.core.conj","p__59917","vec__59918","cljs.core.nth","duck-repled.editor-helpers/ns-range-for","top-levels","p1__59911#","before-selection?","p__59925","vec__59926","vec__59929","vec__59932","vec__59935","erow","ecol","is-ns?","and__4221__auto__","cljs.core/list?","G__59939","read","p1__59912#","cljs.core/memoize","e59942","find-ns-for","top-blocks","p1__59913#","cljs.core.map","cljs.core.update","p1__59914#","cljs.core.filter","cljs.core/peek","p1__59915#","cljs.core/second","or__4223__auto__","cljs.core.take_while","cljs.core/reverse","cljs.core.drop_while","duck-repled.editor-helpers/current-var*","zipped","node","rewrite_clj.zip.find_last_by_pos","rewrite-clj.zip/node","map__59951","duck-repled.editor-helpers/zip-from-code","nodes","cljs.core.repeatedly","e59958","rewrite-clj.node/whitespace-node","cljs.core/identity","cljs.core.doall","all-nodes","cljs.core/with-meta","rewrite-clj.node/forms-node","rewrite_clj.zip.base.edn","p__59962","vec__59964","duck-repled.editor-helpers/current-var","p__59971","p__59972","map__59973","map__59974","duck-repled.editor-helpers/in-range?","r","c","p__59982","vec__59984","duck-repled.editor-helpers/top-block-for","tops","in-range?","p__59988","vec__59989","vec__59992","vec__59995","vec__59998","b-row","b-col","e-row","e-col","duck-repled.editor-helpers/find-inners-by-pos","zloc","pos","cljs.core/iterate","rewrite-clj.zip/next","cljs.core/complement","rewrite-clj.zip.move/end?","p1__60005#","duck-repled.editor-helpers/reader-tag?","rewrite-clj.node.reader-macro/ReaderMacroNode","rewrite-clj.node.fn/FnNode","rewrite-clj.node.quote/QuoteNode","rewrite-clj.node.reader-macro/DerefNode","duck-repled.editor-helpers/filter-forms","valid-tag?","cljs.core.comp","cljs.core.partition_all","p__60010","vec__60011","fst","snd","p__60016","vec__60017","duck-repled.editor-helpers/block-for","map__60020","node-block","G__60022","p__60028","vec__60029","vec__60032","vec__60035","duck-repled.editor-helpers/text-in-range","text","row1","col1","row2","col2","lines","clojure.string/split-lines","rows-offset","x__4309__auto__","y__4310__auto__","cljs.core/count","cljs.core.subvec","p1__60024#","clojure.string.join","cljs.core.drop","p1__60025#","cljs.core.take","duck-repled.editor-helpers/read-file","filename","js/shadow.js.shim.module$fs.readFileSync"],"sourcesContent":["(ns duck-repled.editor-helpers\n  (:require [clojure.string :as str]\n            ; [cljs.reader :as edn]\n            [clojure.tools.reader :as reader]\n            [rewrite-clj.zip.move :as move]\n            [rewrite-clj.zip :as zip]\n            [rewrite-clj.zip.base :as zip-base]\n            [rewrite-clj.node :as node]\n            [clojure.tools.reader.reader-types :as r]\n            [rewrite-clj.parser :as parser]\n\n            #?(:cljs [rewrite-clj.node.uneval :refer [UnevalNode]])\n            #?(:cljs [rewrite-clj.node.reader-macro :refer [ReaderMacroNode DerefNode]])\n            #?(:cljs [rewrite-clj.node.fn :refer [FnNode]])\n            #?(:cljs [rewrite-clj.node.quote :refer [QuoteNode]])\n            #?(:cljs [\"fs\" :refer [readFileSync]]))\n  #?(:clj (:import [rewrite_clj.node.uneval UnevalNode]\n                   [rewrite_clj.node.reader_macro ReaderMacroNode DerefNode]\n                   [rewrite_clj.node.fn FnNode]\n                   [rewrite_clj.node.quote QuoteNode])))\n\n(defn- simple-read [str]\n  (reader/read-string {:default (fn [_ res] res) :read-cond :allow} str))\n\n(defn- parse-reader [reader]\n  (try\n    (let [parsed (parser/parse reader)]\n      (when parsed\n        (cond\n          (node/whitespace-or-comment? parsed) :whitespace\n\n          (instance? UnevalNode parsed)\n          (->> parsed :children (remove node/whitespace-or-comment?) first)\n\n          :else parsed)))\n    (catch #?(:clj Throwable :cljs :default) _\n      (r/read-char reader)\n      :whitespace)))\n\n(defn top-blocks [code]\n  (let [reader (r/indexing-push-back-reader code)]\n    (loop [sofar []]\n      (let [parsed (parse-reader reader)]\n        (case parsed\n          :whitespace (recur sofar)\n          nil sofar\n          (let [as-str (node/string parsed)\n                {:keys [row col end-row end-col]} (meta parsed)]\n            (recur (conj sofar [[[(dec row) (dec col)]\n                                 [(dec end-row) (- end-col 2)]]\n                                as-str]))))))))\n\n(defn ns-range-for\n  \"Gets the current NS range (and ns name) for the current code, considering\nthat the cursor is in row and col (0-based)\"\n  [top-levels [row col]]\n  (let [before-selection? (fn [[[[_ _] [erow ecol]] _]]\n                            (or (and (= erow row) (<= col ecol))\n                                (< erow row)))\n        is-ns? #(and (list? %) (some-> % first (= 'ns)))\n        read (memoize #(try\n                         (simple-read %)\n                         (catch #?(:clj Throwable :cljs :default) _ nil)))\n        find-ns-for (fn [top-blocks] (->> top-blocks\n                                          (map #(update % 1 read))\n                                          (filter #(-> % peek is-ns?))\n                                          (map #(update % 1 second))\n                                          first))]\n    (or (->> top-levels\n             (take-while before-selection?)\n             reverse\n             find-ns-for)\n        (->> top-levels\n             (drop-while before-selection?)\n             find-ns-for))))\n\n(defn- current-var* [zipped row col]\n  (let [node (-> zipped\n                 (zip/find-last-by-pos {:row (inc row) :col (inc col)})\n                 zip/node)]\n    (when (and node (-> node node/whitespace-or-comment? not))\n      (let [{:keys [row col end-row end-col]} (meta node)]\n        [[[(dec row) (dec col)] [(dec end-row) (- end-col 2)]]\n         (node/string node)]))))\n\n(defn- zip-from-code [code]\n  (let [reader (r/indexing-push-back-reader code)\n        nodes (->> (repeatedly #(try\n                                  (parser/parse reader)\n                                  (catch #?(:clj Throwable :cljs :default) _\n                                    (r/read-char reader)\n                                    (node/whitespace-node \" \"))))\n                   (take-while identity)\n                   (doall))\n        all-nodes (with-meta\n                    (node/forms-node nodes)\n                    (meta (first nodes)))]\n    (-> all-nodes (zip-base/edn {:track-position? true}))))\n\n(defn current-var [code [row col]]\n  (let [zipped (zip-from-code code)]\n    (or (current-var* zipped row col)\n        (current-var* zipped row (dec col)))))\n\n\n(defn in-range? [{:keys [row col end-row end-col]} {r :row c :col}]\n  (and (>= r row)\n       (<= r end-row)\n       (if (= r row) (>= c col) true)\n       (if (= r end-row) (<= c end-col) true)))\n\n(defn top-block-for\n  \"Gets the top-level from the code (a string) to the current row and col (0-based)\"\n  [tops [row col]]\n  (let [in-range? (fn [[[[b-row b-col] [e-row e-col]]]]\n                    (or (and (<= b-row row) (< row e-row))\n                        (and (<= b-row row e-row)\n                             (or (<= b-col col e-col)\n                                 (<= b-col (dec col) e-col)))))]\n    (->> tops (filter in-range?) first)))\n\n(defn- find-inners-by-pos\n  \"Find last node (if more than one node) that is in range of pos and\n  satisfying the given predicate depth first from initial zipper\n  location.\"\n  [zloc pos]\n  (->> zloc\n       (iterate zip/next)\n       (take-while identity)\n       (take-while (complement move/end?))\n       (filter #(in-range? (-> % zip/node meta) pos))))\n\n(defn- reader-tag? [node]\n  (when node\n    (or (instance? ReaderMacroNode node)\n        (instance? FnNode node)\n        (instance? QuoteNode node)\n        (instance? DerefNode node))))\n\n(defn- filter-forms [nodes]\n  (when nodes\n    (let [valid-tag? (comp #{:vector :list :map :set :quote} :tag)]\n      (->> nodes\n           (map zip/node)\n           (partition-all 2 1)\n           (map (fn [[fst snd]]\n                  (cond\n                    (reader-tag? fst) fst\n                    (-> fst :tag (= :list) (and snd (reader-tag? snd))) snd\n                    (valid-tag? fst) fst)))\n           (filter identity)\n           first))))\n\n(defn block-for\n  \"Gets the current block from the code (a string) to the current row and col (0-based)\"\n  [code [row col]]\n  (let [node-block (-> code\n                       zip-from-code\n                       (find-inners-by-pos {:row (inc row) :col (inc col)})\n                       reverse\n                       filter-forms)\n        {:keys [row col end-row end-col]} (some-> node-block meta)]\n    (when node-block\n      [[[(dec row) (dec col)] [(dec end-row) (- end-col 2)]]\n       (node/string node-block)])))\n\n(defn text-in-range [text [[row1 col1] [row2 col2]]]\n  (let [lines (str/split-lines text)\n        rows-offset (- (min row2 (count lines)) row1)]\n    (-> lines\n        (subvec row1 (min (count lines) (inc row2)))\n        (update 0 #(str/join \"\" (drop col1 %)))\n        (update rows-offset #(str/join \"\" (take (inc (if (zero? rows-offset)\n                                                       (- col2 col1)\n                                                       col2))\n                                                %)))\n        (->> (str/join \"\\n\")))))\n\n(defn read-file [filename]\n  #?(:clj (slurp filename)\n     :cljs (str (readFileSync filename))))\n"]}