{"version":3,"sources":["repl_tooling/commands_to_repl/all_cmds.cljs"],"mappings":"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","names":["repl-tooling.commands-to-repl.all-cmds/disconnect!","repl-tooling.integrations.repls/disconnect!","repl-tooling.commands-to-repl.all-cmds/handle-disconnect!","state","cljs.core/reset!","p__146812","map__146813","cljs.core/--destructure-map","cljs.core.get","repl-tooling.commands-to-repl.all-cmds/eval-range","contents","range","data","opts","function","vec__146815","cljs.core.nth","vec__146818","start","eval-range","code","vec__146823","_","namespace","repl-tooling.editor-helpers/ns-range-for","cljs.core/first","repl-tooling.editor-integration.evaluation/eval-cmd","repl-tooling.commands-to-repl.all-cmds/eval-block","promesa.protocols/-bind","___31820__auto__","___31810__auto__","promesa.protocols/-promise","d","repl-tooling.editor-helpers/block-for","repl-tooling.commands-to-repl.all-cmds/eval-top-block","repl-tooling.editor-helpers/top-block-for","repl-tooling.commands-to-repl.all-cmds/eval-selection","p__146838","map__146840","repl-tooling.editor-helpers/text-in-range","p__146845","map__146847","repl-tooling.commands-to-repl.all-cmds/all","editor-data","repl-kind","orchard-cmds","repl-tooling.commands-to-repl.orchard/cmds","config-file","cljs.core/deref","G__146850","repl-tooling.editor-integration.evaluation/run-tests-in-ns!","repl-tooling.editor-integration.evaluation/run-test-at-cursor!","repl-tooling.editor-integration.evaluation/source-for-var!","repl-tooling.editor-integration.doc/doc-for-var","repl-tooling.editor-integration.loaders/load-file","repl-tooling.editor-integration.definition/goto-current-var","cljs.core.assoc","repl_tooling.editor_integration.commands.run_callback_BANG_","cljs.core._EQ_","repl-tooling.eval/break","repl-tooling.editor-integration.embedded-clojurescript/connect!","cljs.core.merge","repl-tooling.commands-to-repl.all-cmds/fqn-for-var","editor-state","p__146860","map__146861","p__146866","vec__146868","filename","repl-tooling.editor-integration.commands/run-callback!","var","G__146863","G__146864","repl-tooling.editor-helpers/current-var","res","repl_tooling.editor_integration.commands.run_feature_BANG_","repl-tooling.commands-to-repl.all-cmds/static-commands","state-ish","G__146876"],"sourcesContent":["(ns repl-tooling.commands-to-repl.all-cmds\n  (:require [promesa.core :as p]\n            [repl-tooling.editor-helpers :as helpers]\n            [repl-tooling.commands-to-repl.orchard :as orchard]\n            [repl-tooling.eval :as eval]\n            [repl-tooling.integrations.repls :as repls]\n            [repl-tooling.editor-integration.loaders :as loaders]\n            [repl-tooling.editor-integration.evaluation :as e-eval]\n            [repl-tooling.editor-integration.embedded-clojurescript :as embedded]\n            [repl-tooling.editor-integration.definition :as definition]\n            [repl-tooling.editor-integration.doc :as doc]\n            [repl-tooling.editor-integration.commands :as cmds]))\n\n(defn disconnect!\n  \"Disconnect all REPLs. Indempotent.\"\n  []\n  (repls/disconnect! :clj-eval)\n  (repls/disconnect! :clj-aux)\n  (repls/disconnect! :cljs-aux)\n  (repls/disconnect! :cljs-eval))\n\n(defn handle-disconnect!\n  \"Disconnect all REPLs. Indempotent.\"\n  [state]\n  (disconnect!)\n  (reset! state nil))\n\n(defn eval-range [state {:keys [contents range] :as data} opts function]\n  (let [[start] range\n        [eval-range code] (function contents start)]\n    (when eval-range\n      (let [[_ namespace] (helpers/ns-range-for contents (first eval-range))]\n        (e-eval/eval-cmd state code namespace eval-range data opts)))))\n\n(defn- eval-block [state data]\n  (p/let [d data]\n    (eval-range state d {} helpers/block-for)))\n\n(defn- eval-top-block [state data]\n  (p/let [d data]\n    (eval-range state d {} helpers/top-block-for)))\n\n(defn- eval-selection [state data]\n  (p/let [{:keys [range] :as d} data]\n    (eval-range state d {} (fn [contents _]\n                             [range (helpers/text-in-range contents range)]))))\n\n(defn all [state {:keys [editor-data] :as opts} repl-kind]\n  (p/let [orchard-cmds (orchard/cmds state)\n          config-file (-> @state :editor/callbacks :config-file-path)]\n    (cond->\n     {:evaluate-top-block {:name \"Evaluate Top Block\"\n                           :description \"Evaluates top block block on current editor's selection\"\n                           :command #(eval-top-block state (editor-data))}\n      :evaluate-block {:name \"Evaluate Block\"\n                       :description \"Evaluates current block on editor's selection\"\n                       :command #(eval-block state (editor-data))}\n      :evaluate-selection {:name \"Evaluate Selection\"\n                           :description \"Evaluates current editor's selection\"\n                           :command #(eval-selection state (editor-data))}\n      :run-tests-in-ns {:name \"Run tests in NS\"\n                        :description \"Run all tests on the current namespace\"\n                        :command #(e-eval/run-tests-in-ns! state)}\n      :run-test-for-var {:name \"Run test for current Var\"\n                         :description \"Run current var as a testcase\"\n                         :command #(p/let [data (editor-data)]\n                                     (e-eval/run-test-at-cursor! state data))}\n      :source-for-var {:name \"Source for Var\"\n                       :description \"Gets the source of the current var\"\n                       :command #(e-eval/source-for-var! state)}\n      :disconnect {:name \"Disconnect REPLs\"\n                   :description \"Disconnect all current connected REPLs\"\n                   :command disconnect!}\n      :doc-for-var {:name \"Documentation for current var\"\n                    :description \"Shows documentation for the current var under cursor\"\n                    :command #(doc/doc-for-var state)}\n      ; :spec-for-var {:name \"Spec for current var\"\n      ;                :description \"Shows spec for the current var under cursor if it exists\"\n      ;                :command (fn [] (ensure-data (editor-data)\n      ;                                             #(doc/specs-for-var % opts state)))}\n      :load-file {:name \"Load File\"\n                  :description \"Loads current file on a Clojure REPL\"\n                  :command #(p/let [data (editor-data)]\n                              (loaders/load-file data @state))}\n      :go-to-var-definition {:name \"Goto VAR definition\"\n                             :description \"Goes to definition of the current variable\"\n                             :command #(definition/goto-current-var state)}}\n\n     config-file\n     (assoc :open-config {:name \"Open Config File\"\n                          :description \"Opens the current config file\"\n                          :command #(cmds/run-callback! state :open-editor\n                                                        {:file-name config-file\n                                                          :line 0})})\n\n     (= :clj repl-kind)\n     (assoc\n      :break-evaluation {:name \"Break Evaluation\"\n                         :description \"Break current running eval\"\n                         :command #(eval/break (:clj/repl @state) (:clj/aux @state))}\n      :connect-embedded {:name \"Connect Embedded ClojureScript REPL\"\n                         :description \"Connects to a ClojureScript REPL inside a Clojure one\"\n                         :command #(embedded/connect! state opts true)\n                         :old-command #(embedded/connect! state opts false)})\n\n     :always (merge orchard-cmds))))\n\n(defn fqn-for-var [editor-state]\n  (p/let [{:keys [contents range filename]} (cmds/run-callback! editor-state :editor-data)\n          [range var] (helpers/current-var contents (first range))\n          res (cmds/run-feature! editor-state :eval\n                                 {:text (str \"`\" var)\n                                  :ignore true :auto-detect true :aux true})]\n    (assoc res :range range)))\n\n(defn static-commands [state-ish]\n  (let [config-file (-> @state-ish :editor/callbacks :config-file-path)]\n    (cond->\n     {:doc-for-var {:name \"Documentation for current var\"\n                    :description \"Shows documentation for the current var under cursor\"\n                    :command #(doc/doc-for-var state-ish)}\n      :go-to-var-definition {:name \"Goto VAR definition\"\n                             :description \"Goes to definition of the current variable\"\n                             :command #(definition/goto-current-var state-ish)}})))\n\n     ; config-file\n     ; (assoc :open-config {:name \"Open Config File\"\n     ;                      :description \"Opens the current config file\"\n     ;                      :command #(cmds/run-callback! state :open-editor\n     ;                                                    {:file-name config-file})}))))\n"]}