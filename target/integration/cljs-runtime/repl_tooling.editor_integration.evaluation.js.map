{"version":3,"sources":["repl_tooling/editor_integration/evaluation.cljs"],"mappings":"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","names":["repl-tooling.editor-integration.evaluation/get-code","editor-state","kind","promesa.protocols/-bind","___31820__auto__","___31810__auto__","promesa.protocols/-promise","data","repl-tooling.editor-integration.commands/run-callback!","temp__5753__auto__","map__144034","cljs.core/--destructure-map","cljs.core.get","contents","range","vec__144044","cljs.core.nth","text","G__144035","cljs.core/Keyword","js/Error","repl-tooling.editor-helpers/top-block-for","cljs.core/first","G__144036","G__144037","repl-tooling.editor-helpers/block-for","G__144039","G__144040","repl-tooling.editor-helpers/current-var","repl-tooling.editor-helpers/text-in-range","repl-tooling.editor-helpers/ns-range-for","repl-tooling.editor-integration.evaluation/need-cljs?","config","filename","or__4223__auto__","cljs.core._EQ_","and__4221__auto__","G__144053","fexpr__144051","clojure.string/ends-with?","repl-tooling.editor-integration.evaluation/treat-error","notify!","cljs?","clj-connected?","msg","G__144057","ufv__","schema.utils/use-fn-validation","output-schema144061","input-schema144062","schema.core/one","schema.core/Any","input-checker144063","cljs.core/Delay","schema.core/checker","output-checker144064","ret__40409__auto__","validate__38124__auto__","cljs.core/deref","args__38125__auto__","G__144065","G__144066","G__144067","schema.core/fn-validator","G__144078","G__144079","G__144080","G__144081","G__144082","fexpr__144083","error__38126__auto__","cljs.core.ex_info","schema.utils.format_STAR_","cljs.core.pr_str","o__38127__auto__","state","aux?","G__144091","G__144092","G__144093","G__144094","G__144095","fexpr__144097","schema.utils/declare-class-schema!","schema.utils/fn-schema-bearer","schema.core/->FnSchema","repl-tooling.editor-integration.evaluation/repl-for","schema.core/maybe","schema.core/Str","repl-tooling.editor-integration.schemas/AuxOptions","repl","cljs.core.not_EQ_","p1__144060#","repl_tooling.editor_integration.commands.run_callback_BANG_","output-schema144102","input-schema144104","input-checker144105","output-checker144106","G__144107","G__144108","G__144109","G__144110","G__144111","G__144112","G__144117","G__144118","G__144119","G__144120","G__144121","fexpr__144122","code","namespace","editor-data","opts","G__144131","G__144132","G__144133","G__144134","G__144135","fexpr__144136","repl-tooling.editor-integration.evaluation/eval-cmd","repl-tooling.editor-integration.schemas/EditorState","repl-tooling.editor-integration.schemas/Range","repl-tooling.editor-integration.schemas/EditorData","repl-tooling.editor-integration.schemas/EvalOpts","map__144123","vec__144124","vec__144127","prom","promesa.core/deferred","on-start-eval","on-eval","row","col","id","cljs.core.gensym","eval-data","p1__144100#","repl-tooling.eval/evaluate","cljs.core.merge","parsed","repl-tooling.editor-helpers/parse-result","G__144130","cljs.core.assoc","promesa.core.resolve_BANG_","cljs.core/select-keys","repl-tooling.editor-integration.evaluation/auto-opts","p__144141","map__144142","p__144164","vec__144166","vec__144169","p__144174","vec__144175","_","ns","repl-tooling.editor-integration.evaluation/eval-with-promise","eval-opts","auto-eval-opts","temp__5751__auto__","repl_tooling.eval.eval","js/Promise","fail","p__144188","map__144189","repl-tooling.editor-integration.evaluation/format-test-result","test","pass","error","repl-tooling.editor-integration.evaluation/run-tests-in-ns!","p__144193","map__144194","result","repl_tooling.editor_integration.commands.run_feature_BANG_","p__144196","map__144197","repl-tooling.editor-integration.evaluation/run-test-at-cursor!","vec__144199","current-var","G__144206","G__144207","___31809__auto__","repl-tooling.editor-integration.evaluation/source!","eql","on-stdout","source","G__144211","repl-tooling.editor-helpers/with-out","req","G__144215","G__144216","G__144217","G__144218","repl-tooling.editor-integration.evaluation/source-for-var!","promesa.core.catch$"],"sourcesContent":["(ns repl-tooling.editor-integration.evaluation\n  (:require [clojure.string :as str]\n            [promesa.core :as p]\n            [repl-tooling.editor-helpers :as helpers]\n            [repl-tooling.eval :as eval]\n            [repl-tooling.editor-integration.schemas :as schemas]\n            [repl-tooling.editor-integration.commands :as cmds]\n            [schema.core :as s]))\n\n(defn get-code [editor-state kind]\n  (p/let [data (cmds/run-callback! editor-state :editor-data)]\n    (when-let [{:keys [contents range]} data]\n      (when-let [[range text] (case kind\n                                :top-block (helpers/top-block-for contents (first range))\n                                :block (helpers/block-for contents (first range))\n                                :var (helpers/current-var contents (first range))\n                                :selection [range (helpers/text-in-range contents range)]\n                                :ns (helpers/ns-range-for contents (first range)))]\n        {:text text :range range}))))\n\n(defn need-cljs? [config filename]\n  (or\n   (-> config :eval-mode (= :cljs))\n   (and (-> config :eval-mode #{:prefer-clj :prefer-cljs})\n        (str/ends-with? (str filename) \".cljs\"))\n   (and (-> config :eval-mode (= :prefer-cljs))\n        (or (str/ends-with? (str filename) \".cljs\")\n            (str/ends-with? (str filename) \".cljc\")\n            (str/ends-with? (str filename) \".cljx\")))))\n\n(defn- treat-error [notify! cljs? clj-connected?]\n  (let [msg (cond\n              (and cljs? clj-connected?)\n              (str \"REPL not connected for ClojureScript.\\n\\n\"\n                   \"You can connect a REPL using 'Connect Socket REPL' \"\n                   \"command, or 'Connect Embedded' command\")\n\n              cljs?\n              (str \"REPL not connected for ClojureScript.\\n\\n\"\n                   \"You can connect a REPL using 'Connect Socket REPL' \"\n                   \"command, or by connecting a Clojure REPL and running \"\n                   \"'Connect Embedded' command\")\n\n              :else\n              (str \"REPL not connected for Clojure\\n\\n\"\n                   \"You can connect a REPL by running 'Connect Socket REPL' command\"))]\n    (notify! {:type :error\n              :title \"REPL not connected\"\n              :message msg})\n    nil))\n\n(s/defn repl-for :- s/Any\n  [state filename :- (s/maybe s/Str), aux? :- schemas/AuxOptions]\n  (let [cljs? (need-cljs? (cmds/run-callback! state :get-config) filename)\n        repl (cond\n               (and cljs? (not= aux? :always)) (:cljs/repl @state)\n               aux? (:clj/aux @state)\n               :else (:clj/repl @state))]\n    (if (nil? repl)\n      (treat-error #(cmds/run-callback! state :notify %) cljs? (:clj/repl @state))\n      repl)))\n\n(s/defn eval-cmd [state :- schemas/EditorState\n                  code :- s/Str\n                  namespace\n                  range :- schemas/Range\n                  editor-data :- schemas/EditorData\n                  opts :- schemas/EvalOpts]\n  (when code\n    (let [prom (p/deferred)\n          filename (:filename editor-data)\n          {:keys [on-start-eval on-eval]} (:editor/callbacks @state)\n          [[row col]] range\n          ;; TODO: Remove UNREPL and always evaluate on primary\n          repl (repl-for state filename (-> opts :pass :aux))\n          id (gensym)\n          eval-data {:id id\n                     :editor-data editor-data\n                     :range range}]\n      (when repl\n        (and on-start-eval (on-start-eval eval-data))\n        (eval/evaluate repl\n                       code\n                       (merge {:filename filename\n                               :id id\n                               :row (inc row)\n                               :col (inc col)\n                               :namespace namespace}\n                              opts)\n                       #(when (and on-eval @state)\n                          (let [parsed (helpers/parse-result %)]\n                            (on-eval (assoc eval-data\n                                            :repl repl\n                                            :result parsed))\n                            (p/resolve! prom (select-keys parsed [:result :error]))))))\n      (when-not repl (p/resolve! prom nil))\n      prom)))\n\n(defn- auto-opts [editor-data]\n  (p/let [{:keys [filename range contents]} (editor-data)\n          [[row col]] range\n          [_ ns] (helpers/ns-range-for contents (first range))]\n    {:filename filename\n     :namespace ns\n     :row row\n     :col col}))\n\n(defn eval-with-promise\n  \"Evaluates the current code and evaluation options on the current REPL.\nAccepts an extra argument on `eval-opts` that's :aux - if true, evaluates\non the 'auxiliary' REPL instead of primary. On Clojure, this means that\nthe code will use UNREPL but will not use ellisions on infinite sequences, etc.\n\nPlease notice that because the REPL is auto-detected, `:filename` is required.\nOtherwise, ClojureScript REPL will never be used! You can also pass `:auto-detect true`\nto use the current editor state to find all info about current filename, namespace,\nand row/col.\n\nWill return a 'promise' that is resolved to the eval result, or failed if the\neval result is an error. It will also return a fail, with nil, if there's no\nREPL available\"\n  [state code eval-opts]\n  (p/let [editor-data (-> @state :editor/callbacks :editor-data)\n          auto-eval-opts (when (:auto-detect eval-opts)\n                           (auto-opts editor-data))\n          eval-opts (merge auto-eval-opts eval-opts)]\n    (if-let [repl (repl-for state (:filename eval-opts) (:aux eval-opts))]\n      (eval/eval repl code eval-opts)\n      (js/Promise. (fn [_ fail] (fail nil))))))\n\n(defn- format-test-result [{:keys [test pass fail error]}]\n  (str \"Ran \" test \" test\"\n       (when-not (= 1 test) \"s\")\n       (when-not (zero? pass)\n         (str \", \" pass \" assertion\"\n              (when-not (= 1 pass) \"s\")\n              \" passed\"))\n       (when-not (zero? fail)\n         (str \", \" fail \" failed\"))\n       (when-not (zero? error)\n         (str \", \" error \" errored\"))\n       \".\"))\n\n(defn run-tests-in-ns! [state]\n  (p/let [{:keys [result]} (cmds/run-feature! state :eval\n                                              {:auto-detect true :text \"(clojure.test/run-tests)\"})]\n    (cmds/run-callback! state :notify\n                        {:type (if (= 0 (:fail result) (:error result))\n                                 :info\n                                 :warning)\n                         :title \"(clojure.test/run-tests)\"\n                         :message (format-test-result result)})))\n\n(defn run-test-at-cursor! [state {:keys [range contents]}]\n  (let [[_ current-var] (helpers/current-var contents (first range))]\n    (p/do!\n     (cmds/run-feature! state :eval\n                        {:auto-detect true\n                         :text (str \"(clojure.test/test-vars [#'\" current-var \"])\")})\n     (cmds/run-callback! state :notify {:type :info\n                                        :title (str \"Ran test: \" current-var)\n                                        :message \"See REPL for any failures\"}))))\n\n(defn- source! [state]\n  (p/let [eql (-> @state :editor/features :eql)\n          on-stdout (-> @state :editor/callbacks :on-stdout)\n          source (eql [{:editor/contents [{:text/current-var [:text/contents\n                                                              :definition/source]}]}])]\n    (if-let [source (-> source\n                        :editor/contents\n                        :text/current-var\n                        :definition/source\n                        :text/contents)]\n      (on-stdout source)\n      (helpers/with-out\n        #(p/let [req (eql {:text/contents (str \"(do (clojure.core/require 'clojure.repl)\"\n                                               \" #'clojure.repl/source)\")}\n                          [:repl/result])]\n          (if (:repl/result req)\n            (eql (-> source :editor/contents :text/current-var)\n                 ['(:repl/result\n                    {:repl/template\n                     (clojure.repl/source :repl/code)})])\n            (throw \"Error\")))))))\n\n(defn source-for-var! [state]\n  (p/catch (source! state)\n           #(cmds/run-callback! state\n                                :notify\n                                {:type :error\n                                 :title (str \"Source for Var \"\n                                             \"not supported for \"\n                                             (-> @state :repl/info :kind-name))})))\n"]}