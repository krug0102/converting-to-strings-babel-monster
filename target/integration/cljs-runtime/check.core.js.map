{"version":3,"sources":["check/core.cljc"],"mappings":"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","names":["js/check","js/check.core","js/check.core.assert-arrow","method-table__4712__auto__","cljs.core.atom","prefer-table__4713__auto__","method-cache__4714__auto__","cached-hierarchy__4715__auto__","hierarchy__4716__auto__","cljs.core.get","fexpr__56422","cljs.core/MultiFn","cljs.core.symbol","check.core/assert-arrow","cljs?","left","arrow","right","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/vec","cljs.core.apply","cljs.core/array-map","_","check.core/normalize-error","error","stacktrace","or__4223__auto__","js/Error","cljs.core.pr_str","check.core/prepare-symbol","ex","check.core/prepare-coll","vec__56488","cljs.core.nth","fun","cljs.core/coll?","cljs.core/Symbol","cljs.core/first","check.core/custom-matchers","matcher"],"sourcesContent":["(ns check.core\n  #?(:cljs (:require-macros [check.core]))\n  (:require [clojure.string :as str]\n            [expectations :refer [compare-expr ->failure-message in]]\n            [clojure.test :refer [do-report]]\n            #?(:cljs [cljs.test])\n            [net.cgrand.macrovich :as macros]\n            [matcher-combinators.core :as c]\n            [matcher-combinators.printer :as p]\n            [matcher-combinators.test]))\n\n(defmulti assert-arrow (fn [cljs? left arrow right] arrow))\n\n(defmethod assert-arrow '=> [_ left _ right]\n  `(let [lft# ~left\n         rgt# ~right\n         qleft# (quote ~left)\n         qright# (quote ~right)\n         result# (c/match rgt# lft#)\n         msg# (->> result# :matcher-combinators.result/value p/as-string\n                   (str (pr-str lft#) \"\\n\\nMismatch:\\n\"))\n         pass?# (= :match (:matcher-combinators.result/type result#))]\n     {:type (if pass?# :pass :fail)\n      :expected qright#\n      :actual (symbol msg#)}))\n\n(defmethod assert-arrow '=expect=> [_ left _ right]\n  `(let [lft# ~left\n         rgt# ~right\n         qleft# (quote ~left)\n         qright# (quote ~right)\n         result# (compare-expr rgt# lft# qright# qleft#)\n         unformatted-msg# (expectations/->failure-message result#)\n         msg# (str/replace unformatted-msg# #\"^.*?\\n\" (str qleft# \" => \" qright#))]\n     {:type (:type result#)\n      :message msg#\n      :expected qright#\n      :actual qleft#}))\n\n(defmethod assert-arrow '=includes=> [_ left _ right]\n  `(check (in ~left) ~'=expect=> ~right))\n\n#?(:cljs\n   (defn normalize-error [error]\n     (let [stacktrace (or (.-stack error)\n                          (.-stack (js/Error.)))]\n       (symbol (str (pr-str error) \"\\n\" stacktrace)))))\n\n(defmacro check\n  \"Checks for an expression, using a matcher (or arrow).\n\n`check` have two APIs: one that can be used as `is`, but only works for matchers or\narrows, and other that is similar to midje's `fact`. To us the first version, you can\nuse:\n\n```clojure\n; This will use the `nubank/matcher-combinators` match? to check equality\n(check (=> <expected> <actual>))\n\n; This will use the `expectations` library to check equality\n(check (=expect=> <expected> <actual>))\n\n; Or you can use the midje-like assertions\n(check <actual> => <expected>)\n```\n\nIf you want to use it to check for Javascript's promises, see check.async/check. Its\nusage is the same, but it'll always \\\"await\\\" for promises and also return promises.\"\n  ([sub-expression]\n   (let [[arrow right left] sub-expression]\n     `(check ~left ~arrow ~right)))\n  ([left arrow right]\n   (macros/case\n    :clj\n    `(try\n       (do-report ~(assert-arrow false left arrow right))\n       (catch java.lang.Throwable t#\n         (do-report {:type :error\n                     :message (str \"Expected \" (quote ~left) \" \" (quote ~arrow) \" \" (quote ~right))\n                     :expected ~right\n                     :actual t#})))\n    :cljs\n    `(try\n       (do-report ~(assert-arrow true left arrow right))\n       (catch :default t#\n         (do-report {:type :error\n                     :message (str \"Expected \" (quote ~left) \" \" (quote ~arrow) \" \" (quote ~right))\n                     :expected ~right\n                     :actual (normalize-error t#)}))))))\n\n(defn- prepare-symbol [left ex]\n  `(let [qleft# (quote ~left)]\n     (try\n       {:type :fail\n        :message (str \"Expected \" qleft# \" to throw error \" (quote ~ex))\n        :expected (quote ~ex)\n        :actual ~left}\n       (catch ~ex t#\n         {:type :pass}))))\n\n(defn- prepare-coll [left right]\n  (let [[ex fun] right]\n    `(let [qleft# (quote ~left)\n           qright# (quote ~right)]\n       (try\n         {:type :fail\n          :message (str \"Expected \" qleft# \" to throw error \" (quote ~ex))\n          :expected qright#\n          :actual ~left}\n         (catch ~ex t#\n           (when ~fun\n             (~fun t#)))))))\n\n(defmethod assert-arrow '=throws=> [cljs? left _ right]\n  (assert (or (and (coll? right) (-> right first symbol?))\n              (symbol? right)))\n  (if (symbol? right)\n    (prepare-symbol left right)\n    (prepare-coll left right)))\n\n(def custom-matchers (atom {}))\n(defmethod assert-arrow :default [cljs? left matcher right]\n  `(if-let [matcher# (get @custom-matchers '~matcher)]\n     (let [lft# ~left\n           rgt# ~right\n           res# (matcher# rgt# lft#)]\n       (if (:pass? res#)\n         {:type :pass\n          :message '(~'check 'lft# => 'rgt#)}\n         {:type :fail\n          :expected '~right\n          :actual (symbol (str (:failure-message res#)))}))\n     {:type :error\n      :expected ~right\n      :actual (str \"Matcher \" '~matcher \" is not implemented\")}))\n\n(defmacro defmatcher [name args & body]\n  `(swap! custom-matchers assoc '~name (fn ~args ~@body)))\n"]}