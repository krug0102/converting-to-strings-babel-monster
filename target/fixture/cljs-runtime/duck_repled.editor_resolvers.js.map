{"version":3,"sources":["duck_repled/editor_resolvers.cljc"],"mappings":";AAOA,AAAA,yCAAA,AAAAA,6EAAA,AAAA,2HAAA,2CAAA,qYAAA,sIAAA,aAAA,iDAAAC,r2BAAqBkB,+2BAA0BE,ldAC/B,oOAAKC,fAAiBJ,vMAAK,+CAAA,iFAAA,uEAAA,vMAACK,dAAgBC;AAD5D,AAAA,IAAAtB,cAAAD;IAAAC,kBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,gBAAA,nEAAwCkB;AAAxC,AAGEA;;;AAHF,IAAAf,wBAAqBc;IAArBb,wBAAA,AAAA,0FAAAD;IAAAE,uBAAA,AAAA,+JAAA,AAAA,sFAAAF;IAAAG,kBAAA,AAAA,mKAAA,AAAA,sFAAAH;AAAA,AAAA,0CAAA,AAAAI,8CAAAJ,sBAAA,4DAAA,WAAAK,iBAAAC,rMAAqBQ;AAArB,AAAA,OAAAP,wBAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,wBAAA,CAAAN,sDAAAA,oDAAAI,iBAAAC,oBAAAL,gCAAAI,iBAAAC,mBAAA,WAAAG;AAAA,AAAA,OAAAF,wBAAA,KAAA,WAAAG;AAAA,AAAA,OAAAC,2BAAA,kBAAAF,uBAAA,AAAA,AAAAG,iEAAA,AAAAC,eAAAJ,uBAAAA,sBAAA,CAAA,iEAAAN,iBAAA,0DAAAD,iCAAA;;;;;AAKA,AAAA,6CAAA,AAAAP,6EAAA,AAAA,mIAAA,2CAAA,iIAAA,mFAAA,wEAAA,2CAAA,wEAAA,mFAAA,qEAAA,sFAAA,iIAAA,mFAAA,iFAAA,qDAAAqB,EAAAI,jwCAAqBM;AAArB,AAAA,IAAAL,cAAAD;IAAAC,kBAAA,AAAAvB,4BAAAuB;kBAAA,AAAAtB,4CAAAsB,gBAAA,1EAAqCM;AAArC,AAIE,IAAMC,OAAK,AAAA,4FAAWD;AAAtB,AACE,IAAAE,YAAA,2CAAA,wEAAA,2CAAA,8KAAA,zGAA0C,AAAA,4FAAWF,2EACd,AAAA,qFAAQA;AAD/C,AAAA,oBAEQC;AAAK,qDAAAC,UAAA,xDAACzB,gIAAuBwB;;AAFrCC;;;;AALJ,IAAAP,wBAAqBI;IAArBH,wBAAA,AAAA,0FAAAD;IAAAE,uBAAA,AAAA,+JAAA,AAAA,sFAAAF;IAAAG,kBAAA,AAAA,mKAAA,AAAA,sFAAAH;AAAA,AAAA,8CAAA,AAAAlB,8CAAAkB,sBAAA,4DAAA,WAAAjB,iBAAAC,zMAAqBoB;AAArB,AAAA,OAAAnB,wBAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,wBAAA,CAAAgB,sDAAAA,oDAAAlB,iBAAAC,oBAAAiB,gCAAAlB,iBAAAC,mBAAA,WAAAG;AAAA,AAAA,OAAAF,wBAAA,KAAA,WAAAG;AAAA,AAAA,OAAAC,2BAAA,kBAAAF,uBAAA,AAAA,AAAAG,iEAAA,AAAAC,eAAAJ,uBAAAA,sBAAA,CAAA,iEAAAgB,iBAAA,0DAAAD,iCAAA;;;;;AASA,AAAA,mDAAA,AAAA7B,6EAAA,AAAA,+IAAA,2CAAA,iIAAA,mFAAA,2CAAA,uDAAA,mFAAA,qEAAA,8DAAA,+EAAA,iIAAA,mFAAA,yEAAA,8EAAA,2DAAAqB,EAAAc,7zCAAqBM;AAArB,AAAA,IAAAL,cAAAD;IAAAC,kBAAA,AAAAjC,4BAAAiC;iBAAA,AAAAhC,4CAAAgC,gBAAA,zEAAuDM;YAAvD,AAAAtC,4CAAAgC,gBAAA,pEAAkEO;AAAlE,AAGE,IAAAC,qBAAsB,AAACI,wCAA4BN,WAAW,AAACO,gBAAMN;AAArE,AAAA,oBAAAC;AAAA,AAAA,IAAAC,cAAAD;gBAAA,AAAAE,4CAAAD,YAAA,IAAA,xEAAYF;SAAZ,AAAAG,4CAAAD,YAAA,IAAA,jEAAkBE;AAAlB,AAAA,kDAAA,uDAAA,2CAAA,qHAAA,hDAC4B,4CAAKA,kEAAgBJ;;AADjD;;;;AAHF,IAAAN,wBAAqBI;IAArBH,wBAAA,AAAA,0FAAAD;IAAAE,uBAAA,AAAA,+JAAA,AAAA,sFAAAF;IAAAG,kBAAA,AAAA,mKAAA,AAAA,sFAAAH;AAAA,AAAA,oDAAA,AAAA5B,8CAAA4B,sBAAA,4DAAA,WAAA3B,iBAAAC,/MAAqB8B;AAArB,AAAA,OAAA7B,wBAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,wBAAA,CAAA0B,sDAAAA,oDAAA5B,iBAAAC,oBAAA2B,gCAAA5B,iBAAAC,mBAAA,WAAAG;AAAA,AAAA,OAAAF,wBAAA,KAAA,WAAAG;AAAA,AAAA,OAAAC,2BAAA,kBAAAF,uBAAA,AAAA,AAAAG,iEAAA,AAAAC,eAAAJ,uBAAAA,sBAAA,CAAA,iEAAA0B,iBAAA,0DAAAD,iCAAA;;;;;AAMA,AAAA,mDAAA,AAAAvC,6EAAA,AAAA,6IAAA,2CAAA,iIAAA,mFAAA,iFAAA,iIAAA,mFAAA,qFAAA,2DAAAqB,EAAA6B,n8BAAqBM;AAArB,AAAA,IAAAL,cAAAD;IAAAC,kBAAA,AAAAhD,4BAAAgD;eAAA,AAAA/C,4CAAA+C,gBAAA,vEAAuDM;AAAvD,AAAA,kDAAA,yEACoB,AAACC,sCAA0BD;;;AAD/C,IAAAL,wBAAqBI;IAArBH,wBAAA,AAAA,0FAAAD;IAAAE,uBAAA,AAAA,+JAAA,AAAA,sFAAAF;IAAAG,kBAAA,AAAA,mKAAA,AAAA,sFAAAH;AAAA,AAAA,oDAAA,AAAA3C,8CAAA2C,sBAAA,4DAAA,WAAA1C,iBAAAC,/MAAqB6C;AAArB,AAAA,OAAA5C,wBAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,wBAAA,CAAAyC,sDAAAA,oDAAA3C,iBAAAC,oBAAA0C,gCAAA3C,iBAAAC,mBAAA,WAAAG;AAAA,AAAA,OAAAF,wBAAA,KAAA,WAAAG;AAAA,AAAA,OAAAC,2BAAA,kBAAAF,uBAAA,AAAA,AAAAG,iEAAA,AAAAC,eAAAJ,uBAAAA,sBAAA,CAAA,iEAAAyC,iBAAA,0DAAAD,iCAAA;;;;;AAGA,AAAA,kDAAA,AAAAtD,6EAAA,AAAA,4IAAA,2CAAA,iIAAA,mFAAA,yEAAA,4KAAA,iIAAA,mFAAA,2CAAA,qEAAA,mFAAA,qEAAA,8DAAA,uFAAA,0DAAAqB,EAAAsC,56CAAqBM,ipBACwB,8CAAA,9CAACC;AAD9C,AAAA,IAAAN,cAAAD;IAAAC,kBAAA,AAAAzD,4BAAAyD;iBAAA,AAAAxD,4CAAAwD,gBAAA,zEAAsDlB;YAAtD,AAAAtC,4CAAAwD,gBAAA,pEAAiEjB;SAAjE,AAAAvC,4CAAAwD,gBAAA,jEAAuEb;AAAvE,AAIE,IAAAH,qBAAwB,AAACyB,yCAA6B3B,WAAW,AAACO,gBAAMN;AAAxE,AAAA,oBAAAC;AAAA,AAAA,IAAAuB,cAAAvB;gBAAA,AAAAE,4CAAAqB,YAAA,IAAA,xEAAYxB;WAAZ,AAAAG,4CAAAqB,YAAA,IAAA,nEAAkBC;AAAlB,AAAA,kDAAA,qEACmB,iBAAAE,YAAA,2CAAA,0EAAA,LAAwBF,mEAAiBzB;AAAzC,AAAA,oBACQI;AAAG,qDAAAuB,UAAA,xDAAC7D,+GAAesC;;AAD3BuB;;;;AADnB;;;;AAJF,IAAAT,wBAAqBI;IAArBH,wBAAA,AAAA,0FAAAD;IAAAE,uBAAA,AAAA,+JAAA,AAAA,sFAAAF;IAAAG,kBAAA,AAAA,mKAAA,AAAA,sFAAAH;AAAA,AAAA,mDAAA,AAAApD,8CAAAoD,sBAAA,4DAAA,WAAAnD,iBAAAC,9MAAqBsD;AAArB,AAAA,OAAArD,wBAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,wBAAA,CAAAkD,sDAAAA,oDAAApD,iBAAAC,oBAAAmD,gCAAApD,iBAAAC,mBAAA,WAAAG;AAAA,AAAA,OAAAF,wBAAA,KAAA,WAAAG;AAAA,AAAA,OAAAC,2BAAA,kBAAAF,uBAAA,AAAA,AAAAG,iEAAA,AAAAC,eAAAJ,uBAAAA,sBAAA,CAAA,iEAAAkD,iBAAA,0DAAAD,iCAAA;;;;;AAQA,AAAA,0CAAA,AAAA/D,6EAAA,AAAA,4HAAA,2CAAA,iIAAA,mFAAA,qEAAA,4KAAA,iIAAA,mFAAA,2CAAA,6DAAA,mFAAA,qEAAA,8DAAA,uFAAA,kDAAAqB,EAAAkD,h4CAAqBM,qnBACsB,8CAAA,9CAACX;AAD5C,AAAA,IAAAM,cAAAD;IAAAC,kBAAA,AAAArE,4BAAAqE;eAAA,AAAApE,4CAAAoE,gBAAA,vEAA8Cf;YAA9C,AAAArD,4CAAAoE,gBAAA,pEAAuD7B;SAAvD,AAAAvC,4CAAAoE,gBAAA,jEAA6DzB;AAA7D,AAGE,IAAAH,qBAAwB,AAACmC,qCAAyBtB,SAAS,AAACR,gBAAMN;AAAlE,AAAA,oBAAAC;AAAA,AAAA,IAAAkC,cAAAlC;gBAAA,AAAAE,4CAAAgC,YAAA,IAAA,xEAAYnC;WAAZ,AAAAG,4CAAAgC,YAAA,IAAA,nEAAkBV;AAAlB,AAAA,kDAAA,6DACe,iBAAAY,YAAA,2CAAA,0EAAA,LAAwBZ,mEAAiBzB;AAAzC,AAAA,oBACQI;AAAG,qDAAAiC,UAAA,xDAACvE,+GAAesC;;AAD3BiC;;;;AADf;;;;AAHF,IAAAP,wBAAqBI;IAArBH,wBAAA,AAAA,0FAAAD;IAAAE,uBAAA,AAAA,+JAAA,AAAA,sFAAAF;IAAAG,kBAAA,AAAA,mKAAA,AAAA,sFAAAH;AAAA,AAAA,2CAAA,AAAAhE,8CAAAgE,sBAAA,4DAAA,WAAA/D,iBAAAC,tMAAqBkE;AAArB,AAAA,OAAAjE,wBAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,wBAAA,CAAA8D,sDAAAA,oDAAAhE,iBAAAC,oBAAA+D,gCAAAhE,iBAAAC,mBAAA,WAAAG;AAAA,AAAA,OAAAF,wBAAA,KAAA,WAAAG;AAAA,AAAA,OAAAC,2BAAA,kBAAAF,uBAAA,AAAA,AAAAG,iEAAA,AAAAC,eAAAJ,uBAAAA,sBAAA,CAAA,iEAAA8D,iBAAA,0DAAAD,iCAAA;;;;;AAOA,AAAA,8CAAA,AAAA3E,6EAAA,AAAA,qIAAA,2CAAA,iIAAA,mFAAA,qEAAA,4KAAA,iIAAA,mFAAA,2CAAA,qEAAA,mFAAA,qEAAA,8DAAA,uFAAA,sDAAAqB,EAAA4D,z5CAAqBM,koBACsB,8CAAA,9CAACrB;AAD5C,AAAA,IAAAgB,cAAAD;IAAAC,kBAAA,AAAA/E,4BAAA+E;eAAA,AAAA9E,4CAAA8E,gBAAA,vEAAkDzB;YAAlD,AAAArD,4CAAA8E,gBAAA,pEAA2DvC;SAA3D,AAAAvC,4CAAA8E,gBAAA,jEAAiEnC;AAAjE,AAIE,IAAAH,qBAAgB,AAAC4C,yCAA6B/B,SAASd;AAAvD,AAAA,oBAAAC;AAAA,AAAA,WAAAA,PAAWwB;AAAX,AAAA,kDAAA,qEACmB,iBAAAqB,YAAA,2CAAA,0EAAA,LAAwBrB,mEAAiBzB;AAAzC,AAAA,oBACQI;AAAG,qDAAA0C,UAAA,xDAAChF,+GAAesC;;AAD3B0C;;;;AADnB;;;;AAJF,IAAAN,wBAAqBI;IAArBH,wBAAA,AAAA,0FAAAD;IAAAE,uBAAA,AAAA,+JAAA,AAAA,sFAAAF;IAAAG,kBAAA,AAAA,mKAAA,AAAA,sFAAAH;AAAA,AAAA,+CAAA,AAAA1E,8CAAA0E,sBAAA,4DAAA,WAAAzE,iBAAAC,1MAAqB4E;AAArB,AAAA,OAAA3E,wBAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,wBAAA,CAAAwE,sDAAAA,oDAAA1E,iBAAAC,oBAAAyE,gCAAA1E,iBAAAC,mBAAA,WAAAG;AAAA,AAAA,OAAAF,wBAAA,KAAA,WAAAG;AAAA,AAAA,OAAAC,2BAAA,kBAAAF,uBAAA,AAAA,AAAAG,iEAAA,AAAAC,eAAAJ,uBAAAA,sBAAA,CAAA,iEAAAwE,iBAAA,0DAAAD,iCAAA;;;;;AAQA,AAAA,qDAAA,AAAArF,6EAAA,AAAA,mJAAA,2CAAA,sIAAA,MAAA,iIAAA,mFAAA,qEAAA,sEAAA,iIAAA,mFAAA,wFAAA,6DAAAqB,EAAAqE,tpCAAqBM;AAArB,AAAA,IAAAL,cAAAD;IAAAC,kBAAA,AAAAxF,4BAAAwF;eAAA,AAAAvF,4CAAAuF,gBAAA,vEAAoDlC;AAApD,AAAA,kDAAA,kLAAA,7GAEkB,AAAA,mGAAgBA,wEACnB,AAAA,4FAAaA;;;AAH5B,IAAAmC,wBAAqBI;IAArBH,wBAAA,AAAA,0FAAAD;IAAAE,uBAAA,AAAA,+JAAA,AAAA,sFAAAF;IAAAG,kBAAA,AAAA,mKAAA,AAAA,sFAAAH;AAAA,AAAA,sDAAA,AAAAnF,8CAAAmF,sBAAA,4DAAA,WAAAlF,iBAAAC,jNAAqBqF;AAArB,AAAA,OAAApF,wBAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,wBAAA,CAAAiF,sDAAAA,oDAAAnF,iBAAAC,oBAAAkF,gCAAAnF,iBAAAC,mBAAA,WAAAG;AAAA,AAAA,OAAAF,wBAAA,KAAA,WAAAG;AAAA,AAAA,OAAAC,2BAAA,kBAAAF,uBAAA,AAAA,AAAAG,iEAAA,AAAAC,eAAAJ,uBAAAA,sBAAA,CAAA,iEAAAiF,iBAAA,0DAAAD,iCAAA;;;;;AAKA,AAAA,+CAAA,AAAA9F,6EAAA,AAAA,sIAAA,2CAAA,iIAAA,4SAAA,iIAAA,mFAAA,sFAAA,uDAAAqB,3jCAAqBgF,6jCAAiBC,5jBACtB,8CAAA,9CAACpC,sGACD,8CAAA,9CAACA;AAFjB,AAKE,IAAMT,WAAS,iBAAA8C,mBAAI,AAAA,mGAAA,AAAA,qFAAID;AAAR,AAAA,oBAAAC;AAAAA;;AACI,OAAA,mGAAA,AAAA,qFAAA,AAAA,sGAAID;;;IACjBE,OAAK,AAAA,0FAAYF;AAFvB,AAGE,oBACE7C;AADF,kDAAA,sEAC4B,AAACgD,+CAAOhD;;AADpC,GAEE,SAAA,RAAM+C;AAFR;;AAAA,GAGE,6CAAA,7CAACE,kGAAQF;AAHX,kDAAA,sEAAA,AAAA;;AAAA,AAAA,kDAAA,sEAAA,AAAA;;;;;;;AARJ,IAAAP,wBAAqBI;IAArBH,wBAAA,AAAA,0FAAAD;IAAAE,uBAAA,AAAA,+JAAA,AAAA,sFAAAF;IAAAG,kBAAA,AAAA,mKAAA,AAAA,sFAAAH;AAAA,AAAA,gDAAA,AAAAxF,8CAAAwF,sBAAA,4DAAA,WAAAvF,iBAAAC,3MAAqB0F;AAArB,AAAA,OAAAzF,wBAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,wBAAA,CAAAsF,sDAAAA,oDAAAxF,iBAAAC,oBAAAuF,gCAAAxF,iBAAAC,mBAAA,WAAAG;AAAA,AAAA,OAAAF,wBAAA,KAAA,WAAAG;AAAA,AAAA,OAAAC,2BAAA,kBAAAF,uBAAA,AAAA,AAAAG,iEAAA,AAAAC,eAAAJ,uBAAAA,sBAAA,CAAA,iEAAAsF,iBAAA,0DAAAD,iCAAA;;;;;AAcA,AAAA,iDAAA,AAAAnG,6EAAA,AAAA,2IAAA,2CAAA,iIAAA,gcAAA,iIAAA,mFAAA,4EAAA,yDAAAqB,EAAAsF,htCAAqBM,wgBAEL,8CAAA,9CAAC/C,yHAAyB,8CAAA,9CAACA,qHAC3B,8CAAA,9CAACA;AAHjB,AAAA,IAAA0C,cAAAD;IAAAC,kBAAA,AAAAzG,4BAAAyG;gBAAA,AAAAxG,4CAAAwG,gBAAA,xEACWM;cADX,AAAA9G,4CAAAwG,gBAAA,tEAC4BO;eAD5B,AAAA/G,4CAAAwG,gBAAA,vEAC2CQ;AAD3C,AAME,oBACE,iBAAAC,oBAAKH;AAAL,AAAA,oBAAAG;AAAe,uDAAA,hDAACC,mGAAUJ;;AAA1BG;;;AADF,kDAAA,4DAEcH;;AAFd,oBAIE,iBAAAK,gBAAA,iFAAA,wDAAA;AAAA,AAAA,QAAAA,8CAAAA,uDAAAA,XAAeJ,mCAAAA;;AAJjB,kDAAA,4DAKcA;;AALd,AAQE,IAAMK,mBAAW,yCAAA,zCAACC,gCAAeL;IAC3BM,mBAAW,EAAI,yCAAA,zCAACD,gCAAeL,uBAChB,yCAAA,zCAACK,gCAAeL;AAFrC,AAGE,IAAAO,YAAMR;IAANQ,gBAAA,EAAA,CAAAA,qBAAAC,oBAAA,AAAAD,cAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,kDAAA,4DAC0B,oBAAA,qDAAA,vEAAIH;;;KAD9B;AAAA,kDAAA,4DAE2B,wDAAA,mDAAA,zGAAI,EAAK,GAAKA,wBAAY,GAAKE;;;;AAF1D;;;;;;;;AAjBN,IAAAb,wBAAqBI;IAArBH,wBAAA,AAAA,0FAAAD;IAAAE,uBAAA,AAAA,+JAAA,AAAA,sFAAAF;IAAAG,kBAAA,AAAA,mKAAA,AAAA,sFAAAH;AAAA,AAAA,kDAAA,AAAApG,8CAAAoG,sBAAA,4DAAA,WAAAnG,iBAAAC,7MAAqBsG;AAArB,AAAA,OAAArG,wBAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,wBAAA,CAAAkG,sDAAAA,oDAAApG,iBAAAC,oBAAAmG,gCAAApG,iBAAAC,mBAAA,WAAAG;AAAA,AAAA,OAAAF,wBAAA,KAAA,WAAAG;AAAA,AAAA,OAAAC,2BAAA,kBAAAF,uBAAA,AAAA,AAAAG,iEAAA,AAAAC,eAAAJ,uBAAAA,sBAAA,CAAA,iEAAAkG,iBAAA,0DAAAD,iCAAA;;;;;AAwBA,AAAA,6CAAA,AAAA/G,6EAAA,AAAA,kIAAA,2CAAA,iIAAA,mFAAA,qEAAA,4KAAA,iIAAA,mFAAA,2CAAA,0EAAA,mFAAA,qEAAA,8DAAA,uFAAA,qDAAAqB,EAAAwG,z5CAAqBM,8nBACsB,8CAAA,9CAACjE;AAD5C,AAAA,IAAA4D,cAAAD;IAAAC,kBAAA,AAAA3H,4BAAA2H;eAAA,AAAA1H,4CAAA0H,gBAAA,vEAAiDrE;YAAjD,AAAArD,4CAAA0H,gBAAA,pEAA0DnF;SAA1D,AAAAvC,4CAAA0H,gBAAA,jEAAgE/E;AAAhE,AAIE,IAAAH,qBAA4B,AAAC0F,uCAA2B7E,SAAS,AAACR,gBAAMN;AAAxE,AAAA,oBAAAC;AAAA,AAAA,IAAAwF,cAAAxF;gBAAA,AAAAE,4CAAAsF,YAAA,IAAA,xEAAYzF;eAAZ,AAAAG,4CAAAsF,YAAA,IAAA,vEAAkBC;AAAlB,AAAA,kDAAA,0EACqB,iBAAAE,YAAA,2CAAA,8EAAA,TAAwBF,uEAAqB1F;AAA7C,AAAA,oBACQI;AAAG,qDAAAwF,UAAA,xDAAC9H,+GAAesC;;AAD3BwF;;;;AADrB;;;;AAJF,IAAAR,wBAAqBI;IAArBH,wBAAA,AAAA,0FAAAD;IAAAE,uBAAA,AAAA,+JAAA,AAAA,sFAAAF;IAAAG,kBAAA,AAAA,mKAAA,AAAA,sFAAAH;AAAA,AAAA,8CAAA,AAAAtH,8CAAAsH,sBAAA,4DAAA,WAAArH,iBAAAC,zMAAqBwH;AAArB,AAAA,OAAAvH,wBAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,wBAAA,CAAAoH,sDAAAA,oDAAAtH,iBAAAC,oBAAAqH,gCAAAtH,iBAAAC,mBAAA,WAAAG;AAAA,AAAA,OAAAF,wBAAA,KAAA,WAAAG;AAAA,AAAA,OAAAC,2BAAA,kBAAAF,uBAAA,AAAA,AAAAG,iEAAA,AAAAC,eAAAJ,uBAAAA,sBAAA,CAAA,iEAAAoH,iBAAA,0DAAAD,iCAAA;;;;;AAQA,AAAA,sDAAA,AAAAjI,6EAAA,AAAA,qJAAA,2CAAA,iIAAA,mFAAA,6EAAA,iIAAA,mFAAA,2CAAA,qEAAA,mFAAA,qEAAA,8FAAA,kEAAAwI,huCAAqBM,4tCAAwBC;AAA7C,AAAA,IAAAN,cAAAD;IAAAC,kBAAA,AAAAtI,4BAAAsI;eAAA,AAAArI,4CAAAqI,gBAAA,vEAA8DrB;AAA9D,AAIE,IAAM3D,WAAS,AAACuF,qCAAyB5B;IACnCzE,0IAAUoG,7CAAIE,rFAAW,AAAA,qFAAA,kDAAA,mFAAA,mFAAA,IAAA,YAAA,mFAAA,IAAA;AAD/B,AAEE,oBAAMxF;AAAN,AAAA,kDAAA,qEAAA,2CAAA,oEAAA,NAC+Bd,2EACGc;;AAFlC;;;;AANJ,IAAAiF,wBAAqBI;IAArBH,wBAAA,AAAA,0FAAAD;IAAAE,uBAAA,AAAA,+JAAA,AAAA,sFAAAF;IAAAG,kBAAA,AAAA,mKAAA,AAAA,sFAAAH;AAAA,AAAA,uDAAA,AAAAjI,8CAAAiI,sBAAA,4DAAA,WAAAhI,iBAAAC,lNAAqBmI;AAArB,AAAA,OAAAlI,wBAAA,KAAA,WAAAC;AAAA,AAAA,OAAAD,wBAAA,CAAA+H,sDAAAA,oDAAAjI,iBAAAC,oBAAAgI,gCAAAjI,iBAAAC,mBAAA,WAAAG;AAAA,AAAA,OAAAF,wBAAA,KAAA,WAAAG;AAAA,AAAA,OAAAC,2BAAA,kBAAAF,uBAAA,AAAA,AAAAG,iEAAA,AAAAC,eAAAJ,uBAAAA,sBAAA,CAAA,iEAAA+H,iBAAA,0DAAAD,iCAAA;;;;;AAiIA,yCAAA,zCAAKM,6HAAW/H,uCAAUY,2CAAcsE,6CAExBxB,wCACArB,iDAAoBS,gDACpBkE,2CAAc5C,4CAAe9C,iDAE7BwE,+CAAkBjB,mDAClB8C","names":["com.wsscode.pathom3.connect.operation.resolver","p__160628","map__160629","cljs.core/--destructure-map","cljs.core.get","original160623","resolver160624","outputs160625","op160626","cljs.core.assoc","a__89033__auto__","b__89034__auto__","promesa.protocols/-bind","___56277__auto__","result__89035__auto__","___56267__auto__","promesa.protocols/-promise","duck_repled.schemas.validate_BANG_","cljs.core/keys","duck-repled.editor-resolvers/seed-data","seed","_","duck-repled.schemas/registry","cljs.core.remove","cljs.core/vec","p__160635","map__160636","original160631","resolver160632","outputs160633","op160634","duck-repled.editor-resolvers/separate-data","editor-data","file","G__160637","p__160642","map__160643","original160638","resolver160639","outputs160640","op160641","duck-repled.editor-resolvers/namespace-from-text","top-blocks","range","temp__5753__auto__","vec__160644","cljs.core.nth","ns","duck-repled.editor-helpers/ns-range-for","cljs.core/first","p__160651","map__160652","original160647","resolver160648","outputs160649","op160650","duck-repled.editor-resolvers/contents-top-blocks","contents","duck-repled.editor-helpers/top-blocks","p__160657","map__160658","original160653","resolver160654","outputs160655","op160656","duck-repled.editor-resolvers/contents-top-block","com.wsscode.pathom3.connect.operation/?","vec__160659","text","duck-repled.editor-helpers/top-block-for","G__160662","p__160667","map__160668","original160663","resolver160664","outputs160665","op160666","duck-repled.editor-resolvers/text-block","vec__160669","duck-repled.editor-helpers/block-for","G__160672","p__160677","map__160678","original160673","resolver160674","outputs160675","op160676","duck-repled.editor-resolvers/text-selection","duck-repled.editor-helpers/text-in-range","G__160679","p__160686","map__160687","original160681","resolver160682","outputs160683","op160684","duck-repled.editor-resolvers/default-text-elements","original160688","resolver160689","outputs160690","op160691","duck-repled.editor-resolvers/resolver-for-ns","inputs","or__4223__auto__","kind","cljs.core.symbol","cljs.core._EQ_","p__160696","map__160697","original160692","resolver160693","outputs160694","op160695","duck-repled.editor-resolvers/resolve-repl-kind","repl-kind","eval-as","filename","and__4221__auto__","cljs.core.not_EQ_","fexpr__160698","cljs-file?","clojure.string/ends-with?","cljc-file?","G__160703","cljs.core/Keyword","p__160712","map__160715","original160708","resolver160709","outputs160710","op160711","duck-repled.editor-resolvers/var-from-text","vec__160720","curr-var","duck-repled.editor-helpers/current-var","G__160724","p__160731","map__160732","original160727","resolver160728","outputs160729","op160730","duck-repled.editor-resolvers/contents-from-filename","env","duck-repled.editor-helpers/read-file","com.wsscode.pathom3.connect.operation/params","duck-repled.editor-resolvers/resolvers"],"sourcesContent":["(ns duck-repled.editor-resolvers\n  (:require [clojure.string :as str]\n            [duck-repled.schemas :as schemas]\n            [duck-repled.connect :as connect]\n            [com.wsscode.pathom3.connect.operation :as pco]\n            [duck-repled.editor-helpers :as editor-helpers]))\n\n(connect/defresolver seed-data [{:keys [seed]} _]\n  {::pco/output (->> schemas/registry keys (remove #{:map}) vec)\n   ::pco/priority 99}\n  seed)\n\n(connect/defresolver separate-data [{editor-data :editor/data}]\n  {::pco/output [:editor/filename {:editor/contents [:text/contents :text/range]}]}\n\n  ; (when-let [editor-data (-> env :seed :editor/data)]\n  (let [file (:filename editor-data)]\n    (cond-> {:editor/contents {:text/contents (:contents editor-data)\n                               :text/range (:range editor-data)}}\n            file (assoc :editor/filename file))))\n\n(connect/defresolver namespace-from-text [{:text/keys [top-blocks range]}]\n  {::pco/output [{:text/ns [:text/contents :text/range :text/ns]}]}\n\n  (when-let [[range ns] (editor-helpers/ns-range-for top-blocks (first range))]\n    {:text/ns {:text/contents (str ns) :text/range range}}))\n\n(connect/defresolver contents-top-blocks [{:text/keys [contents]}]\n  {:text/top-blocks (editor-helpers/top-blocks contents)})\n\n(connect/defresolver contents-top-block [{:text/keys [top-blocks range ns]}]\n  {::pco/input [:text/top-blocks :text/range (pco/? :text/ns)]\n   ::pco/output [{:text/top-block [:text/contents :text/range :text/ns]}]}\n\n  (when-let [[range text] (editor-helpers/top-block-for top-blocks (first range))]\n    {:text/top-block (cond-> {:text/contents text :text/range range}\n                             ns (assoc :text/ns ns))}))\n\n(connect/defresolver text-block [{:text/keys [contents range ns]}]\n  {::pco/input [:text/contents :text/range (pco/? :text/ns)]\n   ::pco/output [{:text/block [:text/contents :text/range :text/ns]}]}\n  (when-let [[range text] (editor-helpers/block-for contents (first range))]\n    {:text/block (cond-> {:text/contents text :text/range range}\n                         ns (assoc :text/ns ns))}))\n\n(connect/defresolver text-selection [{:text/keys [contents range ns]}]\n  {::pco/input [:text/contents :text/range (pco/? :text/ns)]\n   ::pco/output [{:text/selection [:text/contents :text/range :text/ns]}]}\n\n  (when-let [text (editor-helpers/text-in-range contents range)]\n    {:text/selection (cond-> {:text/contents text :text/range range}\n                             ns (assoc :text/ns ns))}))\n\n(connect/defresolver default-text-elements [{:keys [editor/contents]}]\n  {::pco/priority -10}\n  {:text/contents (:text/contents contents)\n   :text/range (:text/range contents)})\n\n(connect/defresolver resolver-for-ns [inputs]\n  {::pco/input [(pco/? :text/ns)\n                (pco/? :repl/kind)]\n   ::pco/output [:repl/namespace]}\n\n  (let [contents (or (-> inputs :text/ns :text/contents)\n                     (-> inputs :editor/contents :text/ns :text/contents))\n        kind (:repl/kind inputs)]\n    (cond\n      contents {:repl/namespace (symbol contents)}\n      (nil? kind) nil\n      (= :cljs kind) {:repl/namespace 'cljs.user}\n      :not-cljs {:repl/namespace 'user})))\n\n(connect/defresolver resolve-repl-kind\n  [{:keys [config/repl-kind config/eval-as editor/filename]}]\n  {::pco/input [(pco/? :config/repl-kind) (pco/? :config/eval-as)\n                (pco/? :editor/filename)]\n   ::pco/output [:repl/kind]}\n\n  (cond\n    (and repl-kind (not= :clj repl-kind))\n    {:repl/kind repl-kind}\n\n    (#{:clj :cljs} eval-as)\n    {:repl/kind eval-as}\n\n    :else\n    (let [cljs-file? (str/ends-with? filename \".cljs\")\n          cljc-file? (or (str/ends-with? filename \".cljc\")\n                         (str/ends-with? filename \".cljx\"))]\n      (case eval-as\n        :prefer-clj {:repl/kind (if cljs-file? :cljs :clj)}\n        :prefer-cljs {:repl/kind (if (and (not cljs-file?) (not cljc-file?))\n                                   :clj\n                                   :cljs)}\n        nil))))\n\n(connect/defresolver var-from-text [{:text/keys [contents range ns]}]\n  {::pco/input [:text/contents :text/range (pco/? :text/ns)]\n   ::pco/output [{:text/current-var [:text/contents :text/range :text/ns]}]}\n\n  (when-let [[range curr-var] (editor-helpers/current-var contents (first range))]\n    {:text/current-var (cond-> {:text/contents curr-var :text/range range}\n                               ns (assoc :text/ns ns))}))\n\n(connect/defresolver contents-from-filename [env {:file/keys [filename]}]\n  {::pco/input [:file/filename]\n   ::pco/output [{:file/contents [:text/contents :text/range]}]}\n\n  (let [contents (editor-helpers/read-file filename)\n        range (-> env pco/params (:range [[0 0] [0 0]]))]\n    (when contents\n      {:file/contents {:text/range range\n                       :text/contents contents}})))\n\n; (pco/defresolver all-namespaces\n;   [env {:keys [repl/clj]}]\n;   {::pco/output [{:repl/namespaces [:repl/namespace]}]}\n;\n;   (p/let [f (-> (pco/params env) :filter)\n;           {:keys [result]} (eval/eval clj \"(clojure.core/mapv clojure.core/ns-name (clojure.core/all-ns))\")]\n;     {:repl/namespaces (cond->> (map (fn [n] {:repl/namespace n}) result)\n;                         f (filter (fn [n]\n;                                     (-> n :repl/namespace str\n;                                         (str/starts-with? f)))))}))\n;\n; (pco/defresolver need-cljs-from-config [{:editor/keys [config]}]\n;   {::pco/output [:cljs/required?]}\n;\n;   (case (:eval-mode config)\n;     :clj {:cljs/required? false}\n;     :cljs {:cljs/required? true}\n;     nil))\n;\n; (pco/defresolver all-vars-in-ns\n;   [_ {:repl/keys [namespace aux]}]\n;   {::pco/output [{:namespace/vars [:var/fqn]}]}\n;\n;   (p/let [{:keys [result]} (eval/eval aux (str \"(clojure.core/ns-interns '\" namespace \")\"))]\n;     {:namespace/vars (map (fn [v] {:var/fqn (symbol namespace v)})\n;                        (keys result))}))\n;\n; (pco/defresolver cljs-env [{:keys [editor-state]} {:keys [repl/clj]}]\n;   {::pco/output [:cljs/env]}\n;\n;   (when-let [cmd (-> @editor-state :repl/info :cljs/repl-env)]\n;     (p/let [{:keys [result]} (eval/eval clj (str cmd))]\n;       {:cljs/env result})))\n;\n; (def ^:private kondo-cache (atom {:cache nil :when 0}))\n;\n; (defn- run-kondo [dirs]\n;   (let [p      (p/deferred)\n;         buffer (atom \"\")\n;         cp     (spawn \"clj-kondo\"\n;                  (clj->js (concat [\"--lint\"]\n;                             dirs\n;                             [\"--config\"\n;                              \"{:output {:analysis true :format :json}}\"])))]\n;     (.. cp -stdout (on \"data\" #(swap! buffer str %)))\n;     (. cp on \"error\" #(p/resolve! p nil))\n;     (. cp on \"close\" #(p/resolve! p @buffer))\n;     p))\n;\n; (defn- run-kondo-maybe [dirs]\n;   (let [curr-time (long (new js/Date))\n;         {:keys [when cache]} @kondo-cache]\n;     (if (< (- curr-time 6000) when)\n;       cache\n;       (p/finally (run-kondo dirs)\n;         (fn [res]\n;           (reset! kondo-cache {:when (int (new js/Date)) :cache res}))))))\n;\n; (pco/defresolver analysis-from-kondo\n;   [{:keys [editor-state]} {:keys [editor/config]}]\n;   {::pco/output [:kondo/analysis]}\n;\n;   (when-not editor-state\n;     (p/let [kondo (run-kondo-maybe (:project-paths config))]\n;       {:kondo/analysis (some-> (.parse js/JSON kondo) .-analysis)})))\n;\n; (defn- get-from-ns-usages [analysis namespace ns-part]\n;   (-> analysis\n;       (aget \"namespace-usages\")\n;       (->> (filter (fn [^js %] (and (-> % .-from (= (str namespace)))\n;                                     (-> % .-alias (= ns-part))))))\n;       first\n;       (some-> .-to)))\n;\n; (defn- get-from-var-usages [analysis namespace current-var]\n;   (-> analysis\n;       (aget \"var-usages\")\n;       (->> (filter (fn [^js %] (and (-> % .-from (= (str namespace)))\n;                                     (-> % .-name (= current-var))))))\n;       first\n;       (some-> .-to)))\n;\n; (defn- get-from-definitions [analysis namespace current-var]\n;   (-> analysis\n;       (aget \"var-definitions\")\n;       (->> (filter (fn [^js %] (and (-> % .-ns (= (str namespace)))\n;                                     (-> % .-name (= current-var))))))\n;       first))\n;\n; (pco/defresolver fqn-from-kondo\n;   [{:keys [kondo/analysis editor/current-var repl/namespace]}]\n;   {::pco/output [:var/fqn]}\n;\n;   (let [as-sym     (symbol current-var)\n;         ns-part    (clojure.core/namespace as-sym)\n;         without-ns (name as-sym)\n;         finding    (if ns-part\n;                      (get-from-ns-usages analysis namespace ns-part)\n;                      (or (get-from-var-usages analysis namespace current-var)\n;                          (some-> (get-from-definitions analysis namespace current-var)\n;                                  .-ns)))]\n;     (when finding\n;       {:var/fqn (symbol finding without-ns)})))\n;\n; (pco/defresolver meta-from-kondo\n;   [{:keys [kondo/analysis var/fqn]}]\n;   {::pco/output [:var/meta]}\n;\n;   (let [ns-part    (namespace fqn)\n;         without-ns (name fqn)]\n;     (when-let [^js res (get-from-definitions analysis ns-part without-ns)]\n;       {:var/meta (cond-> {:file   (.-filename res)\n;                           :line   (.-row res)\n;                           :column (.-col res)\n;                           :ns     (.-ns res) :name (.-name res)}\n;                    (.-doc res) (assoc :doc (.-doc res))\n;                    (.-test res) (assoc :test (.-test res)))})))\n;\n\n(def resolvers [seed-data separate-data resolver-for-ns\n                ; BLOCKS\n                text-block\n                contents-top-blocks contents-top-block\n                var-from-text text-selection namespace-from-text\n\n                resolve-repl-kind default-text-elements\n                contents-from-filename])\n"]}