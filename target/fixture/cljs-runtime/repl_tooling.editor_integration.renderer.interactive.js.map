{"version":3,"sources":["repl_tooling/editor_integration/renderer/interactive.cljs"],"mappings":"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","names":["repl-tooling.editor-integration.renderer.interactive/edn?","obj","cljs.core/coll?","cljs.core/boolean?","cljs.core/regexp?","cljs.core/Symbol","cljs.core/Keyword","cljs.core/tagged-literal?","repl-tooling.editor-integration.renderer.interactive/norm-evt","js/Object.getPrototypeOf","js/Object.getOwnPropertyNames","p1__51252#","cljs.core.map","norm","clojure.string/replace","r","clojure.string/lower-case","cljs.core.keyword","cljs.core.filter","cljs.core.comp","cljs.core/second","cljs.core.into","repl-tooling.editor-integration.renderer.interactive/run-evt-fun!","eql","e","fun","state","repl","additional-args","p1__51253#","cljs.core._EQ_","cljs.core.pr_str","code","cljs.core/deref","clojure.string.join","res","G__51254","G__51255","promesa.core.then","response","cljs.core/reset!","repl-tooling.editor-integration.renderer.interactive/prepare-fn","args","cljs.core/first","repl-tooling.editor-integration.renderer.interactive/bindings-for","editor-state","fns","binds","paprika.collection/map-values","v","promesa.protocols/-bind","___31810__auto__","promesa.protocols/-promise","cljs.core.apply","repl-tooling.editor-integration.interpreter/debug-bindings","p1__51256#","cljs.core.assoc","cljs.core/tagged-literal","p__51257","vec__51258","cljs.core.nth","f-name","f-body","cljs.core/name","cljs.core.symbol","repl-tooling.editor-integration.renderer.interactive/treat-error","hiccup","d","js/document","reagent.dom.render","repl-tooling.editor-integration.renderer.interactive/prepare-new-eql","cached-result","G__51261","query","repl_tooling$editor_integration$renderer$interactive$prepare_new_eql_$_q","seed","___31820__auto__","original-seed","G__51262","G__51263","cljs.core.merge","p__51264","map__51265","cljs.core/--destructure-map","cljs.core.get","repl-tooling.editor-integration.renderer.interactive/render-interactive","html","edn","reagent.core.atom","e51266","repl-tooling.editor-integration.interpreter/evaluate-code","repl-tooling.ui.pinkie/tag-inject","js/console","this__4472__auto__","k__4473__auto__","this__4474__auto__","k51268","else__4475__auto__","G__51272","__extmap","this__4492__auto__","f__4493__auto__","init__4494__auto__","cljs.core.reduce","ret__4495__auto__","p__51273","vec__51274","k__4496__auto__","v__4497__auto__","this__4487__auto__","writer__4488__auto__","opts__4489__auto__","pr-pair__4490__auto__","keyval__4491__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__51267","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4470__auto__","__meta","this__4467__auto__","__hash","this__4476__auto__","cljs.core/count","this__4468__auto__","h__4330__auto__","coll__4469__auto__","cljs.core/hash-unordered-coll","this51269","other51270","this__4482__auto__","k__4483__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core/not-empty","cljs.core/PROTOCOL_SENTINEL","this__4479__auto__","G__51277","this__4480__auto__","k__4481__auto__","pred__51278","cljs.core/keyword-identical?","expr__51279","this__4485__auto__","cljs.core/seq","cljs.core/MapEntry","this__4471__auto__","this__4477__auto__","entry__4478__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","repl-tooling.editor-integration.renderer.interactive/Interactive","this__4516__auto__","cljs.core/List","writer__4517__auto__","cljs.core/-write","G__51271","extmap__4512__auto__","G__51281","cljs.core/record?","repl-tooling.editor-integration.renderer.interactive/->Interactive","repl-tooling.editor-integration.renderer.interactive/map->Interactive","_","ratom"],"sourcesContent":["(ns repl-tooling.editor-integration.renderer.interactive\n  (:require [reagent.core :as r]\n            [promesa.core :as p]\n            [reagent.dom :as rdom]\n            [paprika.collection :as coll]\n            [clojure.string :as str]\n            [repl-tooling.eval :as eval]\n            [repl-tooling.editor-integration.renderer.protocols :as proto]\n            [repl-tooling.ui.pinkie :as pinkie]\n            [repl-tooling.editor-integration.interpreter :as int]))\n\n(defn- edn? [obj]\n  (or (number? obj)\n      (string? obj)\n      (coll? obj)\n      (boolean? obj)\n      (nil? obj)\n      (regexp? obj)\n      (symbol? obj)\n      (keyword? obj)\n      (tagged-literal? obj)))\n\n(defn- norm-evt [obj]\n  (->> obj\n       js/Object.getPrototypeOf\n       js/Object.getOwnPropertyNames\n       (map #(let [norm (-> %\n                            (str/replace #\"[A-Z]\" (fn [r] (str \"-\" (str/lower-case r))))\n                            keyword)]\n               [norm (aget obj %)]))\n       (filter (comp edn? second))\n       (into {})))\n\n(defn- run-evt-fun! [eql e fun state repl additional-args]\n  (.preventDefault e)\n  (.stopPropagation e)\n  (let [norm #(if (and (tagged-literal? %) (-> % .-tag (= 'tooling/eval)))\n                (pr-str (.-form %))\n                (str \"'\" (pr-str %)))\n        code (str \"(\" fun \" '\"\n                  (pr-str (norm-evt (.-target e)))\n                  \" '\" (pr-str @state)\n                  \" \" (->> additional-args (map norm) (str/join \" \"))\n                  \")\")\n        res (eql {:text/contents code} [:repl/result])]\n    (p/then res (fn [response]\n                  (reset! state (-> response :repl/result :result))))))\n\n(defn- prepare-fn [eql fun state repl]\n  (fn [ & args]\n    (if (-> args first edn?)\n      (fn [e] (run-evt-fun! eql e fun state repl args))\n      (run-evt-fun! eql (first args) fun state repl []))))\n\n(defn- bindings-for [editor-state eql state fns repl]\n  (let [binds (coll/map-values (fn [v] (fn [ & args]\n                                         (p/do! (apply v args))\n                                         nil))\n                               (int/debug-bindings editor-state))\n        binds (assoc binds\n                     '?state @state\n                     '?state-atom state\n                     'eql eql\n                     'eval #(tagged-literal 'tooling/eval %))]\n    (->> fns\n         (map (fn [[f-name f-body]] [(->> f-name name (str \"?\") symbol)\n                                     (prepare-fn eql f-body state repl)]))\n         (into binds))))\n\n(defn- treat-error [hiccup]\n  (let [d (. js/document createElement \"div\")]\n    (rdom/render hiccup d)\n    hiccup))\n\n;; TODO: Migrate this to a better place!\n(defn- prepare-new-eql [editor-state]\n  (let [eql (-> @editor-state :editor/features :eql)\n        cached-result (eql [:editor/data :config/repl-kind\n                            :config/eval-as :config/project-paths\n                            :repl/evaluators])]\n    (fn q\n      ([query] (q {} query))\n      ([seed query]\n       (p/let [original-seed cached-result]\n         (eql (merge original-seed seed) query))))))\n\n(defn- render-interactive [{:keys [state html fns] :as edn} repl editor-state]\n  (let [state (r/atom state)\n        code (pr-str html)\n        eql (prepare-new-eql editor-state)\n        html (fn [state]\n               (try\n                 (-> {:code code\n                      :bindings (bindings-for editor-state eql state fns repl)\n                      :editor-state editor-state}\n                     int/evaluate-code\n                     pinkie/tag-inject\n                     treat-error)\n                 (catch :default e\n                   (.log js/console e)\n                   [:div.error \"Can't render this code - \" (pr-str e)])))]\n    [html state]))\n\n(defrecord Interactive [edn repl editor-state]\n  proto/Renderable\n  (as-html [_ ratom _]\n    (render-interactive edn repl editor-state)))\n"]}