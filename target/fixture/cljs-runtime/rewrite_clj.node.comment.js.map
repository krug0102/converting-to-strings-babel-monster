{"version":3,"sources":["rewrite_clj/node/comment.cljc"],"mappings":"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","names":["this__4472__auto__","k__4473__auto__","this__4474__auto__","k151146","else__4475__auto__","G__151164","cljs.core/Keyword","prefix","s","cljs.core.get","__extmap","this__4492__auto__","f__4493__auto__","init__4494__auto__","cljs.core.reduce","ret__4495__auto__","p__151167","vec__151168","k__4496__auto__","cljs.core.nth","v__4497__auto__","this__4487__auto__","writer__4488__auto__","opts__4489__auto__","pr-pair__4490__auto__","keyval__4491__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__151145","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4470__auto__","__meta","this__4467__auto__","__hash","this__4476__auto__","cljs.core/count","this__4468__auto__","h__4330__auto__","coll__4469__auto__","cljs.core/hash-unordered-coll","this151147","other151148","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4482__auto__","k__4483__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4479__auto__","G__151206","this__4480__auto__","k__4481__auto__","pred__151207","cljs.core/keyword-identical?","expr__151208","cljs.core.assoc","this__4485__auto__","cljs.core/seq","cljs.core/MapEntry","this__4471__auto__","this__4477__auto__","entry__4478__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.comment/CommentNode","this__4516__auto__","cljs.core/List","writer__4517__auto__","cljs.core/-write","G__151152","extmap__4512__auto__","G__151216","cljs.core/record?","rewrite-clj.node.comment/->CommentNode","rewrite-clj.node.comment/map->CommentNode","_node","_opts","cljs.core.ex_info","node","rewrite-clj.node.protocols/make-printable!","var_args","G__151218","rewrite-clj.node.comment/comment-node","js/Error","rewrite_clj.node.comment.comment_node","and__4221__auto__","cljs.core/re-matches","rewrite-clj.node.comment/comment?","rewrite-clj.node.protocols/tag"],"sourcesContent":["(ns ^:no-doc rewrite-clj.node.comment\n  (:require [rewrite-clj.node.protocols :as node]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Node\n\n(defrecord CommentNode [prefix s]\n  node/Node\n  (tag [_node] :comment)\n  (node-type [_node] :comment)\n  (printable-only? [_node] true)\n  (sexpr* [_node _opts]\n    (throw (ex-info \"unsupported operation\" {})))\n  (length [_node]\n    (+ (count prefix) (count s)))\n  (string [_node]\n    (str prefix s))\n\n  Object\n  (toString [node]\n    (node/string node)))\n\n(node/make-printable! CommentNode)\n\n;; ## Constructor\n\n(defn comment-node\n  \"Create node representing a comment with text `s`.\n\n   You may optionally specify a `prefix` of `\\\";\\\"` or `\\\"#!\\\"`, defaults is `\\\";\\\"`.\n\n   Argument `s`:\n   - must not include the `prefix`\n   - usually includes the trailing newline character, otherwise subsequent nodes will be on the comment line\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/comment-node \\\"; my comment\\\\n\\\")\n       n/string)\n   ;; => \\\";; my comment\\\\n\\\"\n\n   (-> (n/comment-node \\\"#!\\\" \\\"/usr/bin/env bb\\\\n\\\")\n       n/string)\n   ;; => \\\"#!/usr/bin/env bb\\\\n\\\"\n   ```\"\n  ([s]\n   (comment-node \";\" s))\n  ([prefix s]\n   {:pre [(and (re-matches #\"[^\\r\\n]*[\\r\\n]?\" s)\n               (or (= prefix \";\") (= prefix \"#!\")))]}\n   (->CommentNode prefix s)))\n\n(defn comment?\n  \"Returns true if `node` is a comment.\"\n  [node]\n  (= (node/tag node) :comment))\n"]}