{"version":3,"sources":["sci/impl/opts.cljc"],"mappings":"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","names":["sci.impl.opts/init-env!","env","bindings","aliases","namespaces","imports","load-fn","cljs.core.swap_BANG_","cljs.core.merge_with","cljs.core/merge","sci.impl.namespaces/namespaces","cljs.core.assoc","sci.impl.vars/user-ns","cljs.core.merge","sci.impl.namespaces/aliases","cljs.core.get_in","cljs.core.update","cljs.core/assoc","sci.impl.vars/->SciVar","cljs.core/make-hierarchy","sci.impl.opts/presets","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","sci.impl.opts/process-permissions","seq155250","self__4817__auto__","cljs.core/seq","permissions","cljs.core/not-empty","cljs.core.into","cljs.core.comp","cljs.core/cat","cljs.core.map","sci.impl.utils/strip-core-ns","p1__155251#","p1__155252#","sci.impl.opts/default-classes","js/Error","msg","filename","line","cljs.core/Delay","goog.string/StringBuffer","sci.impl.opts/default-imports","sci.impl.opts/normalize-classes","classes","class->opts","cljs.core/transient","cljs.core/select-keys","kvs","temp__5751__auto__","vec__155253","cljs.core.nth","sym","class-opts","cljs.core/first","cljs.core.assoc_BANG_","cljs.core/map?","cljs.core/rest","cljs.core/persistent!","p__155256","map__155257","cljs.core/--destructure-map","features","cljs.core.get","readers","allow","preset","realize-max","uberscript","deny","sci.impl.opts/init","or__4223__auto__","cljs.core.atom","_","ctx","sci.impl.opts.process_permissions"],"sourcesContent":["(ns sci.impl.opts\n  {:no-doc true}\n  (:require\n   #?(:cljs [goog.string])\n   [sci.impl.namespaces :as namespaces]\n   [sci.impl.utils :as utils :refer [strip-core-ns]]\n   [sci.impl.vars :as vars]))\n\n(defn init-env! [env bindings aliases namespaces imports load-fn]\n  (swap! env (fn [env]\n               (let [namespaces (merge-with merge\n                                            namespaces/namespaces\n                                            {'user (assoc bindings\n                                                          :obj vars/user-ns)}\n                                            namespaces\n                                            (:namespaces env))\n                     aliases (merge namespaces/aliases aliases\n                                    (get-in env [:namespaces 'user :aliases]))\n                     namespaces (-> namespaces\n                                    (update 'user assoc :aliases aliases)\n                                    (update 'clojure.core assoc 'global-hierarchy\n                                            (vars/->SciVar (make-hierarchy) 'global-hierarchy nil false)))]\n                 (assoc env\n                        :namespaces namespaces\n                        :imports imports\n                        :load-fn load-fn)))))\n\n(def presets\n  {:termination-safe\n   {:deny '[loop recur trampoline resolve]\n    :realize-max 100}})\n\n(defn process-permissions [& permissions]\n  (not-empty (into #{} (comp cat (map strip-core-ns)) permissions)))\n\n(def default-classes\n  #?(:clj {'java.lang.AssertionError AssertionError\n           'java.lang.Exception {:class Exception}\n           'java.lang.IllegalArgumentException java.lang.IllegalArgumentException\n           'clojure.lang.Delay clojure.lang.Delay\n           'clojure.lang.ExceptionInfo clojure.lang.ExceptionInfo\n           'clojure.lang.LineNumberingPushbackReader clojure.lang.LineNumberingPushbackReader\n           'java.lang.String {:class String}\n           'java.io.StringWriter java.io.StringWriter\n           'java.io.StringReader java.io.StringReader\n           'java.lang.Integer Integer\n           'java.lang.Number Number\n           'java.lang.Double Double\n           'java.lang.ArithmeticException ArithmeticException\n           'java.lang.Object Object}\n     :cljs {'Error {:class js/Error :constructor (fn\n                                                   ([msg] (js/Error. msg))\n                                                   ([msg filename] (js/Error. msg filename))\n                                                   ([msg filename line] (js/Error. msg filename line)))}\n            'cljs.core.Delay {:class cljs.core/Delay\n                              :constructor #(cljs.core/Delay. % nil)}\n            'goog.string.StringBuffer {:class goog.string/StringBuffer\n                                       :constructor #(goog.string/StringBuffer. %)}}))\n\n(def default-imports\n  #?(:clj '{AssertionError java.lang.AssertionError\n            Exception java.lang.Exception\n            String java.lang.String\n            ArithmeticException java.lang.ArithmeticException\n            Integer java.lang.Integer\n            Number java.lang.Number\n            Double java.lang.Double\n            Object java.lang.Object}\n     :cljs {}))\n\n(defn normalize-classes [classes]\n  (loop [class->opts (transient (select-keys classes [:allow]))\n         kvs classes]\n    (if-let [[sym class-opts] (first kvs)]\n      (recur ;; storing the physical class as key didn't work well with\n       ;; GraalVM\n       (assoc! class->opts sym (if (map? class-opts)\n                                 class-opts\n                                 {:class class-opts}))\n       (rest kvs))\n      {:public-class (:public-class classes)\n       :class->opts (persistent! class->opts)})))\n\n(defn init\n  \"Initializes options\"\n  [{:keys [:bindings :env\n           :allow :deny\n           :realize-max\n           :preset ;; used by malli\n           :aliases\n           :namespaces\n           :classes\n           :imports\n           :features\n           :load-fn\n           :uberscript ;; used by babashka, not public!\n           :readers]}]\n  (let [preset (get presets preset)\n        env (or env (atom {}))\n        imports (merge default-imports imports)\n        bindings bindings\n        _ (init-env! env bindings aliases namespaces imports load-fn)\n        ctx (merge {:env env\n                    :bindings {}\n                    :allow (process-permissions (:allow preset) allow)\n                    :deny (process-permissions (:deny preset) deny)\n                    :realize-max (or realize-max (:realize-max preset))\n                    :features features\n                    :readers readers\n                    ::ctx true\n                    :uberscript uberscript}\n                   (normalize-classes (merge default-classes classes)))]\n    ctx))\n"]}