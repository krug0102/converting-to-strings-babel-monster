{"version":3,"sources":["repl_tooling/repl_client/connection.cljs"],"mappings":"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","names":["repl-tooling.repl-client.connection/emit-line!","control","on-line","on-fragment","buffer","frags","last-line","js/clearTimeout","cljs.core/deref","vec__153609","seq__153610","cljs.core/seq","first__153611","cljs.core/first","cljs.core/next","raw-lines","cljs.core/vec","last-fragment","cljs.core/peek","lines","p1__153607#","cljs.core.update","cljs.core.apply","cljs.core/str","cljs.core.concat","cljs.core/butlast","first-line","rest-of-lines","G__153612","seq__153613","chunk__153614","count__153615","i__153616","temp__5753__auto__","cljs.core/chunked-seq?","c__4649__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","line","G__153619","G__153620","p","promesa.core.resolve_BANG_","cljs.core.swap_BANG_","cljs.core/dissoc","p1__153608#","cljs.core/empty?","cljs.core.subvec","cljs.core.assoc","repl-tooling.repl-client.connection/schedule-fragment!","new-state","G__153622","cljs.core._EQ_","cljs.core/pop","cljs.core/assoc","js/setTimeout","G__153623","cljs.core/update","cljs.core/into","p1__153621#","repl-tooling.repl-client.connection/treat-new-state","p1__153624#","map__153625","cljs.core/--destructure-map","cljs.core.get","vec__153626","cljs.core.nth","vec__153629","has-newline?","cljs.core/re-find","cljs.core/split-with","cljs.core/complement","cljs.core/remove-watch","cljs.core/not-empty","repl-tooling.repl-client.connection/treat-buffer!","cljs.core.atom","p1__153633#","p2__153634#","p3__153635#","p4__153632#","cljs.core/add-watch","repl-tooling.repl-client.connection/next-line","promesa.core/deferred","repl-tooling.repl-client.connection/calculate-match","output","re","cljs.core/rest","temp__5751__auto__","match","repl-tooling.repl-client.connection/send-output","on-output","new-output","cljs.core.subs","repl-tooling.repl-client.connection/parse-edn-string","e153636","rewrite-clj.parser/parse-string","ex","repl-tooling.repl-client.connection/send-result","on-result","vec__153638","edn-str","_","id","res","cljs.reader.read_string","exist?","edn-size","cljs.core/disj","cljs.core/conj","G__153642","repl-tooling.repl-client.connection/treat-output","idx","G__153650","G__153655","repl-tooling.repl-client.connection/prepare-evals","p1__153671#","repl-tooling.repl-client.connection/connect!","host","port","js/Promise","resolve","fail","conn","js/shadow.js.shim.module$net","G__153676","p1__153672#","p1__153673#","G__153681"],"sourcesContent":["(ns repl-tooling.repl-client.connection\n  (:require [clojure.string :as str]\n            [clojure.reader :as edn]\n            [rewrite-clj.parser :as parser]\n            [promesa.core :as p]\n            [\"net\" :as net]))\n\n(defn- emit-line! [control on-line on-fragment buffer frags last-line]\n  (js/clearTimeout (:timeout-id @control))\n  (let [raw-lines (vec (.split last-line #\"\\r?\\n\"))\n        last-fragment (peek raw-lines)\n        lines (-> raw-lines\n                  (update 0 #(apply str (concat (:emitted-frags @control) frags [%])))\n                  butlast)\n        [first-line & rest-of-lines] lines]\n    (on-line first-line)\n    (on-fragment (apply str (concat frags [(first raw-lines) \"\\n\"])))\n    (doseq [line rest-of-lines]\n      (on-line line)\n      (on-fragment (str line \"\\n\")))\n    (when-let [p (:next-line-prom @control)]\n      (p/resolve! p first-line)\n      (swap! control dissoc :next-line-prom))\n\n    (swap! buffer #(if (empty? last-fragment)\n                     (subvec % 1)\n                     (-> %\n                         (subvec (count frags))\n                         (assoc 0 last-fragment))))))\n\n(defn- schedule-fragment! [control on-fragment buffer new-state]\n  (let [frags (cond-> new-state (-> new-state peek (= :closed)) pop)]\n    (js/clearTimeout (:timeout-id @control))\n    (swap! control assoc\n           :timeout-id\n           (js/setTimeout\n            (fn []\n              (on-fragment (apply str frags))\n              (swap! control update :emitted-frags into frags)\n              (swap! buffer #(subvec % (count frags))))\n            1000))))\n\n(defn- treat-new-state [control buffer new-state]\n  ; (prn :STR new-state)\n  (let [has-newline? #(re-find #\"\\r?\\n\" (str %))\n        {:keys [on-line on-fragment]} @control\n        [frags [last-line]] (split-with (complement has-newline?) new-state)]\n    ; (prn :SPLIT (split-with (complement has-newline?) new-state))\n    (cond\n      (= [:closed] new-state)\n      (do\n        (remove-watch buffer :on-add)\n        (on-fragment nil)\n        (on-line nil))\n\n      (has-newline? last-line)\n      (emit-line! control on-line on-fragment buffer frags last-line)\n\n      (not-empty new-state)\n      (schedule-fragment! control on-fragment buffer new-state))))\n\n(defn treat-buffer! [buffer on-line on-fragment]\n  (let [control (atom {:emitted-frags []\n                       :on-line on-line\n                       :on-fragment on-fragment})]\n    (add-watch buffer :on-add #(treat-new-state control buffer %4))\n    control))\n\n(defn next-line [control]\n  (let [p (p/deferred)]\n    (swap! control assoc :next-line-prom p)\n    p))\n\n(defn- calculate-match [output control]\n  (when-let [re (-> @control :ignore-output first)]\n    (swap! control update :ignore-output rest)\n    (if-let [match (re-find re output)]\n      match\n      (recur output control))))\n\n(defn- send-output [output control on-output]\n  (when (not-empty output)\n    (if-let [match (calculate-match output control)]\n      (let [new-output (subs output (count match))]\n        (send-output new-output control on-output))\n      (on-output output))))\n\n(defn- parse-edn-string [output control]\n  (try\n    (str (parser/parse-string output))\n    (catch :default ex\n      (when (re-find #\"^Unexpected EOF\" (.-message ex))\n        (swap! control assoc :incomplete-result output)\n        \"[nil :ignore]\"))))\n\n(defn- send-result [output control on-output on-result]\n  (let [edn-str (parse-edn-string output control)\n        [_ id res] (edn/read-string edn-str)\n        exist? (:pending-evals @control)]\n    (when-not (= :ignore id)\n      (swap! control dissoc :incomplete-result)\n      (if (exist? id)\n        (let [edn-size (count edn-str)]\n          (swap! control update :pending-evals disj id)\n          (when (:ignore-prompt @control) (swap! control update :ignore-output\n                                                 conj #\"^\\r?\\n?.*?=> \" #\"\\r?\\n\"))\n          (on-result [id res])\n          (send-output (subs output edn-size) control on-output))\n        (send-output output control on-output)))))\n\n(defn- treat-output [output control on-output on-result]\n  (if output\n    (let [new-output (str (:incomplete-result @control) output)\n          idx (some-> #\"\\[tooling\\$eval-res\" (.exec new-output) .-index)]\n      (case idx\n        nil (send-output new-output control on-output)\n        0 (send-result new-output control on-output on-result)\n        (do\n          (send-output (subs new-output 0 idx) control on-output)\n          (send-result (subs new-output idx) control on-output on-result))))\n    (on-output nil)))\n\n(defn prepare-evals [control on-output on-result]\n  (swap! control assoc\n         :pending-evals #{}\n         :on-fragment #(treat-output % control on-output on-result)))\n\n(defn connect! [host port]\n  (js/Promise.\n   (fn [resolve fail]\n     (let [buffer (atom [])\n           conn (. net createConnection port host)]\n       (.on conn \"connect\" #(resolve {:buffer buffer :conn conn}))\n       (.on conn \"data\" #(swap! buffer conj (str %)))\n       (.on conn \"error\" #(fail (. ^js % -errno)))\n       (.on conn \"close\" #(swap! buffer conj :closed))))))\n"]}