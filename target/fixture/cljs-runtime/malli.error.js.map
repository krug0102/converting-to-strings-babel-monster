{"version":3,"sources":["malli/error.cljc"],"mappings":"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","names":["p__160230","map__160232","cljs.core/--destructure-map","cljs.core.get","malli.error/-pred-min-max-error-fn","pred","message","p__160234","map__160235","schema","value","_","map__160236","min","max","malli.core.properties","cljs.core/not","and__4221__auto__","cljs.core._EQ_","malli.error/default-errors","p__160280","map__160281","likely-misspelling-of","clojure.string.join","cljs.core.map","cljs.core/last","p__160273","map__160274","p__160245","map__160246","cljs.core/count","malli.core.children","cljs.core/first","cljs.core/butlast","cljs.core/int?","cljs.core/double?","p__160263","map__160264","map__160265","p__160261","map__160262","p__160268","map__160269","p__160277","map__160278","p__160247","map__160248","p__160275","map__160276","p__160257","map__160258","malli.error/-maybe-localized","x","locale","cljs.core/map?","malli.error/-message","error","options","or__4223__auto__","malli.core.options","temp__5751__auto__","fn","fexpr__160289","malli.core.eval","malli.error/-ensure","k","cljs.core/sequential?","size'","cljs.core.into","cljs.core/vec","cljs.core.repeat","malli.error/-just-error?","cljs.core/vector?","malli.error/-get","cljs.core/set?","cljs.core/associative?","G__160307","G__160308","malli.error/-put","v","cljs.core.conj","cljs.core.update","e","G__160311","G__160312","G__160313","p__160323","vec__160325","seq__160326","cljs.core/seq","first__160327","cljs.core/next","malli.error/-assoc-in","acc","p","ps","acc'","cljs.core/empty","value'","G__160332","G__160333","G__160334","G__160335","p__160340","p__160341","map__160343","map__160344","malli.error/-path","default-locale","properties","malli.error/-length->threshold","len","pred__160349","p1__160347#","p2__160346#","expr__160350","malli.error/-next-row","previous","current","other-seq","cljs.core.reduce","p__160357","vec__160358","cljs.core.nth","row","diagonal","above","other","update-val","x__4309__auto__","y__4310__auto__","cljs.core/peek","cljs.core/vector","malli.error/-levenshtein","sequence1","sequence2","p1__160364#","p2__160363#","cljs.core/identity","cljs.core/cons","cljs.core.range","malli.error/-similar-key","ky","ky2","min-len","cljs.core.apply","cljs.core/min","p1__160369#","malli.core._comp","clojure.string/starts-with?","cljs.core.subs","cljs.core/str","dist","malli.error/-likely-misspelled","keys","known-keys","key","p1__160372#","cljs.core.filter","cljs.core.remove","cljs.core/not-empty","malli.error/-most-similar-to","p1__160377#","cljs.core.juxt","cljs.core.sort_by","cljs.core/second","var_args","G__160381","malli.error/error-path","js/Error","malli.error.error_path","G__160385","malli.error/error-message","p__160388","p__160389","map__160390","map__160391","malli.error.error_message","type","errors","malli.core.type_properties","G__160395","malli.core.type","G__160397","G__160401","malli.error/with-error-message","malli.error.with_error_message","cljs.core.assoc","G__160413","malli.error/with-error-messages","p__160418","map__160419","explanation","malli.error.with_error_messages","f","cljs.core.doall","p1__160403#","G__160420","G__160427","malli.error/with-spell-checking","p__160428","map__160429","malli.error.with_spell_checking","keep-likely-misspelled-of","!likely-misspelling-of","cljs.core.atom","handle-invalid-value","dispatch","cljs.core/Keyword","types","path","cljs.core/keys","cljs.core/set","$","cljs.core.mapv","p__160434","map__160435","get-keys","vec__160439","malli.core.entries","cljs.core.get_in","error-type","similar","p1__160423#","cljs.core.swap_BANG_","cljs.core/into","G__160446","p__160448","map__160449","fexpr__160451","cljs.core/deref","G__160455","malli.error/humanize","p__160459","p__160460","map__160461","map__160462","malli.error.humanize","cljs.core/coll?","G__160467","G__160468"],"sourcesContent":["(ns malli.error\n  (:require [malli.core :as m]\n            [clojure.string :as str]))\n\n(defn -pred-min-max-error-fn [{:keys [pred message]}]\n  (fn [{:keys [schema value]} _]\n    (let [{:keys [min max]} (m/properties schema)]\n      (cond\n        (not (pred value)) message\n        (and min (= min max)) (str \"should be \" min)\n        (and min max) (str \"should be between \" min \" and \" max)\n        min (str \"should be at least \" min)\n        max (str \"should be at most \" max)))))\n\n(def default-errors\n  {::unknown {:error/message {:en \"unknown error\"}}\n   ::m/missing-key {:error/message {:en \"missing required key\"}}\n   ::m/invalid-type {:error/message {:en \"invalid type\"}}\n   ::m/extra-key {:error/message {:en \"disallowed key\"}}\n   :malli.core/invalid-dispatch-value {:error/message {:en \"invalid dispatch value\"}}\n   ::misspelled-key {:error/fn {:en (fn [{::keys [likely-misspelling-of]} _]\n                                      (str \"should be spelled \" (str/join \" or \" (map last likely-misspelling-of))))}}\n   ::misspelled-value {:error/fn {:en (fn [{::keys [likely-misspelling-of]} _]\n                                        (str \"did you mean \" (str/join \" or \" (map last likely-misspelling-of))))}}\n   ::m/input-remaining {:error/message {:en \"input remaining\"}}\n   ::m/end-of-input {:error/message {:en \"end of input\"}}\n   'any? {:error/message {:en \"should be any\"}}\n   'some? {:error/message {:en \"should be some\"}}\n   'number? {:error/message {:en \"should be a number\"}}\n   'integer? {:error/message {:en \"should be an integer\"}}\n   'int? {:error/message {:en \"should be an int\"}}\n   'pos-int? {:error/message {:en \"should be a positive int\"}}\n   'neg-int? {:error/message {:en \"should be a negative int\"}}\n   'nat-int? {:error/message {:en \"should be a non-negative int\"}}\n   'pos? {:error/message {:en \"should be positive\"}}\n   'neg? {:error/message {:en \"should be negative\"}}\n   'float? {:error/message {:en \"should be a float\"}}\n   'double? {:error/message {:en \"should be a double\"}}\n   'boolean? {:error/message {:en \"should be a boolean\"}}\n   'string? {:error/message {:en \"should be a string\"}}\n   'ident? {:error/message {:en \"should be an ident\"}}\n   'simple-ident? {:error/message {:en \"should be a simple ident\"}}\n   'qualified-ident? {:error/message {:en \"should be a qualified ident\"}}\n   'keyword? {:error/message {:en \"should be a keyword\"}}\n   'simple-keyword? {:error/message {:en \"should be a simple keyword\"}}\n   'qualified-keyword? {:error/message {:en \"should be a qualified keyword\"}}\n   'symbol? {:error/message {:en \"should be a symbol\"}}\n   'simple-symbol? {:error/message {:en \"should be a simple symbol\"}}\n   'qualified-symbol? {:error/message {:en \"should be a qualified symbol\"}}\n   'uuid? {:error/message {:en \"should be a uuid\"}}\n   'uri? {:error/message {:en \"should be a uri\"}}\n   #?@(:clj ['decimal? {:error/message {:en \"should be a decimal\"}}])\n   'inst? {:error/message {:en \"should be an inst\"}}\n   'seqable? {:error/message {:en \"should be a seqable\"}}\n   'indexed? {:error/message {:en \"should be an indexed\"}}\n   'map? {:error/message {:en \"should be a map\"}}\n   'vector? {:error/message {:en \"should be a vector\"}}\n   'list? {:error/message {:en \"should be a list\"}}\n   'seq? {:error/message {:en \"should be a seq\"}}\n   'char? {:error/message {:en \"should be a char\"}}\n   'set? {:error/message {:en \"should be a set\"}}\n   'nil? {:error/message {:en \"should be nil\"}}\n   'false? {:error/message {:en \"should be false\"}}\n   'true? {:error/message {:en \"should be true\"}}\n   'zero? {:error/message {:en \"should be zero\"}}\n   #?@(:clj ['rational? {:error/message {:en \"should be a rational\"}}])\n   'coll? {:error/message {:en \"should be a coll\"}}\n   'empty? {:error/message {:en \"should be empty\"}}\n   'associative? {:error/message {:en \"should be an associative\"}}\n   'sequential? {:error/message {:en \"should be a sequential\"}}\n   #?@(:clj ['ratio? {:error/message {:en \"should be a ratio\"}}])\n   #?@(:clj ['bytes? {:error/message {:en \"should be bytes\"}}])\n   :re {:error/message {:en \"should match regex\"}}\n   :=> {:error/message {:en \"invalid function\"}}\n   'ifn? {:error/message {:en \"should be an ifn\"}}\n   :enum {:error/fn {:en (fn [{:keys [schema]} _]\n                           (str \"should be \"\n                                (if (= 1 (count (m/children schema)))\n                                  (first (m/children schema))\n                                  (str \"either \" (->> (m/children schema) butlast (str/join \", \"))\n                                       \" or \" (last (m/children schema))))))}}\n   :nil {:error/message {:en \"should be nil\"}}\n   :int {:error/fn {:en (-pred-min-max-error-fn {:pred int?, :message \"should be an integer\"})}}\n   :double {:error/fn {:en (-pred-min-max-error-fn {:pred double?, :message \"should be a double\"})}}\n   :string {:error/fn {:en (fn [{:keys [schema value]} _]\n                             (let [{:keys [min max]} (m/properties schema)]\n                               (cond\n                                 (not (string? value)) \"should be a string\"\n                                 (and min (= min max)) (str \"should be \" min \" characters\")\n                                 (and min max) (str \"should be between \" min \" and \" max \" characters\")\n                                 min (str \"should be at least \" min \" characters\")\n                                 max (str \"should be at most \" max \" characters\"))))}}\n   :> {:error/fn {:en (fn [{:keys [schema value]} _]\n                        (if (number? value)\n                          (str \"should be larger than \" (first (m/children schema)))\n                          \"should be a number\"))}}\n   :>= {:error/fn {:en (fn [{:keys [schema value]} _]\n                         (if (number? value)\n                           (str \"should be at least \" (first (m/children schema)))\n                           \"should be a number\"))}}\n   :< {:error/fn {:en (fn [{:keys [schema value]} _]\n                        (if (number? value)\n                          (str \"should be smaller than \" (first (m/children schema)))\n                          \"should be a number\"))}}\n   :<= {:error/fn {:en (fn [{:keys [schema value]} _]\n                         (if (number? value)\n                           (str \"should be at most \" (first (m/children schema)))\n                           \"should be a number\"))}}\n   := {:error/fn {:en (fn [{:keys [schema]} _]\n                        (str \"should be \" (first (m/children schema))))}}\n   :not= {:error/fn {:en (fn [{:keys [schema]} _]\n                           (str \"should not be \" (first (m/children schema))))}}})\n\n(defn- -maybe-localized [x locale]\n  (if (map? x) (get x locale) x))\n\n(defn- -message [error x locale options]\n  (let [options (or options (m/options (:schema error)))]\n    (if x (or (if-let [fn (-maybe-localized (:error/fn x) locale)] ((m/eval fn options) error options))\n              (-maybe-localized (:error/message x) locale)))))\n\n(defn- -ensure [x k]\n  (if (sequential? x)\n    (let [size' (count x)]\n      (if (> k size') (into (vec x) (repeat (- (inc k) size') nil)) x))\n    x))\n\n(defn- -just-error? [x]\n  (and (vector? x) (= 1 (count x)) (string? (first x))))\n\n(defn- -get [x k]\n  (if (or (set? x) (associative? x)) (get x k) (-get (vec x) k)))\n\n(defn- -put [x k v]\n  (cond\n    (set? x) (conj x v)\n    (associative? x) (update x k (fn [e] (if (-just-error? v) (into (vec e) v) v)))\n    :else (-put (vec x) k v))) ;; we coerce errors into vectors\n\n(defn- -assoc-in [acc value [p & ps] error]\n  (cond\n    p (let [acc' (-ensure (or acc (empty value)) p)\n            value' (if ps (-assoc-in (-get acc p) (-get value p) ps error) error)]\n        (-put acc' p value'))\n    (map? value) (recur acc value [:malli/error] error)\n    acc acc\n    :else error))\n\n(defn- -path [{:keys [schema]}\n              {:keys [locale default-locale]\n               :or {default-locale :en}}]\n  (let [properties (m/properties schema)]\n    (or (-maybe-localized (:error/path properties) locale)\n        (-maybe-localized (:error/path properties) default-locale))))\n\n;;\n;; spell checking (kudos to https://github.com/bhauman/spell-spec)\n;;\n\n(defn- -length->threshold [len]\n  (condp #(<= %2 %1) len, 4 0, 5 1, 6 2, 11 3, 20 4 (int (* 0.2 len))))\n\n(defn- -next-row [previous current other-seq]\n  (reduce\n    (fn [row [diagonal above other]]\n      (let [update-val (if (= other current) diagonal (inc (min diagonal above (peek row))))]\n        (conj row update-val)))\n    [(inc (first previous))]\n    (map vector previous (next previous) other-seq)))\n\n(defn- -levenshtein [sequence1 sequence2]\n  (peek (reduce (fn [previous current] (-next-row previous current sequence2))\n                (map #(identity %2) (cons nil sequence2) (range))\n                sequence1)))\n\n(defn- -similar-key [ky ky2]\n  (let [min-len (apply min (map (m/-comp count #(if (str/starts-with? % \":\") (subs % 1) %) str) [ky ky2]))\n        dist (-levenshtein (str ky) (str ky2))]\n    (when (<= dist (-length->threshold min-len)) dist)))\n\n(defn- -likely-misspelled [keys known-keys key]\n  (when-not (known-keys key)\n    (->> known-keys (filter #(-similar-key % key)) (remove keys) (not-empty))))\n\n(defn- -most-similar-to [keys key known-keys]\n  (->> (-likely-misspelled keys known-keys key)\n       (map (juxt #(-levenshtein (str %) (str key)) identity))\n       (filter first)\n       (sort-by first)\n       (map second)\n       (not-empty)))\n\n;;\n;; public api\n;;\n\n(defn error-path\n  ([error]\n   (error-path error nil))\n  ([error options]\n   (into (:in error) (-path error options))))\n\n(defn error-message\n  ([error]\n   (error-message error nil))\n  ([{:keys [schema type] :as error}\n    {:keys [errors locale default-locale]\n     :or {errors default-errors\n          default-locale :en} :as options}]\n   (or (-message error (m/properties schema) locale options)\n       (-message error (m/type-properties schema) locale options)\n       (-message error (errors type) locale options)\n       (-message error (errors (m/type schema)) locale options)\n       (-message error (m/properties schema) default-locale options)\n       (-message error (m/type-properties schema) default-locale options)\n       (-message error (errors type) default-locale options)\n       (-message error (errors (m/type schema)) default-locale options)\n       (-message error (errors ::unknown) locale options)\n       (-message error (errors ::unknown) default-locale options))))\n\n(defn with-error-message\n  ([error]\n   (with-error-message error nil))\n  ([error options]\n   (assoc error :message (error-message error options))))\n\n(defn with-error-messages\n  ([explanation]\n   (with-error-messages explanation nil))\n  ([explanation {f :wrap :or {f identity} :as options}]\n   (when explanation\n     (update explanation :errors (fn [errors] (doall (map #(f (with-error-message % options)) errors)))))))\n\n(defn with-spell-checking\n  ([explanation]\n   (with-spell-checking explanation nil))\n  ([explanation {:keys [keep-likely-misspelled-of]}]\n   (when explanation\n     (let [!likely-misspelling-of (atom #{})\n           handle-invalid-value (fn [schema _ value]\n                                  (let [dispatch (:dispatch (m/properties schema))]\n                                    (if (keyword? dispatch)\n                                      (let [value (dispatch value)]\n                                        [::misspelled-value value #{value}]))))\n           types {::m/extra-key (fn [_ path value] [::misspelled-key (last path) (-> value keys set (or #{}))])\n                  ::m/invalid-dispatch-value handle-invalid-value}]\n       (update\n         explanation\n         :errors\n         (fn [errors]\n           (as-> errors $\n                 (mapv (fn [{:keys [schema path type] :as error}]\n                         (if-let [get-keys (types type)]\n                           (let [known-keys (->> schema (m/entries) (map first) (set))\n                                 value (get-in (:value explanation) (butlast path))\n                                 [error-type key keys] (get-keys schema path value)\n                                 similar (-most-similar-to keys key known-keys)\n                                 likely-misspelling-of (mapv #(conj (vec (butlast path)) %) (vec similar))]\n                             (swap! !likely-misspelling-of into likely-misspelling-of)\n                             (cond-> error similar (assoc :type error-type\n                                                          ::likely-misspelling-of likely-misspelling-of)))\n                           error)) $)\n                 (if-not keep-likely-misspelled-of\n                   (remove (fn [{:keys [path type]}]\n                             (and (@!likely-misspelling-of path)\n                                  (= type ::m/missing-key))) $)\n                   $))))))))\n\n(defn humanize\n  ([explanation]\n   (humanize explanation nil))\n  ([{:keys [value errors]} {f :wrap :or {f :message} :as options}]\n   (if errors\n     (if (coll? value)\n       (reduce\n         (fn [acc error]\n           (-assoc-in acc value (error-path error options) [(f (with-error-message error options))]))\n         nil errors)\n       [(f (with-error-message (first errors) options))]))))\n"]}