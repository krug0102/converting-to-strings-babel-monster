{"version":3,"sources":["repl_tooling/integrations/repls.cljs"],"mappings":"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","names":["repl-tooling.integrations.repls/detect-nrepl","buffer","p","promesa.core/deferred","cljs.core/deref","cljs.core._EQ_","cljs.core/add-watch","p__40905","vec__40906","cljs.core.nth","_","val","cljs.core/remove-watch","cljs.core/re-find","promesa.core.resolve_BANG_","repl-tooling.integrations.repls/detect-output-kind","row","kind-p","temp__5753__auto__","row-kind","cljs.core.keyword","cljs.core/second","repl-tooling.integrations.repls/detect-socket-kind","conn","control","p1__40917#","repl-tooling.repl-client.connection/treat-buffer!","cljs.core/identity","promesa.protocols/-bind","___31820__auto__","___31810__auto__","___31809__auto__","promesa.protocols/-promise","repl-tooling.repl-client.connection/next-line","kind","cljs.core.swap_BANG_","cljs.core/assoc","repl-tooling.integrations.repls/connect-and-detect!","host","port","on-output","p__40935","map__40938","cljs.core/--destructure-map","cljs.core.get","repl-tooling.repl-client.connection/connect!","promesa.core.delay","repl-tooling.nrepl.bencode/encode","nrepl?","repl-tooling.repl-client.nrepl/repl-for","repl-tooling.integrations.repls/add-to-eval-queue","cmd-for","command","opts","callback","pending-evals","eval-cmd","id","or__4223__auto__","cljs.core.gensym","G__40945","temp__5751__auto__","result","pending","cljs.core.assoc","cljs.core/PROTOCOL_SENTINEL","this__4472__auto__","k__4473__auto__","this__4474__auto__","k40955","else__4475__auto__","G__40974","cljs.core/Keyword","__extmap","this__4492__auto__","f__4493__auto__","init__4494__auto__","cljs.core.reduce","ret__4495__auto__","p__40981","vec__40982","k__4496__auto__","v__4497__auto__","this__4487__auto__","writer__4488__auto__","opts__4489__auto__","pr-pair__4490__auto__","keyval__4491__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__40954","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4470__auto__","__meta","this__4467__auto__","__hash","this__4476__auto__","cljs.core/count","this__4468__auto__","h__4330__auto__","coll__4469__auto__","cljs.core/hash-unordered-coll","this40956","other40957","this__4482__auto__","k__4483__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4479__auto__","G__41009","this__4480__auto__","k__4481__auto__","pred__41010","cljs.core/keyword-identical?","expr__41011","this__4485__auto__","cljs.core/seq","cljs.core/MapEntry","this__4471__auto__","this__4477__auto__","entry__4478__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","repl-tooling.integrations.repls/Generic","this__4516__auto__","cljs.core/List","writer__4517__auto__","cljs.core/-write","G__40966","extmap__4512__auto__","G__41029","cljs.core/record?","repl-tooling.integrations.repls/->Generic","repl-tooling.integrations.repls/map->Generic","repl-tooling.integrations.repls/capture-eval-result","vec__41045","map__41049","edn-result","pass","ignore","msg","cljs.core.merge","repl-tooling.integrations.repls/send-namespace","ns-command","namespace","cljs.core/update","cljs.core/conj","repl-tooling.integrations.repls/wait-for-blob-done","G__41066","clojure.string/replace","run41096","promesa.core/*loop-run-fn*","deferred41095","loop41094","params__31844__auto__","promesa.core.handle","promesa.core.then","promesa.core/all","p__41097","vec__41098","res__31845__auto__","err__31846__auto__","promesa.core/reject!","cljs.core/map?","G__41104","G__41109","curr","cljs.core/PersistentArrayMap","repl-tooling.integrations.repls/instantiate-correct-evaluator","repl-kind","cljs.core.atom","G__41127","p__41133","map__41134","repl_tooling.repl_client.source.wrap_command","p__41136","map__41137","o","res","p__41138","map__41139","p__41140","map__41141","p__41142","map__41143","p__41144","map__41145","eval-command","G__41146","p__41147","map__41148","p__41149","map__41150","p__41155","map__41156","repl-tooling.repl-client.clojure/prepare-unrepl-evaluator","promesa.core/race","p1__41122#","p1__41124#","repl-tooling.repl-client.connection/prepare-evals","out","G__41171","repl-tooling.integrations.repls/ignore-output-on-control","js/repl-tooling","js/repl-tooling.integrations","js/repl-tooling.integrations.repls","js/repl-tooling.integrations.repls.connections","repl-tooling.integrations.repls/connections","repl-tooling.integrations.repls/connect-repl!","p__41300","map__41303","evaluator","repl-tooling.integrations.repls/disconnect!","map__41319","js/setTimeout","cljs.core/last"],"sourcesContent":["(ns repl-tooling.integrations.repls\n  (:require [repl-tooling.repl-client.connection :as connection]\n            [repl-tooling.repl-client.clj-helper :as h]\n            [promesa.core :as p]\n            [clojure.string :as str]\n            [repl-tooling.nrepl.bencode :as bencode]\n            [repl-tooling.repl-client.source :as source]\n            [repl-tooling.repl-client.clojure :as clj]\n            [repl-tooling.repl-client.nrepl :as nrepl]\n            [repl-tooling.eval :as eval]))\n\n;; Detection\n(defn- detect-nrepl [buffer]\n  (let [p (p/deferred)]\n    (if (= [] @buffer)\n      (add-watch buffer :nrepl\n                 (fn [_ _ _ [val]]\n                   (remove-watch buffer :nrepl)\n                   (if (re-find #\"^d\\d\" val)\n                     (p/resolve! p true)\n                     (p/resolve! p false))))\n      (p/resolve! p false))\n    p))\n\n(defn- detect-output-kind [row kind-p]\n  (when-let [row-kind (re-find #\":using-(.*)-repl\" (str row))]\n    (p/resolve! kind-p (keyword (second row-kind)))))\n\n(defn- detect-socket-kind [^js conn buffer]\n  (let [kind-p (p/deferred)\n        control (connection/treat-buffer! buffer #(detect-output-kind % kind-p) identity)]\n    (p/let [_ (.write conn \"\\n\") ; Flush nREPL data detection\n            _ (connection/next-line control)\n            _ (.write conn (str \"#?(\"\n                                \":bb :using-bb-repl \"\n                                \":joker :using-joker-repl \"\n                                \":clje :using-clje-repl \"\n                                \":cljs :using-cljs-repl \"\n                                \":cljr :using-cljr-repl \"\n                                \":clj :using-clj-repl \"\n                                \")\\n\"))\n            _ (connection/next-line control)\n            _ (.write conn \":using-unknown-repl\\n\")\n            kind kind-p]\n      (swap! control assoc :on-line identity)\n      {:conn conn\n       :buffer buffer\n       :control control\n       :repl-kind kind})))\n\n(defn connect-and-detect! [host port on-output]\n    (p/let [{:keys [conn buffer]} (connection/connect! host port)\n            _ (p/delay 2)\n            _ (.write conn (bencode/encode {:id \"new-session\" :op :clone}) \"binary\")\n            nrepl? (detect-nrepl buffer)]\n      (if nrepl?\n        (nrepl/repl-for conn buffer on-output)\n        (detect-socket-kind conn buffer))))\n\n;; REPLs\n(defn add-to-eval-queue [cmd-for command opts callback pending-evals eval-cmd]\n  (let [id (or (:id opts) (gensym))\n        command (cmd-for {:command command :id id})]\n    (if-let [result (:result command)]\n      (let [pending (assoc opts :command result :callback callback :id id)]\n        (swap! pending-evals assoc id pending)\n        (eval-cmd pending))\n      (callback command))\n    id))\n\n(defrecord Generic [pending-evals cmd-for eval-cmd]\n  eval/Evaluator\n  (evaluate [_ command opts callback]\n    (add-to-eval-queue cmd-for command opts callback pending-evals eval-cmd))\n  (break [_ _]))\n\n;; Integrations, at last\n(defn capture-eval-result [pending-evals on-output result]\n  (let [[id edn-result] result\n        {:keys [callback pass ignore]} (get @pending-evals id)\n        msg (merge pass edn-result)]\n    (when-not ignore (on-output msg))\n    (callback msg)))\n\n(defn- send-namespace [^js conn ns-command namespace control]\n  (when namespace\n    (swap! control update :ignore-output conj #\"^\\r?\\n?.*?=> \" #\"(?:.+Namespace.+|nil)\\r?\\n\")\n    (.write conn (str \"(\" ns-command namespace \")\"))))\n\n(defn- wait-for-blob-done [kind conn control]\n  (.write conn (cond-> (str (h/generic-blob-contents) \"\\n\")\n                       (= :joker kind) (str/replace #\"clojure.string\" \"joker.string\")))\n  (p/loop [curr (connection/next-line control)]\n    (when-not (re-find #\":DONE-BLOB\" curr)\n      (p/recur (connection/next-line control)))))\n\n(defn- instantiate-correct-evaluator [repl-kind ^js conn control on-output]\n  (let [pending-evals (atom {})\n        cmd-for (case repl-kind\n                  :bb (fn [{:keys [command id]}]\n                        (source/wrap-command id command 'java.lang.Throwable true))\n                  :joker (fn [{:keys [command id]}]\n                           (let [o (source/wrap-command id command 'Error false)\n                                 res (:result o)]\n                             (if res\n                               {:result (str/replace res #\"clojure\\.core/\" \"joker.core/\")}\n                               o)))\n                  :cljs (fn [{:keys [command id]}]\n                          (source/wrap-command id command :default true))\n                  :cljr (fn [{:keys [command id]}]\n                          (source/wrap-command id command 'System.Exception true))\n                  :clje (fn [{:keys [command id]}]\n                          (source/wrap-command id command '_ false))\n                  (fn [{:keys [command id]}]\n                    (source/wrap-command id command 'Exception true)))\n        eval-command (case repl-kind\n                       :bb (fn [{:keys [id command namespace]}]\n                             (send-namespace conn \"in-ns '\" namespace control)\n                             (swap! control update :pending-evals conj id)\n                             (.write conn command))\n                       :joker (fn [{:keys [id command namespace]}]\n                                (send-namespace conn \"joker.core/ns \" namespace control)\n                                (swap! control update :pending-evals conj id)\n                                (.write conn command))\n                       (fn [{:keys [id command namespace]}]\n                         (send-namespace conn \"in-ns '\" namespace control)\n                         (swap! control update :pending-evals conj id)\n                         (.write conn command)))]\n\n    (if (= :clj repl-kind)\n      (clj/prepare-unrepl-evaluator conn control on-output)\n      (p/do!\n        (p/race [(wait-for-blob-done repl-kind conn control) (p/delay 1000)])\n        (swap! control assoc :ignore-prompt true)\n        (connection/prepare-evals control\n                                  #(if-let [out %] (on-output {:out out}) (on-output nil))\n                                  #(capture-eval-result pending-evals on-output %))\n        (->Generic pending-evals cmd-for eval-command)))))\n\n(defn- ignore-output-on-control [control repl-kind]\n  (if-not (= :unknown repl-kind)\n    (swap! control update :ignore-output conj #\":using-unknown-repl\" #\"^\\r?\\n?.*?=> \")))\n\n(defonce connections (atom {}))\n(defn connect-repl! [id host port on-output]\n  (p/let [{:keys [conn control repl-kind buffer evaluator]}\n          (connect-and-detect! host port on-output)]\n\n    (swap! connections assoc id {:conn conn :buffer buffer})\n    (if evaluator\n      [repl-kind evaluator]\n      (p/let [_ (ignore-output-on-control control repl-kind)\n              evaluator (instantiate-correct-evaluator repl-kind conn control on-output)]\n        [repl-kind evaluator]))))\n\n(defn disconnect! [id]\n  (when-let [{:keys [conn buffer]} ^js (get @connections id)]\n    (js/setTimeout (fn []\n                     (when-not (-> @buffer last (= :closed))\n                       (swap! buffer conj :closed)))\n                   1000)\n    (.end conn)))\n"]}