{"version":3,"sources":["sci/impl/protocols.cljc"],"mappings":"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","names":["var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","sci.impl.protocols/defprotocol","seq154715","G__154716","cljs.core/first","cljs.core/next","G__154717","G__154718","G__154719","self__4816__auto__","_","_ctx","protocol-name","signatures","vec__154720","cljs.core.nth","vec__154723","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core.apply","cljs.core/array-map","cljs.core/hash-set","docstring","sig","cljs.core/rest","opts","opt","cljs.core/Keyword","cljs.core/second","cljs.core/nnext","current-ns","sci.impl.vars/current-ns-name","expansion","cljs.core/with-meta","cljs.core.map","p__154728","vec__154729","seq__154730","first__154731","method-name","cljs.core/vec","fq-name","cljs.core.symbol","impls","cljs.core.conj","cljs.core.keyword","sci.impl.protocols/extend-protocol","seq154751","G__154752","G__154753","G__154754","G__154755","ctx","p1__154750#","p1__154749#","sci.impl.utils/split-when","cljs.core/seq?","protocol-var","fexpr__154756","cljs.core/deref","sci.impl.utils/eval-resolve-state","protocol-ns","pns","sci.impl.vars/getName","fq-meth-name","p__154758","vec__154759","seq__154760","first__154761","type","meths","meth","sci.impl.protocols/extend","seq154762","G__154763","G__154764","atype","proto+mmaps","seq__154765","chunk__154767","count__154768","i__154769","vec__154813","temp__5753__auto__","cljs.core/chunked-seq?","c__4649__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__154839","proto","mmap","cljs.core.partition","proto-ns","seq__154817","chunk__154818","count__154819","i__154820","vec__154830","vec__154834","seq__154843","chunk__154844","count__154845","i__154846","vec__154856","vec__154860","fn-name","f","fn-sym","cljs.core/name","env","multi-method-var","cljs.core.get_in","multi-method","sci.impl.multimethods/multi-fn-add-method-impl","sci.impl.protocols/extend-type","seq154865","G__154866","G__154867","G__154868","G__154869","proto+meths","p1__154863#","p__154872","vec__154873","seq__154874","first__154875","p1__154864#","fexpr__154876","sci.impl.protocols/reify","seq154882","G__154883","G__154884","G__154885","G__154886","interface","cljs.core.into","sci.impl.protocols/satisfies?","protocol","obj","cljs.core/boolean","p1__154892#","cljs.core/some","cljs.core/get-method","sci.impl.types/type-impl","sci.impl.protocols/extends?","p1__154893#"],"sourcesContent":["(ns sci.impl.protocols\n  {:no-doc true}\n  (:refer-clojure :exclude [defprotocol extend-protocol\n                            extend extend-type reify satisfies?\n                            extends? implements?])\n  (:require [sci.impl.multimethods :as mms]\n            [sci.impl.types :as types]\n            [sci.impl.utils :as utils]\n            [sci.impl.vars :as vars]))\n\n(defn defprotocol [_ _ _ctx protocol-name & signatures]\n  (let [[docstring signatures]\n        (let [sig (first signatures)]\n          (if (string? sig) [sig (rest signatures)]\n              [nil signatures]))\n        [opts signatures]\n        (let [opt (first signatures)]\n          (if (keyword? opt) [{opt (second signatures)} (nnext signatures)]\n              [nil signatures]))\n        current-ns (str (vars/current-ns-name))\n        expansion\n        `(do\n           (def  ~(with-meta protocol-name\n                    {:doc docstring}) {:methods #{}\n                                       :ns *ns*})\n           ~@(map (fn [[method-name & _]]\n                    (let [fq-name (symbol (str current-ns) (str method-name))\n                          impls [`(defmulti ~method-name clojure.core/protocol-type-impl)\n                                 `(defmethod ~method-name :sci.impl.protocols/reified [x# & args#]\n                                    (let [methods# (clojure.core/-reified-methods x#)]\n                                      (apply (get methods# '~method-name) x# args#)))]\n                          impls (if (:extend-via-metadata opts)\n                                  (conj impls\n                                        `(defmethod ~method-name :default [x# & args#]\n                                           (let [meta# (meta x#)\n                                                 method# (get meta# '~fq-name)]\n                                             (if method#\n                                               (apply method# x# args#)\n                                               (throw (new #?(:clj IllegalArgumentException\n                                                              :cljs js/Error)\n                                                           (str \"No implementation of method: \"\n                                                                ~(keyword method-name) \" of protocol: \"\n                                                                (var ~protocol-name) \" found for: \"\n                                                                (clojure.core/protocol-type-impl x#))))))))\n                                  impls)]\n                      `(do\n                         ~@impls\n                         #?(:clj (alter-var-root (var ~protocol-name)\n                                                 update :methods conj ~method-name)\n                            :cljs (def ~protocol-name\n                                    (update ~protocol-name :methods conj ~method-name))))))\n                  signatures))]\n    expansion))\n\n(defn extend-protocol [_ _ ctx protocol-name & impls]\n  (let [impls (utils/split-when #(not (seq? %)) impls)\n        protocol-var (@utils/eval-resolve-state ctx protocol-name)\n        protocol-ns (-> protocol-var deref :ns)\n        pns (str (vars/getName protocol-ns))\n        fq-meth-name #(symbol pns %)\n        expansion\n        `(do ~@(map (fn [[type & meths]]\n                      `(do\n                         ~@(map (fn [meth]\n                                  `(defmethod ~(fq-meth-name (str (first meth)))\n                                     ~type\n                                     ~(second meth) ~@(nnext meth)))\n                                meths)))\n                    impls))]\n    #_(prn expansion)\n    expansion))\n\n(defn extend [ctx atype & proto+mmaps]\n  (doseq [[proto mmap] (partition 2 proto+mmaps)\n          :let [proto-ns (:ns proto)\n                pns (vars/getName proto-ns)]]\n    #_(when-not (protocol? proto)\n        (throw (new #?(:clj IllegalArgumentException\n                       :cljs js/Error)\n                    (str proto \" is not a protocol\"))))\n    #_(when (implements? proto atype)\n        (throw (new #?(:clj IllegalArgumentException\n                       :cljs js/Error)\n                    (str atype \" already directly implements \" (:on-interface proto) \" for protocol:\"\n                         (:var proto)))))\n    (doseq [[fn-name f] mmap]\n      (let [fn-sym (symbol (name fn-name))\n            env @(:env ctx)\n            multi-method-var (get-in env [:namespaces pns fn-sym])\n            multi-method @multi-method-var]\n        (mms/multi-fn-add-method-impl multi-method atype f))\n      )\n    #_(-reset-methods (vars/alter-var-root (:var proto) assoc-in [:impls atype] mmap))))\n\n(defn extend-type [_ _ ctx type & proto+meths]\n  (let [proto+meths (utils/split-when #(not (seq? %)) proto+meths)]\n    `(do ~@(map (fn [[proto & meths]]\n                  (let [protocol-var (@utils/eval-resolve-state ctx proto)\n                        protocol-ns (-> protocol-var deref :ns)\n                        pns (str (vars/getName protocol-ns))\n                        fq-meth-name #(symbol pns %)]\n                    `(do\n                       ~@(map (fn [meth]\n                                `(defmethod ~(fq-meth-name (str (first meth)))\n                                   ~type ~(second meth) ~@(nnext meth)))\n                              meths)))) proto+meths))))\n\n(defn reify [_ _ _ctx interface & meths]\n  (let [meths (into {} (map (fn [meth]\n                              `['~(first meth) (fn ~(second meth) ~@(nnext meth))])\n                            meths))]\n    `(clojure.core/-reified ~interface ~meths)))\n\n(defn satisfies? [protocol obj]\n  (boolean (some #(get-method % (types/type-impl obj)) (:methods protocol))))\n\n(defn extends?\n  \"Returns true if atype extends protocol\"\n  [protocol atype]\n  (boolean (some #(get-method % atype) (:methods protocol))))\n"]}