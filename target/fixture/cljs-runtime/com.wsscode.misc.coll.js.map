{"version":3,"sources":["com/wsscode/misc/coll.cljc"],"mappings":"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","names":["var_args","G__157403","com.wsscode.misc.coll/distinct-by","js/Error","f","rf","seen","cljs.core/volatile!","result","x","fx","cljs.core/deref","cljs.core/contains?","cljs.core.conj","coll","step","xs","cljs.core/LazySeq","p__157407","vec__157408","cljs.core.nth","temp__5753__auto__","s","cljs.core/seq","cljs.core/rest","cljs.core/cons","G__157413","com.wsscode.misc.coll/dedupe-by","pv","prior","cljs.core/vreset!","cljs.core._EQ_","cljs.core.sequence","com.wsscode.misc.coll.dedupe_by","com.wsscode.misc.coll/index-by","cljs.core.reduce","m","cljs.core.assoc","com.wsscode.misc.coll/find-first","cljs.core.filter","cljs.core/first","com.wsscode.misc.coll/sconj","cljs.core.fnil","cljs.core/conj","com.wsscode.misc.coll/vconj","com.wsscode.misc.coll/conj-at-index","v","idx","before","cljs.core.subvec","after","cljs.core/count","cljs.core.into","cljs.core.concat","com.wsscode.misc.coll/index-of","p__157431","vec__157432","_","i","x'","cljs.core/reduced","cljs.core.map_indexed","cljs.core/vector","G__157447","com.wsscode.misc.coll/queue","cljs.core/PersistentQueue","com.wsscode.misc.coll.queue","com.wsscode.misc.coll/make-map-entry","k","cljs.core/MapEntry","com.wsscode.misc.coll/map-keys","cljs.core.map","G__157452","cljs.core/key","cljs.core/val","com.wsscode.misc.coll/map-vals","G__157455","com.wsscode.misc.coll/filter-keys","cljs.core.comp","com.wsscode.misc.coll/filter-vals","com.wsscode.misc.coll/remove-keys","cljs.core.remove","com.wsscode.misc.coll/remove-vals","com.wsscode.misc.coll/keys-set","cljs.core/map?","cljs.core/keys","G__157458","com.wsscode.misc.coll/merge-grow","a","b","cljs.core/set?","clojure.set.union","cljs.core.merge_with","com.wsscode.misc.coll/merge-defaults","defaults","cljs.core/reduce-kv","G__157467","com.wsscode.misc.coll/assoc-if","args-arr__4850__auto__","len__4829__auto__","i__4830__auto__","argseq__4851__auto__","cljs.core/IndexedSeq","seq157462","G__157463","cljs.core/next","G__157464","G__157465","self__4816__auto__","kvs","ret","com.wsscode.misc.coll.assoc_if","cljs.core/second","cljs.core/nnext","G__157477","com.wsscode.misc.coll/update-contained","seq157470","G__157471","G__157472","G__157473","G__157474","G__157475","G__157476","cljs.core.update","a1","a2","a3","args","cljs.core.apply","cljs.core/update","G__157492","com.wsscode.misc.coll/update-if","seq157485","G__157486","G__157487","G__157488","G__157489","G__157490","G__157491","cljs.core.get","com.wsscode.misc.coll/native-map?","cljs.core/PersistentArrayMap","cljs.core/PersistentHashMap","G__157495","com.wsscode.misc.coll/restore-order","inputs","key","items","p1__157493#","com.wsscode.misc.coll.restore_order","default-fn","index","input","or__4223__auto__","com.wsscode.misc.coll/iterator","cljs.core/iter","com.wsscode.misc.coll/coll-append-at-head?","cljs.core/vector?","com.wsscode.misc.coll/collection?","cljs.core/sequential?","p__157496","p__157497","vec__157498","seq__157499","first__157500","vec__157501","seq__157502","first__157503","com.wsscode.misc.coll/vector-compare","value1","rest1","value2","rest2","cljs.core/compare"],"sourcesContent":["(ns com.wsscode.misc.coll\n  (:require\n    [clojure.set :as set])\n  #?(:clj\n     (:import\n       (clojure.lang\n         MapEntry))))\n\n(defn distinct-by\n  \"Returns a lazy sequence of the elements of coll, removing any elements that\n  return duplicate values when passed to a function f.\"\n  ([f]\n   (fn [rf]\n     (let [seen (volatile! #{})]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result x]\n          (let [fx (f x)]\n            (if (contains? @seen fx)\n              result\n              (do (vswap! seen conj fx)\n                  (rf result x)))))))))\n  ([f coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                  ((fn [[x :as xs] seen]\n                     (when-let [s (seq xs)]\n                       (let [fx (f x)]\n                         (if (contains? seen fx)\n                           (recur (rest s) seen)\n                           (cons x (step (rest s) (conj seen fx)))))))\n                   xs seen)))]\n     (step coll #{}))))\n\n(defn dedupe-by\n  \"Returns a lazy sequence removing consecutive duplicates in coll when passed to a function f.\n  Returns a transducer when no collection is provided.\"\n  {:added \"1.7\"}\n  ([f]\n   (fn [rf]\n     (let [pv (volatile! ::none)]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result x]\n          (let [prior @pv\n                fx    (f x)]\n            (vreset! pv fx)\n            (if (= prior fx)\n              result\n              (rf result x))))))))\n  ([f coll] (sequence (dedupe-by f) coll)))\n\n(defn index-by\n  \"Like group by, but will keep only the last result.\"\n  [f coll]\n  (reduce\n    (fn [m x]\n      (assoc m (f x) x))\n    {}\n    coll))\n\n(defn find-first\n  \"Return the first element in coll that returns true for f.\"\n  [f coll]\n  (->> coll\n       (filter f)\n       first))\n\n(def sconj (fnil conj #{}))\n(def vconj (fnil conj []))\n\n(defn conj-at-index\n  \"Add element to a vector at some specific index. Only works with vectors!\"\n  [v idx x]\n  (let [before (subvec v 0 idx)\n        after  (subvec v idx (count v))]\n    (into [] (concat before [x] after))))\n\n(defn index-of\n  \"Find the index of element x in coll. Return nil if element is not found.\"\n  [coll x]\n  (reduce\n    (fn [_ [i x']]\n      (if (= x x')\n        (reduced i)))\n    nil\n    (map-indexed vector coll)))\n\n(defn queue\n  \"Return a blank immutable queue or create one from coll.\"\n  ([] #?(:clj  clojure.lang.PersistentQueue/EMPTY\n         :cljs cljs.core/PersistentQueue.EMPTY))\n  ([coll]\n   (into (queue) coll)))\n\n(defn make-map-entry\n  \"CLJC helper to create MapEntry.\"\n  [k v]\n  #?(:clj\n     (MapEntry. k v)\n\n     :cljs\n     (MapEntry. k v nil)))\n\n(defn map-keys\n  \"Map over the given hash-map keys.\n\n  Example:\n    (map-keys #(str/replace (name %) \\\"_\\\" \\\"-\\\") {\\\"foo_bar\\\" 1}) => {\\\"foo-bar\\\" 1}\n  \"\n  [f m]\n  (into {} (map (fn [x] (make-map-entry (f (key x)) (val x)))) m))\n\n(defn map-vals\n  \"Map over the given hash-map vals.\n\n  Example:\n    (map-vals inc {:a 1 :b 2})\n  \"\n  [f m]\n  (into {} (map (fn [x] (make-map-entry (key x) (f (val x))))) m))\n\n(defn filter-keys\n  [f m]\n  (into {} (filter (comp f key)) m))\n\n(defn filter-vals\n  [f m]\n  (into {} (filter (comp f val)) m))\n\n(defn remove-keys\n  [f m]\n  (into {} (remove (comp f key)) m))\n\n(defn remove-vals\n  [f m]\n  (into {} (remove (comp f val)) m))\n\n(defn keys-set\n  \"Return the map keys, as a set. This also checks if the entry is a map, otherwise\n  returns nil (instead of throw).\"\n  [m]\n  (if (map? m) (into #{} (keys m))))\n\n(defn merge-grow\n  \"Additive merging.\n\n  When merging maps, it does a deep merge.\n  When merging sets, makes a union of them.\n\n  When value of the right side is nil, the left side will be kept.\n\n  For the rest works as standard merge.\"\n  ([] {})\n  ([a] a)\n  ([a b]\n   (cond\n     (and (set? a) (set? b))\n     (set/union a b)\n\n     (and (map? a) (map? b))\n     (merge-with merge-grow a b)\n\n     (nil? b) a\n\n     :else\n     b)))\n\n(defn merge-defaults\n  \"Like merge, but only add keys that are not present in the original map.\"\n  [m defaults]\n  (reduce-kv\n    (fn [m k v]\n      (if (contains? m k)\n        m\n        (assoc m k v)))\n    m\n    defaults))\n\n(defn assoc-if\n  \"Like assoc, but noop if v is falsy.\"\n  ([m k v]\n   (if v\n     (assoc m k v)\n     m))\n  ([m k v & kvs]\n   (let [ret (assoc-if m k v)]\n     (if kvs\n       (recur ret (first kvs) (second kvs) (nnext kvs))\n       ret))))\n\n(defn update-contained\n  \"Update some key when that key is present in the map.\"\n  ([m k f]\n   (if (contains? m k)\n     (update m k f)\n     m))\n  ([m k f a1]\n   (if (contains? m k)\n     (update m k f a1)\n     m))\n  ([m k f a1 a2]\n   (if (contains? m k)\n     (update m k f a1 a2)\n     m))\n  ([m k f a1 a2 a3]\n   (if (contains? m k)\n     (update m k f a1 a2 a3)\n     m))\n  ([m k f a1 a2 a3 & args]\n   (if (contains? m k)\n     (apply update m k f a1 a2 a3 args)\n     m)))\n\n(defn update-if\n  \"Update some key that key is present in the map and value is truthy.\"\n  ([m k f]\n   (if (get m k)\n     (update m k f)\n     m))\n  ([m k f a1]\n   (if (get m k)\n     (update m k f a1)\n     m))\n  ([m k f a1 a2]\n   (if (get m k)\n     (update m k f a1 a2)\n     m))\n  ([m k f a1 a2 a3]\n   (if (get m k)\n     (update m k f a1 a2 a3)\n     m))\n  ([m k f a1 a2 a3 & args]\n   (if (get m k)\n     (apply update m k f a1 a2 a3 args)\n     m)))\n\n(defn native-map? [x]\n  #?(:clj  (or (instance? clojure.lang.PersistentArrayMap x)\n               (instance? clojure.lang.PersistentHashMap x))\n     :cljs (or (instance? cljs.core/PersistentArrayMap x)\n               (instance? cljs.core/PersistentHashMap x))))\n\n(defn restore-order\n  \"Sorts output list to match input list order.\"\n  ([inputs key items]\n   (restore-order inputs key items #(hash-map key (get % key))))\n  ([inputs key items default-fn]\n   (let [index (index-by key items)]\n     (into []\n           (map (fn [input]\n                  (or (get index (get input key))\n                      (default-fn input))))\n           inputs))))\n\n(defn iterator\n  \"CLJC utility to get an iterator from the collection.\"\n  [coll]\n  #?(:clj\n     (if (instance? java.lang.Iterable coll)\n       (.iterator ^java.lang.Iterable coll)\n       (.iterator (seq coll)))\n\n     :cljs\n     (iter coll)))\n\n(defn coll-append-at-head?\n  \"Return true if column add items at head with conj.\"\n  [s]\n  (not (or (vector? s) (set? s))))\n\n(defn collection?\n  \"Returns true for sequential collections and sets, false for maps.\"\n  [x]\n  (or (sequential? x)\n      (set? x)))\n\n(defn vector-compare\n  \"Compare two vectors, this expects the vectors to be ordered.\"\n  [[value1 & rest1] [value2 & rest2]]\n  (let [result (compare value1 value2)]\n    (cond\n      (not (zero? result)) result\n      (nil? value1) 0\n      :else (recur rest1 rest2))))\n"]}