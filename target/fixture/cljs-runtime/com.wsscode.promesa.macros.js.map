{"version":3,"sources":["com/wsscode/promesa/macros.cljc"],"mappings":"","names":[],"sourcesContent":["(ns com.wsscode.promesa.macros\n  (:require\n    [promesa.core :as p])\n  #?(:cljs\n     (:require-macros\n       [com.wsscode.promesa.macros])))\n\n#?(:clj\n   (defmacro clet\n     \"This is similar to promesa let. But this only returns a promise if some of\n     the bindings is a promise. Otherwise returns values as-is. This function is\n     intended to use in places that you want to be compatible with both sync\n     and async processes.\"\n     [bindings & body]\n     (assert (even? (count bindings)))\n     (let [binds (reverse (partition 2 bindings))]\n       (reduce\n         (fn [acc [l r]]\n           `(let [r# ~r]\n              (if (p/promise? r#)\n                (p/then r# (fn [~l] ~acc))\n                (let [~l r#]\n                  ~acc))))\n         `(do ~@body)\n         binds))))\n"]}