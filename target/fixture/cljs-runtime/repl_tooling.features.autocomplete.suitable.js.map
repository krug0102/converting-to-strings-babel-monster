{"version":3,"sources":["repl_tooling/features/autocomplete/suitable.cljs"],"mappings":"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","names":["repl-tooling.features.autocomplete.suitable/re-escape","str","clojure.string/replace","repl-tooling.features.autocomplete.suitable/make-context","text","prefix","row","col","lines","clojure.string/split-lines","pattern","cljs.core/re-pattern","cljs.core/count","cljs.core.update","clojure.string/replace-first","clojure.string.join","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/vec","cljs.core.apply","cljs.core/array-map","repl-tooling.features.autocomplete.suitable/cmd-to-run-cljs","shadow-env","repl-tooling.features.autocomplete.suitable/compliment","repl","cmd-for-cljs-env","ns","context","code","repl_tooling.eval.eval","promesa.core.then","promesa.core.catch$","cljs.core/constantly","repl-tooling.features.autocomplete.suitable/suitable","repl-tooling.features.autocomplete.suitable/for-cljs","aux","ns-name","suitable","compliment","promesa.core/all","p1__40749#","cljs.core/concat","cljs.core/distinct"],"sourcesContent":["(ns repl-tooling.features.autocomplete.suitable\n  (:require [clojure.string :as str]\n            [promesa.core :as p]\n            [repl-tooling.eval :as eval]))\n\n(defn- re-escape [str]\n  (str/replace str #\"[.*+?^${}()|\\[\\]\\\\]\" \"\\\\$&\"))\n\n(defn- make-context [text prefix row col]\n  (let [lines (str/split-lines text)\n        pattern (re-pattern (str \"(.{\" (- col (count prefix)) \"})\" (re-escape prefix)))]\n    (->> \"$1__prefix__\"\n         (update lines row str/replace-first pattern)\n         (str/join \"\\n\"))))\n\n(defn- cmd-to-run-cljs [shadow-env]\n  `(~'clojure.core/fn [ns# code#]\n     (~'clojure.core/let [res#\n                          (shadow.cljs.devtools.api/cljs-eval\n                           ~shadow-env code# {:ns (~'clojure.core/symbol ns#)})]\n       (if-let [results# (:results res#)]\n        {:value (clojure.edn/read-string (~'clojure.core/last results#))}\n        {:error res#}))))\n\n(defn- compliment [repl prefix cmd-for-cljs-env ns context]\n  (let [code `(do\n                (~'clojure.core/require 'suitable.compliment.sources.cljs)\n                (~'clojure.core/binding [suitable.compliment.sources.cljs/*compiler-env*\n                                         ~cmd-for-cljs-env]\n                  (suitable.compliment.sources.cljs/candidates ~prefix\n                                                               '~ns\n                                                               ~context)))]\n    (-> (eval/eval repl code)\n        (p/then :result)\n        (p/catch (constantly [])))))\n\n(defn- suitable [repl prefix shadow-env ns context]\n  (let [code `(do\n                (~'clojure.core/require\n                  'shadow.cljs.devtools.api\n                  'clojure.edn)\n                (suitable.js-completions/cljs-completions\n                  ~(cmd-to-run-cljs shadow-env)\n                  ~prefix\n                  {:ns (~'clojure.core/str ~ns)\n                   :context ~context}))]\n    (-> (eval/eval repl code)\n        (p/then :result)\n        (p/catch (constantly [])))))\n\n(defn for-cljs [repl aux shadow-env cmd-for-cljs-env ns-name text prefix row col]\n  (let [ns (when ns-name (str ns-name))\n        context (make-context text prefix row col)\n        suitable (suitable aux prefix shadow-env ns context)\n        compliment (compliment aux prefix cmd-for-cljs-env ns context)]\n    (-> (p/all [suitable compliment])\n        (p/then #(apply concat %))\n        (p/then distinct))))\n"]}