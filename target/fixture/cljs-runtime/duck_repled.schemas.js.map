{"version":3,"sources":["duck_repled/schemas.cljc"],"mappings":"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","names":["duck-repled.schemas/pos","cljs.core/int?","duck-repled.schemas/range","duck-repled.schemas/editor-data","cljs.core/string?","duck-repled.schemas/range-and-content","duck-repled.schemas/top-blocks","duck-repled.schemas/contents","duck-repled.schemas/registry","malli.core.schema","cljs.core/boolean?","cljs.core/keyword?","cljs.core/simple-symbol?","cljs.core/any?","cljs.core/qualified-symbol?","malli.core/base-schemas","duck-repled.schemas/explainer","cljs.core/memoize","schemas","mapped","cljs.core.apply","cljs.core/vector","malli.core.explainer","duck-repled.schemas/registry-keys","cljs.core/keys","cljs.core/set","var_args","G__160583","duck-repled.schemas/validate!","js/Error","value","duck_repled.schemas.validate_BANG_","explanation","cljs.core.filter","explain","exp-error","exp","malli.error.humanize","cljs.core.ex_info","duck-repled.schemas/explain-add-resolver","cljs.core.comp","malli.error/humanize","cljs.core/number?"],"sourcesContent":["(ns duck-repled.schemas\n  (:refer-clojure :exclude [range])\n  (:require [malli.core :as m]\n            [malli.error :as e]\n            [malli.util :as mu]\n            [duck-repled.repl-protocol :as repl]))\n\n(def ^:private pos [:cat int? int?])\n(def ^:private range [:cat [:schema pos] [:schema pos]])\n(def ^:private editor-data [:map\n                            [:contents string?]\n                            [:filename {:optional true} [:maybe string?]]\n                            [:range range]])\n(def ^:private range-and-content [:cat [:schema range] string?])\n(def ^:private top-blocks [:vector range-and-content])\n(def ^:private contents [:map\n                         [:text/contents string?]\n                         [:text/range range]])\n\n(def registry\n  {:editor/data (m/schema editor-data)\n   :editor/filename (m/schema string?)\n   :editor/contents (m/schema contents)\n\n   :text/contents (m/schema string?)\n   :text/range (m/schema range)\n   :text/top-blocks (m/schema top-blocks)\n   :text/current-var (m/schema contents)\n   :text/ns (m/schema contents)\n   :text/top-block (m/schema contents)\n   :text/block (m/schema contents)\n   :text/selection (m/schema contents)\n\n   :file/path (m/schema [:vector string?])\n   :file/filename (m/schema string?)\n   :file/exists? (m/schema boolean?)\n   :file/contents (m/schema contents)\n\n   :config/repl-kind (m/schema keyword?)\n   :config/eval-as (m/schema [:enum :clj :cljs :prefer-clj :prefer-cljs])\n   :config/project-paths (m/schema [:vector string?])\n\n   :definition/row (m/schema int?)\n   :definition/col (m/schema int?)\n   :definition/filename (m/schema string?)\n   :definition/contents (m/schema contents)\n   :definition/source (m/schema contents)\n\n   :ex/function-name (m/schema string?)\n   :ex/filename (m/schema string?)\n   :ex/row (m/schema int?)\n\n   :repl/kind (m/schema keyword?)\n   :repl/namespace (m/schema simple-symbol?)\n   :repl/evaluators (m/schema [:map [:clj any?] [:cljs {:optional true} any?]])\n   :repl/evaluator (m/schema any?)\n   :repl/clj (m/schema any?)\n   :repl/code (m/schema string?)\n   :repl/result (m/schema [:map [:result any?]])\n   :repl/error (m/schema [:map [:error any?]])\n   :repl/template (m/schema any?)\n\n   :var/meta (m/schema any?)\n   :var/fqn (m/schema qualified-symbol?)\n   :var/doc (m/schema string?)\n\n   :map (:map (m/base-schemas))})\n\n(def explainer\n  (memoize (fn [schemas]\n             (let [mapped (apply vector :map schemas)]\n                (m/explainer mapped {:registry registry})))))\n\n(def ^:private registry-keys (-> registry keys set))\n(defn validate!\n  ([schemas value]\n   (validate! schemas value \"Value does not match schema: \"))\n  ([schemas value explanation]\n   (let [schemas (filter registry-keys schemas)\n         explain (explainer schemas)\n         exp-error (explain value)\n         exp (e/humanize exp-error)]\n     (when exp\n       (throw (ex-info (str explanation exp)\n                       {:human-error exp :details exp-error})))\n     value)))\n\n(def explain-add-resolver\n  (comp e/humanize\n        (m/explainer [:map {:closed true}\n                      [:inputs [:vector any?]]\n                      [:outputs [:vector any?]]\n                      [:priority {:optional true} number?]])))\n"]}