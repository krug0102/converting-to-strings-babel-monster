{"version":3,"sources":["sci/impl/for_macro.cljc"],"mappings":"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","names":["sci.impl.for-macro/assert-args","seq-exprs","_body-expr","cljs.core/vector?","js/Error","cljs.core/even?","cljs.core/count","p__154209","vec__154210","cljs.core.nth","sci.impl.for-macro/expand-for","_","body-expr","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/vec","to-groups","cljs.core.reduce","p__154213","vec__154214","groups","k","v","cljs.core/Keyword","cljs.core.conj","cljs.core/pop","cljs.core/peek","cljs.core.partition","err","msg","cljs.core.apply","cljs.core/str","emit-bind","p__154217","vec__154218","seq__154219","first__154220","cljs.core/first","cljs.core/next","vec__154221","seq__154222","first__154223","vec__154224","vec__154227","bind","expr","mod-pairs","next-expr","next-groups","giter","cljs.core.gensym","gxs","do-mod","p__154230","vec__154231","seq__154232","first__154233","vec__154234","pair","etc","cljs.core._EQ_","sci.impl.utils/allowed-recur","sci.impl.utils/allowed-loop","gi","gb","do-cmod","p__154245","vec__154249","seq__154250","first__154251","vec__154253","cljs.core/second"],"sourcesContent":["(ns sci.impl.for-macro\n  {:no-doc true}\n  (:require [sci.impl.utils :refer [allowed-loop allowed-recur]]))\n\n;; based on the source of clojure.core/for\n\n(defn assert-args [seq-exprs _body-expr]\n  (when-not (vector? seq-exprs)\n    (throw (new #?(:clj IllegalArgumentException :cljs js/Error)\n                \"for requires a vector for its binding\")))\n  (when-not (even? (count seq-exprs))\n    (throw (new #?(:clj IllegalArgumentException :cljs js/Error)\n                \"for requires an even number of forms in binding vector\"))))\n\n;; see clojurescript core.cljc defmacro for\n(defn expand-for\n  [_ [_ seq-exprs body-expr]]\n  (assert-args seq-exprs body-expr)\n  (let [to-groups (fn [seq-exprs]\n                    (reduce (fn [groups [k v]]\n                              (if (keyword? k)\n                                (conj (pop groups) (conj (peek groups) [k v]))\n                                (conj groups [k v])))\n                            [] (partition 2 seq-exprs)))\n        err (fn [& msg] (throw (new #?(:clj IllegalArgumentException\n                                       :cljs js/Error) ^String (apply str msg))))\n        emit-bind (fn emit-bind [[[bind expr & mod-pairs]\n                                  & [[_ next-expr] :as next-groups]]]\n                    (let [giter (gensym \"iter__\")\n                          gxs (gensym \"s__\")\n                          do-mod (fn do-mod [[[k v :as pair] & etc]]\n                                   (cond\n                                     (= k :let) `(let ~v ~(do-mod etc))\n                                     (= k :while) `(when ~v ~(do-mod etc))\n                                     (= k :when) `(if ~v\n                                                    ~(do-mod etc)\n                                                    (~allowed-recur (rest ~gxs)))\n                                     (keyword? k) (err \"Invalid 'for' keyword \" k)\n                                     next-groups\n                                     `(let [iterys# ~(emit-bind next-groups)\n                                            fs# (seq (iterys# ~next-expr))]\n                                        (if fs#\n                                          (concat fs# (~giter (rest ~gxs)))\n                                          (~allowed-recur (rest ~gxs))))\n                                     :else `(cons ~body-expr\n                                                  (~giter (rest ~gxs)))))]\n                      (if next-groups\n                        #_\"not the inner-most loop\"\n                        `(fn ~giter [~gxs]\n                           (lazy-seq\n                            (~allowed-loop [~gxs ~gxs]\n                             (when-first [~bind ~gxs]\n                               ~(do-mod mod-pairs)))))\n                        #_\"inner-most loop\"\n                        (let [gi (gensym \"i__\")\n                              gb (gensym \"b__\")\n                              do-cmod (fn do-cmod [[[k v :as pair] & etc]]\n                                        (cond\n                                          (= k :let) `(let ~v ~(do-cmod etc))\n                                          (= k :while) `(when ~v ~(do-cmod etc))\n                                          (= k :when) `(if ~v\n                                                         ~(do-cmod etc)\n                                                         (~allowed-recur\n                                                          (unchecked-inc ~gi)))\n                                          (keyword? k)\n                                          (err \"Invalid 'for' keyword \" k)\n                                          :else\n                                          `(do (chunk-append ~gb ~body-expr)\n                                               (~allowed-recur (unchecked-inc ~gi)))))]\n                          `(fn ~giter [~gxs]\n                             (lazy-seq\n                              (~allowed-loop [~gxs ~gxs]\n                               (let [~gxs (seq ~gxs)]\n                                 (when ~gxs\n                                  (if (chunked-seq? ~gxs)\n                                    (let [c# (chunk-first ~gxs)\n                                          size# (int (count c#))\n                                          ~gb (chunk-buffer size#)]\n                                      (if (~allowed-loop [~gi (int 0)]\n                                           (if (< ~gi size#)\n                                             (let [~bind (nth c# ~gi)]\n                                               ~(do-cmod mod-pairs))\n                                             true))\n                                        (chunk-cons\n                                         (chunk ~gb)\n                                         (~giter (chunk-rest ~gxs)))\n                                        (chunk-cons (chunk ~gb) nil)))\n                                    (let [~bind (first ~gxs)]\n                                      ~(do-mod mod-pairs))))))))))))]\n    `(let [iter# ~(emit-bind (to-groups seq-exprs))]\n       (iter# ~(second seq-exprs)))))\n"]}