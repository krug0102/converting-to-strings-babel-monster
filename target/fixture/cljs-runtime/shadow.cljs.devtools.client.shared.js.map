{"version":3,"sources":["shadow/cljs/devtools/client/shared.cljs"],"mappings":"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","names":["shadow$cljs$devtools$client$shared$IRemote$remote_open$dyn","x__4521__auto__","m__4522__auto__","shadow.cljs.devtools.client.shared/remote-open","goog/typeOf","m__4519__auto__","cljs.core/missing-protocol","shadow$cljs$devtools$client$shared$IRemote$remote_msg$dyn","shadow.cljs.devtools.client.shared/remote-msg","shadow$cljs$devtools$client$shared$IRemote$remote_close$dyn","shadow.cljs.devtools.client.shared/remote-close","shadow$cljs$devtools$client$shared$IRemote$remote_error$dyn","shadow.cljs.devtools.client.shared/remote-error","shadow.cljs.devtools.client.shared/IRemote","this","e","msg","info","shadow$cljs$devtools$client$shared$IHostSpecific$do_repl_init$dyn","shadow.cljs.devtools.client.shared/do-repl-init","shadow$cljs$devtools$client$shared$IHostSpecific$do_repl_require$dyn","shadow.cljs.devtools.client.shared/do-repl-require","shadow$cljs$devtools$client$shared$IHostSpecific$do_invoke$dyn","shadow.cljs.devtools.client.shared/do-invoke","shadow.cljs.devtools.client.shared/IHostSpecific","action","done","error","require-msg","invoke-msg","shadow.cljs.devtools.client.shared/load-sources","runtime","sources","callback","shadow.remote.runtime.shared.call","shadow.cljs.devtools.client.env/worker-client-id","cljs.core.into","cljs.core.map","p__145714","map__145715","cljs.core/--destructure-map","cljs.core.get","js/shadow","js/shadow.cljs","js/shadow.cljs.devtools","js/shadow.cljs.devtools.client","js/shadow.cljs.devtools.client.shared","js/shadow.cljs.devtools.client.shared.runtime-ref","shadow.cljs.devtools.client.shared/runtime-ref","cljs.core.atom","js/shadow.cljs.devtools.client.shared.plugins-ref","shadow.cljs.devtools.client.shared/plugins-ref","p__145718","map__145719","shadow.cljs.devtools.client.shared/start-all-plugins!","state-ref","cljs.core/deref","started-set","cljs.core/set","cljs.core/keys","plugins","plugins-set","pending-set","clojure.set.difference","cljs.core/empty?","cljs.core.reduce","plugin-id","map__145721","depends-on","init-fn","plugin","cljs.core/some","start-arg","cljs.core.assoc","cljs.core/select-keys","started","cljs.core.swap_BANG_","cljs.core/assoc-in","cljs.core.disj","js/Error","shadow.cljs.devtools.client.shared/add-plugin!","stop-fn","cljs.core/Keyword","cljs.core/set?","cljs.core/fn?","temp__5757__auto__","cljs.core.get_in","map__145724","old","cljs.core/update","cljs.core/dissoc","cljs.core/assoc","shadow.cljs.devtools.client.shared/transit-read","data","t","cognitect.transit.reader","cognitect.transit/read","shadow.cljs.devtools.client.shared/transit-str","obj","w","cognitect.transit.writer","cognitect.transit/write","shadow.cljs.devtools.client.shared/continue!","state","shadow.cljs.devtools.client.shared/interpret-actions","p__145727","map__145728","shadow.cljs.devtools.client.shared/abort!","ex","cljs.core.dissoc","G__145729","shadow.cljs.devtools.client.shared/handle-invoke","res","cljs.core.update","cljs.core/conj","shadow.cljs.devtools.client.shared/handle-repl-invoke","e145730","ret","cljs.core/*3","cljs.core/*2","cljs.core/*1","cljs.core/*e","p__145733","p__145734","map__145735","map__145736","shadow.cljs.devtools.client.shared/interpret-action","type","G__145737","map__145738","ns","internal","G__145739","cljs.core/not","map__145740","cljs.core/into","G__145741","e145743","repl","invoke-fn","and__4221__auto__","cljs.core.ex_info","p__145745","map__145746","queue","warnings","map__145747","js/Date.now","G__145748","cljs.core/seq","shadow.cljs.devtools.client.env/ignore-warnings","map__145749","G__145750","cljs.core/first","cljs.core/rest","p__145752","map__145753","shadow.cljs.devtools.client.shared/setup-actions","input","actions","cljs.core.mapcat","cljs.core/vec","this__4472__auto__","k__4473__auto__","this__4474__auto__","k145756","else__4475__auto__","G__145764","__extmap","this__4492__auto__","f__4493__auto__","init__4494__auto__","ret__4495__auto__","p__145765","vec__145766","k__4496__auto__","cljs.core.nth","v__4497__auto__","this__4487__auto__","writer__4488__auto__","opts__4489__auto__","pr-pair__4490__auto__","keyval__4491__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__145755","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4470__auto__","__meta","this__4467__auto__","__hash","this__4476__auto__","cljs.core/count","this__4468__auto__","h__4330__auto__","coll__4469__auto__","cljs.core/hash-unordered-coll","this145757","other145758","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4482__auto__","k__4483__auto__","cljs.core/contains?","cljs.core/-with-meta","cljs.core/not-empty","this__4479__auto__","G__145775","this__4480__auto__","k__4481__auto__","pred__145776","cljs.core/keyword-identical?","expr__145777","this__4485__auto__","cljs.core/MapEntry","this__4471__auto__","this__4477__auto__","entry__4478__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","shadow.cljs.devtools.client.shared/Runtime","this__4516__auto__","cljs.core/List","writer__4517__auto__","cljs.core/-write","G__145759","extmap__4512__auto__","G__145779","cljs.core/record?","shadow.cljs.devtools.client.shared/->Runtime","shadow.cljs.devtools.client.shared/map->Runtime","map__145773","ws-state","ws-connected","ws-send-fn","js/console.warn","s","e145774","key","spec","shadow.remote.runtime.shared/add-extension","shadow.remote.runtime.shared/del-extension","p__145769","map__145770","ex-oid","ex-client-id","ex-data","report","G__145771","G__145772","shadow.remote.runtime.shared/now","text","shadow.remote.runtime.shared/process","cljs.core/inc","shadow.remote.runtime.shared/trigger!","js/console.error","map__145761","ws-connecting","ws-connect-timeout","shutdown","stale","ws-stop-fn","ws-start-fn","js/clearTimeout","after","map__145763","js/setTimeout","js/shadow.cljs.devtools.client.shared.print-subs","shadow.cljs.devtools.client.shared/print-subs","p__145780","map__145781","shadow.cljs.devtools.client.shared/stop-runtime!","map__145782","interval","js/clearInterval","cljs.core/reduce-kv","_","map__145783","shadow.cljs.devtools.client.shared/init-runtime!","client-info","cljs.core/reset!","p1__145784#","shadow.remote.runtime.obj-support/start","shadow.remote.runtime.obj-support/stop","p__145788","map__145789","obj-support","shadow.remote.runtime.tap-support/start","shadow.remote.runtime.tap-support/stop","p__145790","map__145793","shadow.remote.runtime.eval-support/start","shadow.remote.runtime.eval-support/stop","cljs.core.keyword","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/proc-id","shadow.remote.runtime.shared/init-state","G__145794","shadow.remote.runtime.shared/add-defaults","idle-fn","map__145796","ws-last-msg","shadow.remote.runtime.shared/run-on-idle","js/setInterval","js/goog.global.cljs_eval","opts","cljs.core/map?","cljs.core/object?","cljs.core.symbol","goog.object/get","js/Promise","resolve","reject","shadow.remote.runtime.api/cljs-eval","p__145802","map__145803","result","results","G__145804","cljs.core/last","p__145806","map__145807","from","shadow.remote.runtime.shared/relay-msg","p__145810","map__145811","cljs.core/disj","p__145812","map__145813","event-op","client-id","p__145815","map__145816","shadow.cljs.devtools.client.env/reset-print-fns!","shadow.cljs.devtools.client.env/set-print-fns!","stream","subs"],"sourcesContent":["(ns shadow.cljs.devtools.client.shared\n  (:require\n    [goog.object :as gobj]\n    [cognitect.transit :as transit]\n    [clojure.set :as set]\n    [shadow.cljs.devtools.client.env :as env]\n    [shadow.remote.runtime.api :as api]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.remote.runtime.cljs.js-builtins]\n    [shadow.remote.runtime.obj-support :as obj-support]\n    [shadow.remote.runtime.tap-support :as tap-support]\n    [shadow.remote.runtime.eval-support :as eval-support]))\n\n(defprotocol IRemote\n  (remote-open [this e])\n  (remote-msg [this msg])\n  (remote-close [this e info])\n  (remote-error [this e]))\n\n(defprotocol IHostSpecific\n  (do-repl-init [this action done error])\n  (do-repl-require [this require-msg done error])\n  (do-invoke [this invoke-msg]))\n\n(defn load-sources [runtime sources callback]\n  (shared/call runtime\n    {:op :cljs-load-sources\n     :to env/worker-client-id\n     :sources (into [] (map :resource-id) sources)}\n    {:cljs-sources\n     (fn [{:keys [sources] :as msg}]\n       (callback sources))}))\n\n(defonce runtime-ref (atom nil))\n(defonce plugins-ref (atom {}))\n\n(defn start-all-plugins! [{:keys [state-ref] :as runtime}]\n  (let [started-set (set (keys (::plugins @state-ref)))\n        plugins @plugins-ref\n        plugins-set (set (keys plugins))\n        pending-set (set/difference plugins-set started-set)]\n\n    ;; FIXME: this is dumb, should properly sort things in dependency order\n    ;; instead of looping over\n    (loop [pending-set pending-set]\n      (cond\n        (empty? pending-set)\n        ::done!\n\n        :else\n        (-> (reduce\n              (fn [pending-set plugin-id]\n                (let [{:keys [depends-on init-fn] :as plugin} (get plugins plugin-id)]\n                  (if (some pending-set depends-on)\n                    pending-set\n                    (let [start-arg (assoc (select-keys (::plugins @state-ref) depends-on) :runtime runtime)\n                          started (init-fn start-arg)]\n                      (swap! state-ref assoc-in [::plugins plugin-id] started)\n                      (disj pending-set plugin-id)))))\n              pending-set\n              pending-set)\n            (recur))))))\n\n;; generic plugin mechanism\n;; runtime already has extensions but requires access to runtime\n;; plugin decouple the lifecycle so they can be created wherever\n(defn add-plugin!\n  [plugin-id depends-on init-fn stop-fn]\n  {:pre [(keyword? plugin-id)\n         (set? depends-on)\n         (fn? init-fn)\n         (fn? stop-fn)]}\n\n  (when-some [runtime @runtime-ref]\n    (when-some [started (get-in runtime [::plugins plugin-id])]\n      (let [{:keys [stop-fn] :as old} (get @plugins-ref plugin-id)]\n        (stop-fn started)\n        (swap! runtime-ref update ::plugins dissoc plugin-id))))\n\n  (swap! plugins-ref assoc plugin-id\n    {:ext-id plugin-id\n     :depends-on depends-on\n     :init-fn init-fn\n     :stop-fn stop-fn})\n\n  ;; in case runtime is already started\n  (when-some [runtime @runtime-ref]\n    (start-all-plugins! runtime)))\n\n(defn transit-read [data]\n  (let [t (transit/reader :json)]\n    (transit/read t data)))\n\n(defn transit-str [obj]\n  (let [w (transit/writer :json)]\n    (transit/write w obj)))\n\n(declare interpret-actions)\n\n(defn continue! [state]\n  (interpret-actions state))\n\n(defn abort! [{:keys [callback] :as state} action ex]\n  (-> state\n      (assoc :result :runtime-error\n             :ex ex\n             :ex-action action)\n      (dissoc :runtime :callback)\n      (callback)))\n\n(defn handle-invoke [state runtime action]\n  (let [res (do-invoke runtime action)]\n    (if (:internal action)\n      state\n      (update state :results conj res))))\n\n(defn handle-repl-invoke [state runtime action]\n  (try\n    (let [ret (do-invoke runtime action)]\n\n      ;; FIXME: these are nonsense with multiple sessions. refactor this properly\n      (set! *3 *2)\n      (set! *2 *1)\n      (set! *1 ret)\n\n      (if (:internal action)\n        state\n        (update state :results conj ret)))\n\n    (catch :default e\n      (set! *e e)\n      (throw e))))\n\n(defn interpret-action\n  [{:keys [runtime] :as state}\n   {:keys [type] :as action}]\n  (case type\n    :repl/init\n    (do-repl-init runtime action\n      (fn []\n        (swap! (:state-ref runtime) assoc :init-complete true)\n        (continue! state))\n      (fn [ex]\n        (abort! state action ex)))\n\n    :repl/set-ns\n    (let [{:keys [ns internal]} action]\n      (-> state\n          (assoc :ns ns)\n          (cond->\n            (not internal)\n            (update :results conj nil))\n          (continue!)))\n\n    :repl/require\n    (let [{:keys [internal]} action]\n      (do-repl-require runtime action\n        (fn [sources]\n          (-> state\n              (update :loaded-sources into sources)\n              (cond->\n                ;; (require '...) has a result\n                ;; (ns foo.bar (:require ...)) does not since ns has the result\n                (not internal)\n                (update :results conj nil))\n              (continue!)))\n        (fn [ex]\n          (abort! state action ex))))\n\n    :repl/invoke\n    (try\n      (let [repl (get-in state [:input :repl])\n\n            invoke-fn\n            (if (and repl (not (:internal action)))\n              handle-repl-invoke\n              handle-invoke)]\n        (-> state\n            (invoke-fn runtime action)\n            (continue!)))\n      (catch :default ex\n        (abort! state action ex)))\n\n    (throw (ex-info \"unhandled repl action\" {:state state :action action}))))\n\n(defn interpret-actions [{:keys [queue warnings] :as state}]\n  (cond\n    (empty? queue)\n    (let [{:keys [callback]} state]\n      (-> state\n          (dissoc :runtime :callback :queue)\n          (assoc :time-finish (js/Date.now))\n          (callback)))\n\n    (and (seq warnings) (false? env/ignore-warnings))\n    (let [{:keys [callback]} state]\n      (-> state\n          (dissoc :runtime :callback :queue)\n          (assoc :result :warnings\n                 :warnings warnings\n                 :time-finish (js/Date.now))\n          (callback)))\n\n    :else\n    (let [action (first queue)\n          state (update state :queue rest)]\n      (interpret-action state action))))\n\n(defn setup-actions [runtime input {:keys [actions] :as msg} callback]\n  {:runtime runtime\n   :callback callback\n   :input input\n   :msg msg\n   :time-start (js/Date.now) ;; time used for prepl\n   :queue actions\n   :result :ok\n   :results []\n   :ns (:ns input)\n   :warnings\n   (->> actions\n        (mapcat :warnings)\n        (vec))\n   :loaded-sources []})\n\n(defrecord Runtime [state-ref]\n  api/IRuntime\n  (relay-msg [this msg]\n    (let [{::keys [ws-state ws-connected ws-send-fn] :as state} @state-ref]\n      (if-not ws-connected\n        (js/console.warn \"shadow-cljs - dropped ws message, not connected\" msg state)\n        (let [s (try\n                  (transit-str msg)\n                  (catch :default e\n                    (throw (ex-info \"failed to encode relay msg\" {:msg msg}))))]\n          ;; (js/console.log \"sending\" msg state)\n          (ws-send-fn ws-state s)))))\n\n  (add-extension [runtime key spec]\n    (shared/add-extension runtime key spec))\n  (del-extension [runtime key]\n    (shared/del-extension runtime key))\n\n  api/IEvalCLJS\n  (-cljs-eval [this input callback]\n    ;; FIXME: define what input is supposed to look like\n    ;; {:code \"(some-cljs)\" :ns foo.bar}\n    (shared/call this\n      {:op :cljs-compile\n       :to env/worker-client-id\n       :input input\n       :include-init (not (:init-complete @state-ref))}\n\n      {:cljs-compile-result\n       (fn [msg]\n         (-> (setup-actions this input msg callback)\n             (interpret-actions)))\n\n       ;; going from cljs specific error\n       :cljs-compile-error\n       (fn [{:keys [ex-oid ex-client-id ex-data report]}]\n         (callback\n           ;; to more generic error, that CLJ can also use\n           {:result :compile-error\n            :ex-oid ex-oid\n            :ex-client-id ex-client-id\n            :ex-data ex-data\n            :report report}))\n\n       :client-not-found\n       (fn [msg]\n         (callback\n           {:result :worker-not-found}))}))\n\n  IRemote\n  (remote-open [this e]\n    ;; (js/console.log \"runtime remote-open\" this e)\n    (swap! state-ref assoc\n      ::ws-errors 0\n      ::ws-connecting false\n      ::ws-connected true\n      ::ws-last-msg (shared/now)))\n\n  (remote-msg [this text]\n    (let [msg (transit-read text)]\n      ;; (js/console.log \"runtime remote-msg\" this msg)\n      (swap! state-ref assoc ::ws-last-msg (shared/now))\n      (when (= :access-denied (:op msg))\n        (swap! state-ref assoc ::stale true))\n      (shared/process this msg)))\n\n  (remote-close [this e info]\n    ;; (js/console.log \"runtime remote-close\" @state-ref e)\n    (swap! state-ref dissoc ::ws-connected ::ws-connecting)\n\n    ;; after 3 failed attempts just stop\n    (if (>= 3 (::ws-errors @state-ref))\n      (.schedule-connect! this 5000)\n      (js/console.warn \"shadow-cljs: giving up trying to connect to \" info)))\n\n  (remote-error [this e]\n    (swap! state-ref update ::ws-errors inc)\n\n    (shared/trigger! this :on-disconnect)\n\n    (js/console.error \"shadow-cljs - remote-error\" e))\n\n  Object\n  (attempt-connect! [this]\n    (let [{::keys [ws-connecting ws-connect-timeout shutdown stale ws-state ws-stop-fn ws-start-fn]\n           :as state}\n          @state-ref]\n\n      ;; (js/console.log \"attempt-connect!\" state)\n      (when (and (not shutdown)\n                 (not stale)\n                 (not ws-connecting))\n\n        (when ws-connect-timeout\n          (js/clearTimeout ws-connect-timeout))\n\n        (when (some? ws-state)\n          (ws-stop-fn ws-state))\n\n        (let [ws-state (ws-start-fn this)]\n          (swap! state-ref assoc\n            ::ws-connecting true\n            ::ws-connected false\n            ::ws-state ws-state)))))\n\n  (schedule-connect! [this after]\n    ;; (js/console.log \"scheduling next connect\" after @state-ref)\n    (let [{::keys [ws-connect-timeout stale shutdown]} @state-ref]\n      (when ws-connect-timeout\n        (js/clearTimeout ws-connect-timeout))\n\n      (when (and (not stale) (not shutdown))\n        (shared/trigger! this :on-reconnect)\n\n        (swap! state-ref assoc\n          ::ws-connect-timeout\n          (js/setTimeout\n            (fn []\n              ;; (js/console.log \"attempt-connect after schedule timeout\" @state-ref)\n              (swap! state-ref dissoc ::ws-connect-timeout)\n              (.attempt-connect! this))\n            after))))))\n\n(defonce print-subs (atom #{}))\n\n(defn stop-runtime! [{:keys [state-ref] :as runtime}]\n  (let [{::keys [ws-state ws-stop-fn interval plugins]} @state-ref]\n\n    (js/clearInterval interval)\n\n    (when (some? ws-state)\n      (ws-stop-fn ws-state))\n\n    (reduce-kv\n      (fn [_ plugin-id started]\n        ;; FIXME: should stop in reverse started order\n        (let [{:keys [stop-fn]} (get @plugins-ref plugin-id)]\n          (stop-fn started)))\n      nil\n      plugins)\n\n    (swap! state-ref assoc ::shutdown true)))\n\n(defn init-runtime! [client-info ws-start-fn ws-send-fn ws-stop-fn]\n  ;; in case of hot-reload or reconnect, clean up previous runtime\n  (when-some [runtime @runtime-ref]\n    (stop-runtime! runtime)\n    (reset! runtime-ref nil))\n\n  (add-plugin! :obj-support #{}\n    #(obj-support/start (:runtime %))\n    obj-support/stop)\n\n  (add-plugin! :tap-support #{:obj-support}\n    (fn [{:keys [runtime obj-support]}]\n      (tap-support/start runtime obj-support))\n    tap-support/stop)\n\n  (add-plugin! :eval-support #{:obj-support}\n    (fn [{:keys [runtime obj-support]}]\n      (eval-support/start runtime obj-support))\n    eval-support/stop)\n\n  (let [state-ref\n        (-> (assoc client-info\n              :type :runtime\n              :lang :cljs\n              :build-id (keyword env/build-id)\n              :proc-id env/proc-id)\n            (shared/init-state)\n            (assoc ::shutdown false\n                   ::stale false\n                   ::plugins {}\n                   ::ws-errors 0\n                   ::ws-start-fn ws-start-fn\n                   ::ws-send-fn ws-send-fn\n                   ::ws-stop-fn ws-stop-fn)\n            (atom))\n\n        runtime\n        (doto (->Runtime state-ref)\n          (shared/add-defaults))\n\n        idle-fn\n        (fn []\n          (let [{::keys [shutdown ws-connected ws-last-msg ws-connect-timeout] :as state} @state-ref]\n            (when (and (not ws-connect-timeout) (not shutdown) ws-connected (> (shared/now) (+ ws-last-msg 20000)))\n              ;; should be receiving pings, if not assume dead ws\n              ;; (js/console.log \"attempting reconnect because of idle\" state)\n              ;; wait a little, otherwise might get ERR_INTERNET_DISCONNECTED after waking from sleep\n              (swap! state-ref dissoc ::ws-connected)\n              (.schedule-connect! runtime 2000))\n\n            (shared/run-on-idle state-ref)))]\n\n    (swap! state-ref assoc ::interval (js/setInterval idle-fn 1000))\n\n    (reset! runtime-ref runtime)\n\n    ;; test exporting this into the global so potential consumers\n    ;; don't have to worry about importing a namespace that shouldn't be in release builds\n    ;; can't bind cljs.core/eval since that expects a CLJ form not a string\n    ;; which we could technically also support but I don't want to assume the user\n    ;; knows how to read properly. just accepting a string and optional ns is much easier\n    (set! js/goog.global.cljs_eval\n      (fn [input opts]\n        (let [input\n              (cond\n                ;; preferred when calling from CLJS\n                (map? input)\n                input\n\n                ;; just calling with code\n                (and (string? input) (not opts))\n                {:code input :ns 'cljs.user}\n\n                ;; when calling from JS {ns: \"cljs.user\"}\n                ;; FIXME: other opts?\n                (and (string? input) (object? opts))\n                {:code input :ns (symbol (gobj/get opts \"ns\"))}\n\n                :else\n                (throw (ex-info \"invalid arguments, call cljs_eval(string, opts-obj) or cljs_eval(map)\" {:input input :opts opts})))]\n\n          (js/Promise.\n            (fn [resolve reject]\n              (api/cljs-eval runtime input\n                (fn [{:keys [result results] :as info}]\n                  (if (= :ok result)\n                    ;; FIXME: option to not throw away multiple results?\n                    ;; user may do cljs_eval(\"1 2 3\") and will only get 3 but we have [1 2 3]\n                    (resolve (last results))\n                    (reject info)))))))))\n\n    (api/add-extension runtime\n      ::print-support\n      {:ops\n       {:runtime-print-sub\n        (fn [{:keys [from] :as msg}]\n          (swap! print-subs conj from)\n          (shared/relay-msg runtime\n            {:op :request-notify\n             :notify-op ::runtime-print-disconnect\n             :query [:eq :client-id from]}))\n        :runtime-print-unsub\n        (fn [{:keys [from] :as msg}]\n          (swap! print-subs disj from))\n        ::runtime-print-disconnect\n        (fn [{:keys [event-op client-id]}]\n          (when (= :client-disconnect event-op)\n            (swap! print-subs disj client-id)))}\n\n       ;; just in case the disconnect notify comes after trying to send something\n       :on-client-not-found\n       (fn [{:keys [client-id]}]\n         (swap! print-subs disj client-id))})\n\n    ;; in case this was hot reloaded, restore previous state first\n    (env/reset-print-fns!)\n\n    (env/set-print-fns!\n      (fn [stream text]\n        (let [subs @print-subs]\n          ;; (js/console.log \"print\" stream text subs)\n          (when (seq subs)\n            (shared/relay-msg runtime\n              {:op :runtime-print\n               :to subs\n               :stream stream\n               :text text})))))\n\n    (api/add-extension runtime\n      ::shared\n      {:on-welcome\n       (fn []\n         (shared/relay-msg runtime\n           {:op :request-notify\n            :notify-op ::env/worker-notify\n            :query [:eq :shadow.cljs.model/worker-for (keyword env/build-id)]}))})\n\n    (start-all-plugins! runtime)\n\n    ;; (js/console.log \"first connect from init-runtime!\")\n    (.attempt-connect! runtime)))\n\n"]}