{"version":3,"sources":["com/wsscode/pathom3/connect/runner.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha.every_impl","cljs.spec.alpha.tuple_impl","G__158456","cljs.core/map?","i__11949__auto__","v__11950__auto__","cljs.core.nth","cljs.core/any?","cljs.core/fn?","cljs.core/boolean?","cljs.spec.alpha/map-spec-impl","G__158459","cljs.core/number?","G__158477","cljs.core/vector?","cljs.spec.alpha/nilable-impl","G__158479","p__158482","map__158483","cljs.core/--destructure-map","cljs.core.get","com.wsscode.pathom3.connect.runner/all-requires-ready?","env","expects","entity","com.wsscode.pathom3.entity-tree/entity","p1__158481#","cljs.core/every?","cljs.core/contains?","cljs.core/keys","p__158486","map__158487","com.wsscode.pathom3.connect.runner/union-key-on-data?","union-key","m","com.wsscode.pathom3.connect.runner/pick-union-entry","ast","com.wsscode.pathom3.format.eql/union-children?","cljs.core/some","ast'","com.wsscode.pathom3.format.eql/union->root","com.wsscode.pathom3.format.eql/union-children","com.wsscode.pathom3.connect.runner/process-map-subquery","cljs.core/not","com.wsscode.pathom3.connect.operation/final-value?","cache-tree*","com.wsscode.pathom3.entity-tree/create-entity","com.wsscode.pathom3.connect.runner/run-graph!","com.wsscode.pathom3.connect.runner/process-sequence-subquery","s","cljs.core.into","cljs.core/empty","p1__158488#","p2__158489#","cljs.core.map_indexed","com.wsscode.pathom3.path/append-path","G__158490","com.wsscode.misc.coll/coll-append-at-head?","cljs.core/reverse","com.wsscode.pathom3.connect.runner/process-map-container-subquery","cljs.core.map","x","com.wsscode.misc.coll/make-map-entry","cljs.core/key","cljs.core/val","com.wsscode.pathom3.connect.runner/process-map-container?","v","or__4223__auto__","cljs.core/meta","p__158491","map__158492","com.wsscode.pathom3.connect.runner/normalize-ast-recursive-query","query","graph","k","children","cljs.core._EQ_","cljs.core/vec","cljs.core/vals","cljs.core/pos-int?","cljs.core.update_in","cljs.core/dec","cljs.core.assoc","com.wsscode.pathom3.connect.runner/entry-ast","com.wsscode.pathom3.connect.planner/entry-ast","p__158493","map__158494","com.wsscode.pathom3.connect.runner/process-attr-subquery","map__158495","com.wsscode.misc.coll/collection?","G__158496","temp__5751__auto__","cljs.core/find","com.wsscode.pathom3.connect.runner/merge-entity-data","new-data","cljs.core/reduce-kv","out","com.wsscode.misc.refs/kw-identical?","com.wsscode.pathom3.plugin.run_with_plugins","com.wsscode.pathom3.connect.runner/merge-resolver-response!","response","p1__158503#","p2__158504#","com.wsscode.pathom3.entity_tree.swap_entity_BANG_","com.wsscode.pathom3.connect.runner/process-idents!","idents","seq__158507","cljs.core/seq","chunk__158508","count__158509","i__158510","temp__5753__auto__","cljs.core/chunked-seq?","c__4649__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","p1__158506#","cljs.core/second","p__158515","p__158516","map__158517","map__158518","com.wsscode.pathom3.connect.runner/run-next-node!","run-next","G__158519","G__158520","com.wsscode.pathom3.connect.runner/run-node!","com.wsscode.pathom3.connect.planner.get_node","p__158521","p__158522","map__158523","map__158524","com.wsscode.pathom3.connect.runner/merge-node-stats!","node-run-stats*","node-id","data","com.wsscode.misc.refs.gswap_BANG_","cljs.core/update","com.wsscode.misc.coll/merge-defaults","p__158525","p__158526","map__158527","map__158528","com.wsscode.pathom3.connect.runner/merge-mutation-stats!","op-name","p__158529","p__158530","map__158531","map__158532","com.wsscode.pathom3.connect.runner/mark-resolver-error","error","G__158533","cljs.core/assoc-in","com.wsscode.misc.coll/sconj","com.wsscode.pathom3.connect.runner/mark-resolver-error-with-plugins","node","e","com.wsscode.pathom3.connect.runner/choose-cache-store","cache-store","com.wsscode.log/log-event","com.wsscode.log/*active-logger*","com.wsscode.log/make-event","p__158534","map__158535","com.wsscode.pathom3.connect.runner/report-resolver-io-stats","run-stats-omit-resolver-io?","input-data","result","com.wsscode.pathom3.format.shape-descriptor/data->shape-descriptor","p__158537","map__158538","com.wsscode.pathom3.connect.runner/missing-maybe-in-pending-batch?","path","input","nested-inputs","com.wsscode.misc.coll/filter-vals","pending-nested?","cljs.core/deref","cljs.core/cat","p1__158536#","cljs.core.comp","cljs.core.subvec","path'","com.wsscode.pathom3.connect.runner/wait-batch-response","com.wsscode.pathom3.connect.runner/invoke-resolver-cached","cache?","resolver","params","com.wsscode.pathom3.cache/cached","com.wsscode.pathom3.connect.operation.protocols/-resolve","com.wsscode.pathom3.connect.runner/warn-batch-unsupported","com.wsscode.pathom3.connect.runner/invoke-resolver-cached-batch","com.wsscode.pathom3.connect.runner/batch-hold-token","com.wsscode.pathom3.connect.runner/valid-response?","p__158539","map__158540","com.wsscode.pathom3.connect.runner/invoke-resolver-from-node","map__158541","com.wsscode.pathom3.connect.indexes/resolver","batch?","optionals","com.wsscode.pathom3.connect.operation/operation-config","com.wsscode.pathom3.format.shape_descriptor.select_shape_filtering","com.wsscode.pathom3.format.shape_descriptor.merge_shapes","input-shape","com.wsscode.pathom3.connect.operation/params","resolver-cache*","_","com.wsscode.misc.time/now-ms","e158542","com.wsscode.pathom3.format.shape_descriptor.missing","cljs.core.ex_info","com.wsscode.pathom3.cache/cache-find","finish","G__158543","cljs.core.merge","com.wsscode.pathom3.connect.runner/run-resolver-node!","map__158544","batch-hold","p__158551","map__158552","com.wsscode.pathom3.connect.runner/priority-sort","node-ids","paths","cljs.core.mapv","nid","com.wsscode.pathom3.connect.planner/node-successors","p1__158545#","cljs.core.keep","com.wsscode.pathom3.connect.planner/node-with-resolver-config","p1__158546#","cljs.core.distinct","p1__158548#","p2__158547#","cljs.core.sort","cljs.core/compare","p1__158550#","p2__158549#","cljs.core.sort_by","com.wsscode.misc.coll/vector-compare","com.wsscode.pathom3.connect.runner/default-choose-path","_or-node","cljs.core/ffirst","p__158553","p__158554","map__158555","map__158556","com.wsscode.pathom3.connect.runner/add-taken-path!","taken-path-id","cljs.core/update-in","com.wsscode.misc.coll/vconj","p__158558","p__158559","map__158560","map__158561","com.wsscode.pathom3.connect.runner/run-or-node!","choose-path","run-or","or-node","res","nodes","picked-node-id","G__158568","G__158569","cljs.core.disj","p__158570","p__158571","map__158572","map__158573","com.wsscode.pathom3.connect.runner/run-and-node!","run-and","and-node","cljs.core.reduce","node-res","G__158578","G__158579","cljs.core/reduced","G__158581","cljs.core/Keyword","js/Error","com.wsscode.pathom3.connect.planner/node-kind","p__158582","map__158583","com.wsscode.pathom3.connect.runner/placeholder-merge-entity","source-ent","ph","p__158586","map__158587","com.wsscode.pathom3.connect.runner/invoke-mutation!","key","mutation","com.wsscode.pathom3.connect.indexes/mutation","start","e158588","p1__158584#","p2__158585#","com.wsscode.pathom3.connect.operation.protocols/-mutate","cljs.core/assoc","p__158589","map__158590","com.wsscode.pathom3.connect.runner/process-mutations!","seq__158591","chunk__158592","count__158593","i__158594","p__158595","map__158596","com.wsscode.pathom3.connect.runner/run-root-node!","root","com.wsscode.pathom3.connect.planner/get-root-node","map__158597","p__158598","map__158599","com.wsscode.pathom3.connect.runner/run-graph!*","nested","cljs.core/select-keys","com.wsscode.pathom3.connect.runner/plan-and-run!","ast-or-graph","entity-tree*","start-plan","plan","com.wsscode.pathom3.connect.planner.compute_run_graph","finish-plan","com.wsscode.pathom3.connect.runner/assoc-end-plan-stats","G__158600","com.wsscode.pathom3.connect.runner/include-meta-stats","cljs.core.vary_meta","com.wsscode.pathom3.connect.runner/mark-batch-errors","batch-op","batch-items","seq__158601","chunk__158602","count__158603","i__158604","map__158607","map__158608","env'","p__158609","map__158610","com.wsscode.pathom3.connect.runner/cache-batch-item","node-resolver-input","batch-item","com.wsscode.pathom3.connect.runner/combine-inputs-with-responses","input-groups","inputs","responses","p1__158612#","p2__158611#","cljs.core/PersistentVector","cljs.core.mapcat","p__158614","vec__158615","p1__158613#","com.wsscode.pathom3.connect.runner/merge-entity-to-root-data","com.wsscode.pathom3.path/root?","ent","ent'","com.wsscode.pathom3.format.shape-descriptor/select-shape","com.wsscode.pathom3.connect.runner/run-batches-pending!","batches*","batches","cljs.core/vreset!","seq__158619","chunk__158620","count__158621","i__158622","vec__158673","vec__158698","cljs.core/group-by","batch-env","p1__158618#","com.wsscode.misc.coll.update_if","G__158676","G__158701","cljs.core/pop","e158677","e158702","cljs.core.not_EQ_","seq__158678","chunk__158679","count__158680","i__158681","vec__158690","map__158693","vec__158694","map__158697","seq__158703","chunk__158704","count__158705","i__158706","vec__158715","map__158718","vec__158719","map__158722","com.wsscode.pathom3.connect.runner/run-batches-waiting!","waits*","waits","seq__158723","chunk__158724","count__158725","i__158726","map__158729","map__158730","com.wsscode.pathom3.entity-tree/reset-entity!","cljs.core.get_in","com.wsscode.pathom3.connect.runner/run-batches!","com.wsscode.pathom3.connect.runner/setup-runner-env","cache-type","G__158731","G__158732","G__158733","G__158734","G__158735","com.wsscode.pathom3.connect.runner/run-graph-impl!","cljs.core/volatile!","com.wsscode.pathom3.connect.runner/run-graph-with-plugins","impl!","a","t","var_args","G__158737","com.wsscode.pathom3.connect.runner/with-resolver-cache","com.wsscode.pathom3.connect.runner.with_resolver_cache","cljs.core.atom","cache*"],"sourcesContent":["(ns com.wsscode.pathom3.connect.runner\n  (:require\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.guardrails.core :refer [<- => >def >defn >fdef ? |]]\n    [com.wsscode.log :as l]\n    [com.wsscode.misc.coll :as coll]\n    [com.wsscode.misc.refs :as refs]\n    [com.wsscode.misc.time :as time]\n    [com.wsscode.pathom3.attribute :as p.attr]\n    [com.wsscode.pathom3.cache :as p.cache]\n    [com.wsscode.pathom3.connect.indexes :as pci]\n    [com.wsscode.pathom3.connect.operation :as pco]\n    [com.wsscode.pathom3.connect.operation.protocols :as pco.prot]\n    [com.wsscode.pathom3.connect.planner :as pcp]\n    [com.wsscode.pathom3.entity-tree :as p.ent]\n    [com.wsscode.pathom3.format.eql :as pf.eql]\n    [com.wsscode.pathom3.format.shape-descriptor :as pfsd]\n    [com.wsscode.pathom3.path :as p.path]\n    [com.wsscode.pathom3.plugin :as p.plugin]))\n\n(>def ::attribute-errors (s/map-of ::p.attr/attribute any?))\n\n(>def ::choose-path\n  \"A function to determine which path to take when picking a path for a OR node.\"\n  fn?)\n\n(>def ::batch-error? boolean?)\n\n(>def ::batch-hold\n  \"A map containing information to trigger a batch for a resolver node.\"\n  (s/keys))\n\n(>def ::batch-pending*\n  \"Atom with batches pending to run.\"\n  any?)\n\n(>def ::batch-waiting*\n  \"This are nodes with nested inputs that are waiting for batch processes to finish\n  to fulfill nested dependencies before they run.\"\n  any?)\n\n(>def ::batch-run-duration-ms number?)\n(>def ::batch-run-finish-ms number?)\n(>def ::batch-run-start-ms number?)\n\n(>def ::compute-plan-run-duration-ms number?)\n(>def ::compute-plan-run-start-ms number?)\n(>def ::compute-plan-run-finish-ms number?)\n\n(>def ::mutation-run-duration-ms number?)\n(>def ::mutation-run-start-ms number?)\n(>def ::mutation-run-finish-ms number?)\n\n(>def ::env map?)\n\n(>def ::graph-run-duration-ms number?)\n(>def ::graph-run-start-ms number?)\n(>def ::graph-run-finish-ms number?)\n\n(>def ::map-container? boolean?)\n(>def ::merge-attribute fn?)\n\n(>def ::node-error any?)\n(>def ::node-run-duration-ms number?)\n(>def ::node-run-start-ms number?)\n(>def ::node-run-finish-ms number?)\n(>def ::node-resolver-input map?)\n(>def ::node-resolver-output map?)\n\n(>def ::node-run-stats map?)\n(>def ::node-run-stats* any?)\n\n(>def ::nodes-with-error ::pcp/node-id-set)\n\n(>def ::resolver-cache* any?)\n(>def ::resolver-run-duration-ms number?)\n(>def ::resolver-run-start-ms number?)\n(>def ::resolver-run-finish-ms number?)\n\n(>def ::run-stats map?)\n(>def ::run-stats-omit-resolver-io? boolean?)\n\n(>def ::source-node-id ::pcp/node-id)\n\n(>def ::taken-paths\n  \"Set with node-ids for attempted paths in a OR node.\"\n  (s/coll-of ::pcp/node-id :kind vector?))\n\n(>def ::success-path\n  \"Path that succeed in a OR node.\"\n  ::pcp/node-id)\n\n(>def ::root-query\n  \"Query used to start the process. Not always available.\"\n  vector?)\n\n(>def ::unsupported-batch?\n  \"Flag to tell the runner that it can't use batch. This happens when navigating for\n  example into a set, in which Pathom can't determine which was the original item\n  for replacement.\"\n  boolean?)\n\n(>def ::wrap-batch-resolver-error fn?)\n(>def ::wrap-merge-attribute fn?)\n(>def ::wrap-mutate fn?)\n(>def ::wrap-resolve fn?)\n(>def ::wrap-resolver-error fn?)\n(>def ::wrap-mutation-error fn?)\n(>def ::wrap-run-graph! fn?)\n\n(>def ::process-run-start-ms number?)\n(>def ::process-run-finish-ms number?)\n(>def ::process-run-duration-ms number?)\n\n(>def ::node-run-return (? (s/keys :opt [::batch-hold])))\n\n(>defn all-requires-ready?\n  \"Check if all requirements from the node are present in the current entity.\"\n  [env {::pcp/keys [expects]}]\n  [map? (s/keys :req [::pcp/expects])\n   => boolean?]\n  (let [entity (p.ent/entity env)]\n    (every? #(contains? entity %) (keys expects))))\n\n(declare run-node! run-graph! merge-node-stats!)\n\n(defn union-key-on-data? [{:keys [union-key]} m]\n  (contains? m union-key))\n\n(defn pick-union-entry\n  \"Check if ast children is a union type. If so, makes a decision to choose a path and\n  return that AST.\"\n  [ast m]\n  (if (pf.eql/union-children? ast)\n    (some (fn [ast']\n            (if (union-key-on-data? ast' m)\n              (pf.eql/union->root ast')))\n      (pf.eql/union-children ast))\n    ast))\n\n(defn process-map-subquery\n  [env ast m]\n  (if (and (map? m)\n           (not (pco/final-value? m)))\n    (let [cache-tree* (p.ent/create-entity m)\n          ast         (pick-union-entry ast m)]\n      (run-graph! env ast cache-tree*))\n    m))\n\n(defn process-sequence-subquery\n  [env ast s]\n  (if (pco/final-value? s)\n    s\n    (into\n      (empty s)\n      (map-indexed #(process-map-subquery (p.path/append-path env %) ast %2))\n      (cond-> s\n        (coll/coll-append-at-head? s)\n        reverse))))\n\n(defn process-map-container-subquery\n  \"Build a new map where the values are replaced with the map process of the subquery.\"\n  [env ast m]\n  (if (pco/final-value? m)\n    m\n    (into {}\n          (map (fn [x]\n                 (coll/make-map-entry\n                   (key x)\n                   (process-map-subquery (p.path/append-path env (key x)) ast (val x)))))\n          m)))\n\n(defn process-map-container?\n  \"Check if the map should be processed as a map-container, this means the sub-query\n  should apply to the map values instead of the map itself.\n\n  This can be dictated by adding the ::pcr/map-container? meta data on the value, or\n  requested by the query as part of the param.\"\n  [ast v]\n  (or (-> v meta ::map-container?)\n      (-> ast :params ::map-container?)))\n\n(defn normalize-ast-recursive-query [{:keys [query] :as ast} graph k]\n  (let [children (cond\n                   (= '... query)\n                   (vec (vals (::pcp/index-ast graph)))\n\n                   (pos-int? query)\n                   (-> graph ::pcp/index-ast\n                       (update-in [k :query] dec)\n                       vals vec)\n\n                   :else\n                   (:children ast))]\n    (assoc ast :children children)))\n\n(defn entry-ast\n  \"Get AST entry and pulls recursive query when needed.\"\n  [graph k]\n  (-> (pcp/entry-ast graph k)\n      (normalize-ast-recursive-query graph k)))\n\n(>defn process-attr-subquery\n  [{::pcp/keys [graph]\n    :as        env} entity k v]\n  [(s/keys :req [::pcp/graph]) map? ::p.path/path-entry any?\n   => any?]\n  (let [{:keys [children] :as ast} (entry-ast graph k)\n        env (p.path/append-path env k)]\n    (if children\n      (cond\n        (map? v)\n        (if (process-map-container? ast v)\n          (process-map-container-subquery env ast v)\n          (process-map-subquery env ast v))\n\n        (coll/collection? v)\n        (process-sequence-subquery\n          (cond-> env\n            ; no batch in sequences that are not vectors because we can't reach those\n            ; paths for updating later\n            (not (vector? v))\n            (assoc ::unsupported-batch? true))\n          ast v)\n\n        :else\n        v)\n      (if-let [x (find entity k)]\n        (val x)\n        v))))\n\n(>defn merge-entity-data\n  \"Specialized merge versions that work on entity data.\"\n  [env entity new-data]\n  [(s/keys :opt [::merge-attribute]) ::p.ent/entity-tree ::p.ent/entity-tree\n   => ::p.ent/entity-tree]\n  (reduce-kv\n    (fn [out k v]\n      (if (refs/kw-identical? v ::pco/unknown-value)\n        out\n        (p.plugin/run-with-plugins env ::wrap-merge-attribute\n          (fn [env m k v] (assoc m k (process-attr-subquery env entity k v)))\n          env out k v)))\n    entity\n    new-data))\n\n(defn merge-resolver-response!\n  \"This function gets the map returned from the resolver and merge the data in the\n  current cache-tree.\"\n  [env response]\n  (if (map? response)\n    (p.ent/swap-entity! env #(merge-entity-data env % %2) response))\n  env)\n\n(defn process-idents!\n  \"Process the idents from the Graph, this will add the ident data into the child.\n\n  If there is ident data already, it gets merged with the ident value.\"\n  [env idents]\n  (doseq [k idents]\n    (p.ent/swap-entity! env\n      #(assoc % k (process-attr-subquery env {} k\n                                         (assoc (get % k) (first k) (second k)))))))\n\n(defn run-next-node!\n  \"Runs the next node associated with the node, in case it exists.\"\n  [{::pcp/keys [graph] :as env} {::pcp/keys [run-next]}]\n  (if run-next\n    (run-node! env (pcp/get-node graph run-next))))\n\n(defn merge-node-stats!\n  [{::keys [node-run-stats*]}\n   {::pcp/keys [node-id]}\n   data]\n  (if node-run-stats*\n    (refs/gswap! node-run-stats* update node-id coll/merge-defaults data)))\n\n(defn merge-mutation-stats!\n  [{::keys [node-run-stats*]}\n   {::pco/keys [op-name]}\n   data]\n  (if node-run-stats*\n    (refs/gswap! node-run-stats* update op-name coll/merge-defaults data)))\n\n(defn mark-resolver-error\n  [{::keys [node-run-stats*]}\n   {::pcp/keys [node-id]}\n   error]\n  (if node-run-stats*\n    (doto node-run-stats*\n      (refs/gswap! assoc-in [node-id ::node-error] error)\n      (refs/gswap! update ::nodes-with-error coll/sconj node-id))))\n\n(defn mark-resolver-error-with-plugins\n  [env node e]\n  (p.plugin/run-with-plugins env ::wrap-resolver-error\n    mark-resolver-error env node e))\n\n(defn choose-cache-store [env cache-store]\n  (if cache-store\n    (if (contains? env cache-store)\n      cache-store\n      (do\n        (l/warn ::event-attempt-use-undefined-cache-store\n                {::pco/cache-store cache-store})\n        ::resolver-cache*))\n    ::resolver-cache*))\n\n(defn report-resolver-io-stats\n  [{::keys [run-stats-omit-resolver-io?]} input-data result]\n  (if run-stats-omit-resolver-io?\n    {::node-resolver-input-shape  (pfsd/data->shape-descriptor input-data)\n     ::node-resolver-output-shape (pfsd/data->shape-descriptor result)}\n\n    {::node-resolver-input  input-data\n     ::node-resolver-output (if (::batch-hold result)\n                              ::batch-hold\n                              result)}))\n\n(defn missing-maybe-in-pending-batch?\n  [{::p.path/keys [path] :as env} input]\n  (let [nested-inputs (coll/filter-vals seq input)]\n    (if (seq nested-inputs)\n      (let [pending-nested?\n            (->> env ::batch-pending* deref vals\n                 (into [] cat)\n                 (map (comp\n                        #(subvec % (count path))\n                        ::p.path/path ::env))\n                 (some\n                   (fn [path']\n                     (contains? nested-inputs (first path')))))]\n        pending-nested?)\n      false)))\n\n(defn wait-batch-response [env node]\n  {::batch-hold {::env             env\n                 ::pcp/node        node\n                 ::nested-waiting? true}})\n\n(defn- invoke-resolver-cached\n  [env cache? op-name resolver cache-store input-data params]\n  (if cache?\n    (p.cache/cached cache-store env\n      [op-name input-data params]\n      #(pco.prot/-resolve resolver env input-data))\n\n    (pco.prot/-resolve resolver env input-data)))\n\n(defn warn-batch-unsupported [env op-name]\n  (l/warn ::event-batch-unsupported\n          {::p.path/path (::p.path/path env)\n           ::pco/op-name op-name}))\n\n(defn- invoke-resolver-cached-batch\n  [env cache? op-name resolver cache-store input-data params]\n  (warn-batch-unsupported env op-name)\n  (if cache?\n    (p.cache/cached cache-store env\n      [op-name input-data params]\n      #(first (pco.prot/-resolve resolver env [input-data])))\n\n    (first (pco.prot/-resolve resolver env [input-data]))))\n\n(defn batch-hold-token\n  [env cache? op-name node cache-store input-data]\n  {::batch-hold {::pco/op-name         op-name\n                 ::pcp/node            node\n                 ::pco/cache?          cache?\n                 ::pco/cache-store     cache-store\n                 ::node-resolver-input input-data\n                 ::env                 env}})\n\n(defn valid-response? [x]\n  (or (map? x)\n      (nil? x)\n      (refs/kw-identical? x ::node-error)))\n\n(defn invoke-resolver-from-node\n  \"Evaluates a resolver using node information.\n\n  When this function runs the resolver, if filters the data to only include the keys\n  mentioned by the resolver input. This is important to ensure that the resolver is\n  not using some key that came accidentally due to execution order, that would lead to\n  brittle executions.\"\n  [env\n   {::pco/keys [op-name]\n    ::pcp/keys [input]\n    :as        node}]\n  (let [resolver        (pci/resolver env op-name)\n        {::pco/keys [op-name batch? cache? cache-store optionals]\n         :or        {cache? true}} (pco/operation-config resolver)\n        env             (assoc env ::pcp/node node)\n        entity          (p.ent/entity env)\n        input-data      (pfsd/select-shape-filtering entity (pfsd/merge-shapes input optionals) input)\n        input-shape     (pfsd/data->shape-descriptor input-data)\n        params          (pco/params env)\n        cache-store     (choose-cache-store env cache-store)\n        resolver-cache* (get env cache-store)\n        _               (merge-node-stats! env node\n                          {::resolver-run-start-ms (time/now-ms)})\n        result          (try\n                          (if (pfsd/missing input-shape input entity)\n                            (if (missing-maybe-in-pending-batch? env input)\n                              (wait-batch-response env node)\n                              (throw (ex-info \"Insufficient data\" {:required  input\n                                                                   :available input-shape})))\n                            (cond\n                              batch?\n                              (if-let [x (p.cache/cache-find resolver-cache* [op-name input-data params])]\n                                (val x)\n                                (if (::unsupported-batch? env)\n                                  (invoke-resolver-cached-batch\n                                    env cache? op-name resolver cache-store input-data params)\n                                  (batch-hold-token env cache? op-name node cache-store input-data)))\n\n                              :else\n                              (invoke-resolver-cached\n                                env cache? op-name resolver cache-store input-data params)))\n                          (catch #?(:clj Throwable :cljs :default) e\n                            (mark-resolver-error-with-plugins env node e)\n                            ::node-error))\n        finish          (time/now-ms)]\n    (if-not (valid-response? result)\n      (l/warn ::invalid-resolver-response {::pco/op-name op-name :response result}))\n    (merge-node-stats! env node\n      (cond-> {::resolver-run-finish-ms finish}\n        (not (::batch-hold result))\n        (merge (report-resolver-io-stats env input-data result))))\n    result))\n\n(defn run-resolver-node!\n  \"This function evaluates the resolver associated with the node.\n\n  First it checks if the expected results from the resolver are already available. In\n  case they are, the resolver call is skipped.\"\n  [env node]\n  (if (all-requires-ready? env node)\n    (run-next-node! env node)\n    (let [_ (merge-node-stats! env node {::node-run-start-ms (time/now-ms)})\n          {::keys [batch-hold] :as response}\n          (p.plugin/run-with-plugins env ::wrap-resolve\n            invoke-resolver-from-node env node)]\n      (cond\n        ; propagate batch hold up, this will make all nodes to stop running\n        ; so they can wait for the batch result\n        batch-hold response\n\n        (not (refs/kw-identical? ::node-error response))\n        (do\n          (merge-resolver-response! env response)\n          (merge-node-stats! env node {::node-run-finish-ms (time/now-ms)})\n          (run-next-node! env node))\n\n        :else\n        (do\n          (merge-node-stats! env node {::node-run-finish-ms (time/now-ms)})\n          nil)))))\n\n(defn priority-sort\n  \"Sort nodes based on the priority of the node successors. This scans all successors\n  and choose which one has a node with the highest priority number.\n\n  Returns the paths and their highest priority, in order with the highest priority as\n  first. For example:\n\n      [[4 [2 1]] [6 [1]]]\n\n  Means the first path is choosing node-id 4, and highest priority is 2.\"\n  [{::pcp/keys [graph] :as env} node-ids]\n  (let [paths (mapv\n                (fn [nid]\n                  [nid\n                   (->> (pcp/node-successors graph nid)\n                        (keep #(pcp/node-with-resolver-config graph env %))\n                        (map #(or (::pco/priority %) 0))\n                        (distinct)\n                        (sort #(compare %2 %))\n                        vec)])\n                node-ids)]\n    (->> paths\n         (sort-by second #(coll/vector-compare %2 %)))))\n\n(defn default-choose-path [env _or-node node-ids]\n  (-> (priority-sort env node-ids)\n      ffirst))\n\n(defn add-taken-path!\n  [{::keys [node-run-stats*]} {::pcp/keys [node-id]} taken-path-id]\n  (refs/gswap! node-run-stats* update-in [node-id ::taken-paths] coll/vconj taken-path-id))\n\n(>defn run-or-node!\n  [{::pcp/keys [graph]\n    ::keys     [choose-path]\n    :or        {choose-path default-choose-path}\n    :as        env} {::pcp/keys [run-or] :as or-node}]\n  [(s/keys :req [::pcp/graph]) ::pcp/node\n   => ::node-run-return]\n  (merge-node-stats! env or-node {::node-run-start-ms (time/now-ms)})\n\n  (let [res (if-not (all-requires-ready? env or-node)\n              (loop [nodes run-or]\n                (if (seq nodes)\n                  (let [picked-node-id (choose-path env or-node nodes)\n                        node-id        (if (contains? nodes picked-node-id)\n                                         picked-node-id\n                                         (do\n                                           (l/warn ::event-invalid-chosen-path\n                                                   {:expected-one-of nodes\n                                                    :chosen-attempt  picked-node-id\n                                                    :actual-used     (first nodes)})\n                                           (first nodes)))]\n                    (add-taken-path! env or-node node-id)\n                    (let [res (run-node! env (pcp/get-node graph node-id))]\n                      (if (::batch-hold res)\n                        res\n                        (if (all-requires-ready? env or-node)\n                          (merge-node-stats! env or-node {::success-path node-id})\n                          (recur (disj nodes node-id)))))))))]\n    (if (::batch-hold res)\n      res\n      (do\n        (merge-node-stats! env or-node {::node-run-finish-ms (time/now-ms)})\n        (run-next-node! env or-node)))))\n\n(>defn run-and-node!\n  \"Given an AND node, runs every attached node, then runs the attached next.\"\n  [{::pcp/keys [graph] :as env} {::pcp/keys [run-and] :as and-node}]\n  [(s/keys :req [::pcp/graph]) ::pcp/node\n   => ::node-run-return]\n  (merge-node-stats! env and-node {::node-run-start-ms (time/now-ms)})\n\n  (let [res (reduce\n              (fn [_ node-id]\n                (let [node-res (run-node! env (pcp/get-node graph node-id))]\n                  (if (::batch-hold node-res)\n                    (reduced node-res))))\n              nil\n              run-and)]\n    (if (::batch-hold res)\n      res\n      (do\n        (merge-node-stats! env and-node {::node-run-finish-ms (time/now-ms)})\n        (run-next-node! env and-node)))))\n\n(>defn run-node!\n  \"Run a node from the compute graph. This will start the processing on the sent node\n  and them will run everything that's connected to this node as sequences of it.\n\n  The result is going to build up at ::p.ent/cache-tree*, after the run is concluded\n  the output will be there.\"\n  [env node]\n  [(s/keys :req [::pcp/graph ::p.ent/entity-tree*]) ::pcp/node\n   => ::node-run-return]\n  (case (pcp/node-kind node)\n    ::pcp/node-resolver\n    (run-resolver-node! env node)\n\n    ::pcp/node-and\n    (run-and-node! env node)\n\n    ::pcp/node-or\n    (run-or-node! env node)))\n\n(defn placeholder-merge-entity\n  \"Create an entity to process the placeholder demands. This consider if the placeholder\n  has params, params in placeholders means that you want some specific data at that\n  point.\"\n  [{::pcp/keys [graph]} source-ent]\n  (reduce\n    (fn [out ph]\n      (let [data (:params (pcp/entry-ast graph ph))]\n        (assoc out ph\n          ; TODO maybe check for possible optimization when there are no conflicts\n          ; between different placeholder levels\n          (merge source-ent data))))\n    {}\n    (::pcp/placeholders graph)))\n\n(defn invoke-mutation!\n  \"Run mutation from AST.\"\n  [env {:keys [key] :as ast}]\n  (let [mutation (pci/mutation env key)\n        start    (time/now-ms)\n        _        (merge-mutation-stats! env {::pco/op-name key}\n                                        {::node-run-start-ms     start\n                                         ::mutation-run-start-ms start})\n        result   (try\n                   (if mutation\n                     (p.plugin/run-with-plugins env ::wrap-mutate\n                       #(pco.prot/-mutate mutation %1 (:params %2)) env ast)\n                     (throw (ex-info \"Mutation not found\" {::pco/op-name key})))\n                   (catch #?(:clj Throwable :cljs :default) e\n                     (p.plugin/run-with-plugins env ::wrap-mutation-error\n                       (fn [_ _ _]) env ast e)\n                     {::mutation-error e}))]\n    (merge-mutation-stats! env {::pco/op-name key}\n                           {::mutation-run-finish-ms (time/now-ms)})\n\n    (if (::mutation-error result)\n      (p.ent/swap-entity! env assoc key result)\n      (p.ent/swap-entity! env assoc key\n        (process-attr-subquery env {} key result)))\n\n    (merge-mutation-stats! env {::pco/op-name key}\n                           {::node-run-finish-ms (time/now-ms)})))\n\n(defn process-mutations!\n  \"Runs the mutations gathered by the planner.\"\n  [{::pcp/keys [graph] :as env}]\n  (doseq [key (::pcp/mutations graph)]\n    (invoke-mutation! env (entry-ast graph key))))\n\n(defn run-root-node!\n  [{::pcp/keys [graph] :as env}]\n  (if-let [root (pcp/get-root-node graph)]\n    (let [{::keys [batch-hold]} (run-node! env root)]\n      (when batch-hold\n        (if (::nested-waiting? batch-hold)\n          ; add to wait\n          (refs/gswap! (::batch-waiting* env) coll/vconj batch-hold)\n          ; add to batch pending\n          (refs/gswap! (::batch-pending* env) update (::pco/op-name batch-hold)\n                       coll/vconj batch-hold))))))\n\n(>defn run-graph!*\n  \"Run the root node of the graph. As resolvers run, the result will be add to the\n  entity cache tree.\"\n  [{::pcp/keys [graph] :as env}]\n  [(s/keys :req [::pcp/graph ::p.ent/entity-tree*])\n   => (s/keys)]\n  (let [source-ent (p.ent/entity env)]\n    ; mutations\n    (process-mutations! env)\n\n    ; compute nested available fields\n    (if-let [nested (::pcp/nested-process graph)]\n      (merge-resolver-response! env (select-keys (p.ent/entity env) nested)))\n\n    ; process idents\n    (if-let [idents (::pcp/idents graph)]\n      (process-idents! env idents))\n\n    ; now run the nodes\n    (run-root-node! env)\n\n    ; placeholders\n    (merge-resolver-response! env (placeholder-merge-entity env source-ent))\n\n    graph))\n\n(defn plan-and-run!\n  [env ast-or-graph entity-tree*]\n  #_; keep commented for description, but don't want to validate this fn on runtime\n      [(s/keys) (s/or :ast :edn-query-language.ast/node\n                      :graph ::pcp/graph) ::p.ent/entity-tree*\n       => (s/keys)]\n  (let [graph (if (::pcp/nodes ast-or-graph)\n                ast-or-graph\n                (let [start-plan  (time/now-ms)\n                      plan        (pcp/compute-run-graph\n                                    (assoc env\n                                      :edn-query-language.ast/node ast-or-graph\n                                      ::pcp/available-data (pfsd/data->shape-descriptor @entity-tree*)))\n                      finish-plan (time/now-ms)]\n                  (assoc plan\n                    ::compute-plan-run-start-ms start-plan\n                    ::compute-plan-run-finish-ms finish-plan)))]\n    (run-graph!*\n      (assoc env\n        ::pcp/graph graph\n        ::p.ent/entity-tree* entity-tree*))))\n\n(defn assoc-end-plan-stats [env plan]\n  (assoc plan\n    ::graph-run-start-ms (::graph-run-start-ms env)\n    ::graph-run-finish-ms (time/now-ms)\n    ::node-run-stats (some-> env ::node-run-stats* deref)))\n\n(defn include-meta-stats [result env plan]\n  (vary-meta result assoc ::run-stats (assoc-end-plan-stats env plan)))\n\n(defn mark-batch-errors [e env batch-op batch-items]\n  (p.plugin/run-with-plugins env ::wrap-batch-resolver-error\n    (fn [_ _ _]) env [batch-op batch-items] e)\n\n  (doseq [{env'       ::env\n           ::pcp/keys [node]} batch-items]\n    (p.plugin/run-with-plugins env' ::wrap-resolver-error\n      mark-resolver-error env' node (ex-info \"Batch error\" {::batch-error? true} e)))\n\n  ::node-error)\n\n(defn cache-batch-item\n  [{env'       ::env\n    ::keys     [node-resolver-input]\n    ::pco/keys [cache? cache-store]\n    :as        batch-item}\n   batch-op\n   response]\n  (if cache?\n    (p.cache/cached cache-store env'\n      [batch-op node-resolver-input (pco/params batch-item)]\n      (fn [] response))))\n\n(defn combine-inputs-with-responses\n  \"For batch we group the items with the same inputs so the resolver only needs to have\n  each input once. This function is a helper to side the input batch items with the\n  distinct list of responses.\"\n  [input-groups inputs responses]\n  (->> (mapv input-groups inputs)\n       (mapv #(vector %2 %) responses)\n       (into []\n             (mapcat\n               (fn [[inputs result]]\n                 (mapv #(vector % result) inputs))))))\n\n(defn merge-entity-to-root-data [env env' node]\n  (when-not (p.path/root? env')\n    (p.ent/swap-entity! env update-in (::p.path/path env')\n      (fn [ent]\n        (let [ent' (p.ent/entity env')]\n          (-> ent\n              (coll/merge-defaults ent')\n              (merge (pfsd/select-shape ent' (::pcp/expects node)))\n              (include-meta-stats env' (::pcp/graph env'))))))))\n\n(defn run-batches-pending! [env]\n  (let [batches* (-> env ::batch-pending*)\n        batches  @batches*]\n    (vreset! batches* {})\n    (doseq [[batch-op batch-items] batches]\n      (let [input-groups (group-by ::node-resolver-input batch-items)\n            inputs       (keys input-groups)\n            resolver     (pci/resolver env batch-op)\n            batch-env    (-> batch-items first ::env\n                             (coll/update-if ::p.path/path #(cond-> % (seq %) pop)))\n            start        (time/now-ms)\n            responses    (try\n                           (pco.prot/-resolve resolver batch-env inputs)\n                           (catch #?(:clj Throwable :cljs :default) e\n                             (mark-batch-errors e env batch-op batch-items)))\n            finish       (time/now-ms)]\n\n        (when-not (refs/kw-identical? ::node-error responses)\n          (if (not= (count inputs) (count responses))\n            (throw (ex-info \"Batch results must be a sequence and have the same length as the inputs.\" {})))\n\n          (doseq [[{env'       ::env\n                    ::pcp/keys [node]\n                    ::keys     [node-resolver-input]\n                    :as        batch-item} response] (combine-inputs-with-responses input-groups inputs responses)]\n            (cache-batch-item batch-item batch-op response)\n\n            (merge-node-stats! env' node\n              (merge {::batch-run-start-ms  start\n                      ::batch-run-finish-ms finish}\n                     (report-resolver-io-stats env' node-resolver-input response)))\n\n            (merge-resolver-response! env' response)\n\n            (merge-node-stats! env' node {::node-run-finish-ms (time/now-ms)})\n\n            (run-root-node! env')\n\n            (merge-entity-to-root-data env env' node)))))))\n\n(defn run-batches-waiting! [env]\n  (let [waits* (-> env ::batch-waiting*)\n        waits  @waits*]\n    (vreset! waits* [])\n    (doseq [{env' ::env} waits]\n      (p.ent/reset-entity! env' (get-in (p.ent/entity env) (::p.path/path env')))\n\n      (run-root-node! env')\n\n      (when-not (p.path/root? env')\n        (p.ent/swap-entity! env assoc-in (::p.path/path env')\n          (-> (p.ent/entity env')\n              (include-meta-stats env' (::pcp/graph env'))))))))\n\n(defn run-batches! [env]\n  (run-batches-pending! env)\n  (run-batches-waiting! env))\n\n(defn setup-runner-env [env entity-tree* cache-type]\n  (-> env\n      ; due to recursion those need to be defined only on the first time\n      (coll/merge-defaults {::pcp/plan-cache* (cache-type {})\n                            ::batch-pending*  (cache-type {})\n                            ::batch-waiting*  (cache-type [])\n                            ::resolver-cache* (cache-type {})\n                            ::p.path/path     []})\n      ; these need redefinition at each recursive call\n      (assoc\n        ::graph-run-start-ms (time/now-ms)\n        ::p.ent/entity-tree* entity-tree*\n        ::node-run-stats* (cache-type ^::map-container? {}))))\n\n(defn run-graph-impl!\n  [env ast-or-graph entity-tree*]\n  (let [env  (setup-runner-env env entity-tree* volatile!)\n        plan (plan-and-run! env ast-or-graph entity-tree*)]\n\n    ; run batches on root path only\n    (when (p.path/root? env)\n      (while (seq @(::batch-pending* env))\n        (run-batches! env)))\n\n    ; return result with run stats in meta\n    (-> (p.ent/entity env)\n        (include-meta-stats env plan))))\n\n(defn run-graph-with-plugins [env ast-or-graph entity-tree* impl!]\n  (if (p.path/root? env)\n    (p.plugin/run-with-plugins env ::wrap-root-run-graph!\n      (fn [e a t]\n        (p.plugin/run-with-plugins env ::wrap-run-graph!\n          impl! e a t))\n      env ast-or-graph entity-tree*)\n    (p.plugin/run-with-plugins env ::wrap-run-graph!\n      impl! env ast-or-graph entity-tree*)))\n\n(>defn run-graph!\n  \"Plan and execute a request, given an environment (with indexes), the request AST\n  and the entity-tree*.\"\n  [env ast-or-graph entity-tree*]\n  [(s/keys) (s/or :ast :edn-query-language.ast/node\n                  :graph ::pcp/graph) ::p.ent/entity-tree*\n   => (s/keys)]\n  (run-graph-with-plugins env ast-or-graph entity-tree* run-graph-impl!))\n\n(>defn with-resolver-cache\n  ([env] [map? => map?] (with-resolver-cache env (atom {})))\n  ([env cache*] [map? p.cache/cache-store? => map?] (assoc env ::resolver-cache* cache*)))\n"]}