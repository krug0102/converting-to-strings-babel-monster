{"version":3,"sources":["sci/impl/records.cljc"],"mappings":"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","names":["var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","sci.impl.records/defrecord","seq154252","G__154256","cljs.core/first","cljs.core/next","G__154257","G__154258","G__154259","G__154260","self__4816__auto__","_","ctx","record-name","fields","protocol-impls","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/vec","cljs.core.apply","cljs.core/array-map","factory-fn-sym","cljs.core.symbol","keys","cljs.core.mapv","cljs.core/keyword","sci.impl.utils/split-when","cljs.core/symbol?","cljs.core.mapcat","p__154266","vec__154267","seq__154268","first__154269","protocol-name","impls","cljs.core.map","impl","p1__154242#","protocol-var","fexpr__154270","cljs.core/deref","sci.impl.utils/eval-resolve-state","protocol-ns","pns","sci.impl.vars/getName","fq-meth-name","args","cljs.core/second","this","bindings","field","cljs.core.keyword","cljs.core/nnext","sci.impl.records/sci-record?","x","or__4223__auto__","cljs.core/map?","G__154274","cljs.core/meta","cljs.core/record?","G__154276","sci.impl.records/resolve-record-class","js/Error","sym","sym-str","last-dot","clojure.string.last_index_of","class-name","cljs.core.subs","namespace","sci.impl.vars/current-ns-name","sci.impl.records.resolve_record_class","package","class","temp__5753__auto__","sci-var","cljs.core.get_in","sci.impl.vars/var?"],"sourcesContent":["(ns sci.impl.records\n  {:no-doc true}\n  (:refer-clojure :exclude [defrecord record?])\n  (:require [clojure.string :as str]\n            [sci.impl.utils :as utils]\n            [sci.impl.vars :as vars]))\n\n(defn defrecord [_ _ ctx record-name fields & protocol-impls]\n  (let [factory-fn-sym (symbol (str \"->\" record-name))\n        keys (mapv keyword fields)\n        protocol-impls (utils/split-when symbol? protocol-impls)\n        protocol-impls\n        (mapcat (fn [[protocol-name & impls]]\n                  (map (fn [impl]\n                         (let [protocol-var (@utils/eval-resolve-state ctx protocol-name)\n                               protocol-ns (-> protocol-var deref :ns)\n                               pns (str (vars/getName protocol-ns))\n                               fq-meth-name #(symbol pns %)\n                               args (second impl)\n                               this (first args)\n                               bindings (vec (mapcat (fn [field]\n                                                       [field (list (keyword field) this)])\n                                                     fields))]\n                           `(defmethod ~(fq-meth-name (str (first impl))) '~record-name ~(second impl)\n                              (let ~bindings\n                                ~@(nnext impl)))))\n                       impls))\n                protocol-impls)]\n    `(do\n       ;; (prn '~record-name)\n       (defn ~factory-fn-sym [& args#]\n         (vary-meta (zipmap ~keys args#)\n                    assoc\n                    :sci.impl/record true\n                    :sci.impl/type '~record-name))\n       (def ~record-name (with-meta '~record-name\n                           {:sci.impl/record true\n                            :sci.impl.record/constructor ~factory-fn-sym}))\n       ~@protocol-impls)))\n\n(defn sci-record? [x]\n  (or\n   (when (map? x)\n     (some-> x meta :sci.impl/record))\n   (clojure.core/record? x)))\n\n(defn resolve-record-class\n  ([ctx sym]\n   (let [sym-str (str sym)\n         last-dot (str/last-index-of sym-str \".\")\n         class-name (if last-dot\n                      (subs sym-str (inc last-dot) (count sym-str))\n                      sym-str)\n         namespace (if last-dot\n                     (symbol (subs sym-str 0 last-dot))\n                     (vars/current-ns-name))]\n     (resolve-record-class ctx namespace (symbol class-name))))\n  ([ctx package class]\n   (let [namespace package]\n     (when-let [sci-var (get-in @(:env ctx) [:namespaces namespace class])]\n       (if (vars/var? sci-var)\n         @sci-var\n         sci-var)))))\n"]}