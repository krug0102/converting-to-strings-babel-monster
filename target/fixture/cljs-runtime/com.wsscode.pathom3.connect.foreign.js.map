{"version":3,"sources":["com/wsscode/pathom3/connect/foreign.cljc"],"mappings":"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","names":["com.wsscode.pathom3.connect.foreign/index-query","com.wsscode.pathom3.connect.foreign/remove-internal-keys","m","cljs.core.into","cljs.core.remove","p__158452","vec__158453","cljs.core.nth","k","_","clojure.string/starts-with?","or__4223__auto__","cljs.core/namespace","p__158457","map__158458","cljs.core/--destructure-map","cljs.core.get","com.wsscode.pathom3.connect.foreign/compute-foreign-input","node","env","input","entity","com.wsscode.pathom3.entity-tree/entity","cljs.core/select-keys","cljs.core/keys","p__158460","map__158461","com.wsscode.pathom3.connect.foreign/compute-foreign-query","p__158463","map__158464","com.wsscode.pathom3.connect.foreign/internalize-foreign-errors","path","join-node","errors","p1__158462#","com.wsscode.misc.coll/map-keys","cljs.core/pop","G__158465","cljs.core/next","com.wsscode.pathom3.connect.foreign/call-foreign","parser","foreign-call","response","com.wsscode.pathom3.connect.operation.resolver","com.wsscode.pathom3.connect.foreign/foreign-indexes-resolver","com.wsscode.pathom3.connect.foreign/remove-foreign-indexes","indexes","cljs.core.update","cljs.core/dissoc","cljs.core.update_in","p__158468","map__158469","com.wsscode.pathom3.connect.foreign/internalize-foreign-indexes","index-source-id","foreign","cljs.core.gensym","resolvers","p1__158467#","com.wsscode.misc.coll/map-vals","com.wsscode.pathom3.connect.operation.update_config","cljs.core/assoc","cljs.core/assoc-in","cljs.core.dissoc","com.wsscode.pathom3.connect.foreign/foreign-register","r__82170__auto__","promesa.core/promise?","promesa.core.then","p__158474","map__158475","map__158476"],"sourcesContent":["(ns com.wsscode.pathom3.connect.foreign\n  (:require\n    [clojure.string :as str]\n    [com.wsscode.misc.coll :as coll]\n    [com.wsscode.pathom3.connect.indexes :as pci]\n    [com.wsscode.pathom3.connect.operation :as pco]\n    [com.wsscode.pathom3.connect.planner :as pcp]\n    [com.wsscode.pathom3.entity-tree :as p.ent]\n    [com.wsscode.pathom3.path :as p.path]\n    [com.wsscode.promesa.macros :refer [clet]]))\n\n(def index-query\n  [::pci/indexes])\n\n(defn remove-internal-keys [m]\n  (into {} (remove (fn [[k _]] (str/starts-with? (or (namespace k) \"\") \"com.wsscode.pathom\"))) m))\n\n(defn compute-foreign-input [{::pcp/keys [node] :as env}]\n  (let [input  (::pcp/input node)\n        entity (p.ent/entity env)]\n    (select-keys entity (keys input))))\n\n(defn compute-foreign-query\n  [{::pcp/keys [node] :as env}]\n  {:pathom/ast    (::pcp/foreign-ast node)\n   :pathom/entity (compute-foreign-input env)})\n\n(defn internalize-foreign-errors\n  [{::p.path/keys [path]\n    ::keys        [join-node]} errors]\n  (coll/map-keys #(into (pop path) (cond-> % join-node next)) errors))\n\n(defn call-foreign [env parser]\n  (let [foreign-call (compute-foreign-query env)\n        response (parser foreign-call)]\n    response))\n\n(pco/defresolver foreign-indexes-resolver [env _]\n  {::pci/indexes\n   (select-keys env\n                [::pci/index-attributes\n                 ::pci/index-oir\n                 ::pci/index-io\n                 ::pci/autocomplete-ignore\n                 ::pci/index-resolvers\n                 ::pci/index-mutations])})\n\n(defn remove-foreign-indexes [indexes]\n  (-> indexes\n      (update ::pci/index-resolvers dissoc `foreign-indexes-resolver)\n      (update ::pci/index-attributes dissoc ::pci/indexes)\n      (update ::pci/index-oir dissoc ::pci/indexes)\n      (update-in [::pci/index-io #{}] dissoc ::pci/indexes)))\n\n(defn internalize-foreign-indexes\n  ([{::pci/keys [index-source-id] :as indexes} foreign]\n   (let [index-source-id (or index-source-id (gensym \"dynamic-parser-\"))]\n     (-> indexes\n         (remove-foreign-indexes)\n         (update ::pci/index-resolvers\n           (fn [resolvers]\n             (coll/map-vals\n               #(pco/update-config % assoc ::pco/dynamic-name index-source-id)\n               resolvers)))\n         (assoc-in [::pci/index-resolvers index-source-id]\n           (pco/resolver index-source-id\n             {::pco/cache?            false\n              ::pco/dynamic-resolver? true}\n             (fn [env _] (call-foreign env foreign))))\n         (dissoc ::pci/index-source-id)\n         (assoc-in [::foreign-indexes index-source-id] indexes)))))\n\n(defn foreign-register\n  [foreign]\n  (clet [{::pci/keys [indexes]} (foreign index-query)]\n    (internalize-foreign-indexes indexes foreign)))\n"]}