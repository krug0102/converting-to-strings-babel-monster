{"version":3,"sources":["repl_tooling/features/shadow_cljs.cljs"],"mappings":";AAKA,6CAAA,7CAAOA,kGAAUC;AAAjB,AACE,sBAAA,AAAA,wWAAKA,tCAAYC,1OACb,sDAAA,2CAAA,6FAAA,4CAAA,1OAACC,6JAA0BC,pQACnBC;;AAEd,4CAAA,5CAAMM,gGAASC;AAAf,AAAA,OAAAN,iDAAA,AAAAC,cAAA,AAAAC,sDAAA,KAAAC,eAAA,KAAA,AAAA,qDAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,sFAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,2DAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,KAAA,AAAAC,cAAA,AAAAJ,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,iGAAA,KAAA,IAAA,WAAA,KAAA,IAAA,UAAA,KAAA,IAAA,UAAA,KAAA,IAAA,yDAAA,KAAAA,eAAA,KAAA,AAAAH,iDAAA,AAAAC,cAAA,AAAAC,+CAAA,KAAAC,eAAA,KAAA,AAAA,uGAAA,KAAA,IAAA,OAAA,KAAAA,eAAA,cAAA,KAAA,IAAA,UAAA,KAAA,IAAA,rCAGqCG;;AAErC,6CAAA,7CAAOC,kGAAUZ;AAAjB,8OACO,AAACD,2CAASC,lMACV,AAACa,4CAAI,AAACC,6CAAKC,mBAASL,nMACpB,oDAAA,7CAACM;;AAGR,gDAAA,hDAAMC,wGAAaC;AAAnB,AACE,IAAMC,oBAAkB,mGACK,4CAAA,WAAAC,vDAACP,nFACD,AAACS,+CAAOC,/DACRC;AAFA,AAAM,uCAAAJ,kBAAA,lDAACC;GADPH;AAA7B,AAIE,oBAAIC;AACF,OAACP,2CAASO;;AADZ,kDAAA,uDAAA","names":["repl-tooling.features.shadow-cljs/readfile","shadow-path","js/shadow.js.shim.module$fs.readFileSync","cljs.reader.read_string","cljs.core/tagged-literal","cljs.core/keys","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/vec","repl-tooling.features.shadow-cljs/cmd-for","build-id","repl-tooling.features.shadow-cljs/cmds-for","cljs.core.map","cljs.core.juxt","cljs.core/identity","cljs.core.into","repl-tooling.features.shadow-cljs/command-for","project-paths","first-shadow-file","p1__161392#","js/shadow.js.shim.module$path.join","cljs.core.filter","js/shadow.js.shim.module$fs.existsSync","cljs.core/first"],"sourcesContent":["(ns repl-tooling.features.shadow-cljs\n  (:require [cljs.reader :as edn]\n            [\"path\" :as path]\n            [\"fs\" :refer [existsSync readFileSync]]))\n\n(defn- readfile [shadow-path]\n  (->> shadow-path readFileSync str\n      (edn/read-string {:default tagged-literal})\n      :builds keys))\n\n(defn cmd-for [build-id]\n  `(do\n     (~'clojure.core/require '[shadow.cljs.devtools.api])\n     (shadow.cljs.devtools.api/repl ~build-id)))\n\n(defn- cmds-for [shadow-path]\n  (->> (readfile shadow-path)\n       (map (juxt identity cmd-for))\n       (into {})))\n\n; TODO: Move this to another NS, or maybe detect better\n(defn command-for [project-paths]\n  (let [first-shadow-file (->> project-paths\n                               (map #(path/join % \"shadow-cljs.edn\"))\n                               (filter existsSync)\n                               first)]\n    (if first-shadow-file\n      (cmds-for first-shadow-file)\n      {:error :no-shadow-file})))\n"]}