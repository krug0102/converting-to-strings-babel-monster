{"version":3,"sources":["repl_tooling/commands_to_repl/orchard.cljs"],"mappings":"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","names":["repl-tooling.commands-to-repl.orchard/have-ns?","repl","namespace","repl_tooling.eval.eval","repl-tooling.repl-client.source/have-ns-command","promesa.core.then","promesa.core.catch$","cljs.core/constantly","repl-tooling.commands-to-repl.orchard/info-msg","repl-tooling.commands-to-repl.orchard/info!","editor-state","promesa.protocols/-bind","___31820__auto__","p__139332","map__139333","cljs.core/--destructure-map","cljs.core.get","p__139334","map__139335","p__139336","vec__139337","cljs.core.nth","p__139345","vec__139346","p__139350","vec__139351","___31810__auto__","___31809__auto__","promesa.protocols/-promise","on-start-eval","on-eval","editor-data","get-config","cljs.core/deref","contents","range","filename","ed","start","cljs.core/first","id","cljs.core.gensym","var","repl-tooling.editor-helpers/current-var","full-var-name","repl_tooling.editor_integration.commands.run_feature_BANG_","splitted","clojure.string.split","ns-name","name","G__139341","cljs.core._EQ_","cljs.core/count","cljs.core/cons","params","cljs?","repl-tooling.editor-integration.evaluation/need-cljs?","cmd","cljs.core.pr_str","row","col","p1__139331#","repl-tooling.eval/evaluate","G__139354","cljs.core.assoc","repl-tooling.commands-to-repl.orchard/xref-msg","repl-tooling.commands-to-repl.orchard/xref!","fqn","repl-tooling.editor-integration.commands/run-feature!","repl-tooling.commands-to-repl.orchard/doc-msg","repl-tooling.commands-to-repl.orchard/cljdoc!","p__139687","vec__139689","s","var-name","G__139681","repl-tooling.commands-to-repl.orchard/cmds","aux-repl","have-info?","have-xref?","have-docs?","G__139707"],"sourcesContent":["(ns repl-tooling.commands-to-repl.orchard\n  (:require [repl-tooling.eval :as eval]\n            [repl-tooling.repl-client.clj-helper :as h]\n            [repl-tooling.editor-helpers :as helpers]\n            [clojure.string :as str]\n            [repl-tooling.editor-integration.evaluation :as e-eval]\n            [repl-tooling.editor-integration.commands :as cmds]\n            [repl-tooling.repl-client.source :as source]\n            [promesa.core :as p]))\n\n(defn- have-ns? [repl namespace]\n  (-> (eval/eval repl (source/have-ns-command namespace))\n      (p/then :result)\n      (p/catch (constantly false))))\n\n(def ^:private info-msg (h/contents-for-fn \"orchard-cmds.clj\" \"info\"))\n\n(defn- info! [repl editor-state]\n  (p/let [{:keys [on-start-eval on-eval editor-data get-config]}\n          (:editor/callbacks @editor-state)\n          {:keys [contents range filename] :as ed} (editor-data)\n          start (first range)\n          id (gensym \"info\")\n          [range var] (helpers/current-var contents start)\n          full-var-name (cmds/run-feature! editor-state :eval\n                                           {:text (str \"`\" var)\n                                            :ignore true\n                                            :auto-detect true :aux true})\n          splitted (-> full-var-name :result str (str/split #\"/\" 2))\n          [ns-name name] (cond->> splitted\n                                  (= 1 (count splitted)) (cons \"user\"))\n\n          params {:id id :editor-data ed :range range}\n          cljs? (e-eval/need-cljs? (get-config) filename)\n          cmd (str \"(\" info-msg \" \"\n                   (pr-str ns-name) \" \"\n                   (pr-str name) \" '\"\n                   (pr-str {:dialect (if cljs? :cljs :clj)\n                            :env (-> @editor-state :repl/info :cljs/repl-env)})\n                   \")\")\n          [row col] start]\n    (on-start-eval params)\n    (eval/evaluate repl\n                   cmd\n                   {:ignore true :row row :col col}\n                   #(on-eval (assoc params :result % :repl repl)))))\n\n(def ^:private xref-msg (h/contents-for-fn \"orchard-cmds.clj\" \"find-usages\"))\n(defn- xref! [editor-state]\n  (p/let [fqn (cmds/run-feature! editor-state :get-full-var-name)\n          cmd (str \"(\" xref-msg \" \" (-> fqn :result str pr-str) \")\")]\n    (cmds/run-feature! editor-state :eval-and-render\n                       cmd (:range fqn) {:aux true :interactive true})))\n\n(def ^:private doc-msg (h/contents-for-fn \"orchard-cmds.clj\" \"clojure-docs\"))\n(defn- cljdoc! [editor-state]\n  (p/let [fqn (cmds/run-feature! editor-state :get-full-var-name)\n          s (-> fqn :result str (str/split #\"/\" 2))\n          [ns-name var-name] (cond->> s (-> s count (= 1)) (cons \"\"))\n          cmd (str \"(\" doc-msg \" \" (pr-str ns-name) \" \" (pr-str var-name) \")\")]\n    (cmds/run-feature! editor-state :eval-and-render\n                       cmd (:range fqn) {:aux :always :interactive true})))\n\n(defn cmds [editor-state]\n  (p/let [aux-repl (:clj/aux @editor-state)\n          have-info? (have-ns? aux-repl \"orchard.info\")\n          have-xref? (have-ns? aux-repl \"orchard.xref\")\n          have-docs? (have-ns? aux-repl \"orchard.clojuredocs\")]\n    (cond-> {}\n            have-info? (assoc :info-for-var {:name \"Info for var\"\n                                             :description \"Gets information for the current var, under cursor\"\n                                             :command #(info! aux-repl editor-state)})\n            have-xref? (assoc :find-usages {:name \"Find usages\"\n                                            :description \"Find usages of the current var\"\n                                            :command #(xref! editor-state)})\n            have-docs? (assoc :clojure-doc-for-var {:name \"Clojure doc for var\"\n                                                    :description \"Find the Clojure doc of the current var\"\n                                                    :command #(cljdoc! editor-state)}))))\n"]}