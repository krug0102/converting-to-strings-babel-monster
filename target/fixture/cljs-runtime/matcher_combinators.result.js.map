{"version":3,"sources":["matcher_combinators/result.cljc"],"mappings":";AAKA,AAAAA,yBAAA,AAAA,2GAAA,AAAA,kFAAgBC;AAEhB,AAAAD,yBAAA,AAAA,wGAAA,AAAA,iOAAA,iFAAA,iEAAA;AAIA,AAAAA,yBAAA,AAAA,2GAAA,AAAA,2EAAeE;AAEf,AAAAF,yBAAA,AAAA,4GAAA,AAAA,kjBAAgB,AAAAG,8BAAA,wCAAA,yDAAA,wDAAA,kDAAA,iEAAA,8DAAA,6DAAA,8DAAA,mDAAA,4DAAA,+DAAA,gEAAA,qDAAA,AAAA,KAAA,AAAA,KAAA,KAAA,mFAAA,WAAAC;AAAA,AAAA,OAAAC,qBAAAD;GAAA,WAAAA;AAAA,AAAA,OAAAE,0BAAAF,UAAA;GAAA,WAAAA;AAAA,AAAA,OAAAE,0BAAAF,UAAA;GAAA,WAAAA;AAAA,AAAA,OAAAE,0BAAAF,UAAA;WAAA,WAAAA;AAAA,AAAA,SAAA,AAAAC,qBAAAD,gBAAA,EAAA,AAAAE,0BAAAF,UAAA,iHAAA,EAAA,AAAAE,0BAAAF,UAAA,8GAAA,AAAAE,0BAAAF,UAAA;GAAA,AAAA,iCAAA,AAAA,yZAAA,AAAA,yZAAA,AAAA,yZAAA,AAAA,iCAAA,AAAA,g4DAAA,AAAA","names":["cljs.spec.alpha/def-impl","cljs.core/nat-int?","cljs.core/any?","cljs.spec.alpha/map-spec-impl","G__147423","cljs.core/map?","cljs.core/contains?"],"sourcesContent":["(ns matcher-combinators.result\n  (:require [clojure.spec.alpha :as s]))\n\n;; the weight of the mismatch. `0` is a match, and any number above is the\n;; number of leaf matchers that mismatch\n(s/def ::weight nat-int?)\n\n(s/def ::type #{:mismatch :match})\n\n;; either the original value, when matching, or the value with mismatches\n;; annotated\n(s/def ::value any?)\n\n(s/def ::result (s/keys :req [::weight ::type ::value]))\n"]}