{"version":3,"sources":["rewrite_clj/zip/editz.cljc"],"mappings":"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","names":["rewrite-clj.zip.editz/replace","zloc","value","rewrite-clj.custom-zipper.core/replace","rewrite-clj.node.protocols/coerce","rewrite-clj.zip.editz/node-editor","opts","node","f","rewrite_clj.node.protocols.sexpr","G__151968","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","rewrite-clj.zip.editz/edit","seq151974","G__151975","cljs.core/first","cljs.core/next","G__151976","self__4816__auto__","args","p1__151973#","rewrite_clj.custom_zipper.core.edit","rewrite-clj.zip.base/get-opts","cljs.core.apply","rewrite-clj.zip.editz/splice","rewrite-clj.custom-zipper.core/branch?","temp__5751__auto__","children","rewrite-clj.custom-zipper.core/children","cljs.core.drop_while","rewrite-clj.node.whitespace/whitespace?","cljs.core/reverse","cljs.core/seq","loc","cljs.core.reduce","rewrite-clj.custom-zipper.core/insert-right","rewrite-clj.custom-zipper.utils/remove-and-move-right","or__4223__auto__","rewrite_clj.zip.whitespace.skip_whitespace","rewrite-clj.zip.removez/remove","rewrite-clj.zip.editz/edit-token","str-fn","e","rewrite-clj.zip.base/sexpr","e'","cljs.core/Keyword","cljs.core.keyword","cljs.core/namespace","G__151993","cljs.core/name","cljs.core/Symbol","cljs.core.symbol","G__151994","rewrite_clj.node.token.token_node","rewrite-clj.zip.editz/edit-multi-line","line-fn","n","rewrite-clj.custom-zipper.core/node","cljs.core.update_in","cljs.core.comp","cljs.core/vec","rewrite-clj.zip.editz/prefix","s","G__152000","js/Error","rewrite-clj.zip.base/tag","p1__151997#","lines","cljs.core/empty?","p1__151998#","rewrite-clj.zip.editz/suffix","G__152002","p1__152001#","cljs.core.concat","cljs.core/butlast","cljs.core/last"],"sourcesContent":["(ns ^:no-doc rewrite-clj.zip.editz\n  (:refer-clojure :exclude [replace])\n  (:require [rewrite-clj.custom-zipper.core :as zraw]\n            [rewrite-clj.custom-zipper.utils :as u]\n            [rewrite-clj.node.protocols :as node]\n            [rewrite-clj.node.token :as ntoken]\n            [rewrite-clj.node.whitespace :as nwhitespace]\n            [rewrite-clj.zip.base :as base]\n            [rewrite-clj.zip.removez :as r]\n            [rewrite-clj.zip.whitespace :as ws]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## In-Place Modification\n\n(defn replace\n  \"Return `zloc` with the current node replaced by `value`.\n  If `value` is not already a node, an attempt will be made to coerce it to one.\"\n  [zloc value]\n  (zraw/replace zloc (node/coerce value)))\n\n(defn- node-editor\n  \"Create s-expression from node, apply the function and create\n   node from the result.\"\n  [opts]\n  (fn [node f]\n    (-> (node/sexpr node opts)\n        (f)\n        (node/coerce))))\n\n(defn edit\n  \"Return `zloc` with the current node replaced with the result of:\n\n   `(apply f (s-expr current-node) args)`\n\n  The result of `f`, if not already a node, will be coerced to a node if possible.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\"\n  [zloc f & args]\n  (zraw/edit zloc (node-editor (base/get-opts zloc)) #(apply f % args)))\n\n;; ## Splice\n\n(defn splice\n  \"Return zipper with the children of the current node in `zloc` merged into itself.\n   (akin to Clojure's `unquote-splicing` macro: `~@...`).\n   - if the node is not one that can have children, no modification will\n     be performed.\n   - if the node has no or only whitespace children, it will be removed.\n   - otherwise, splicing will be performed, moving the zipper to the first\n     non-whitespace spliced child node.\n\n  For example, given `[[1 2 3] 4 5 6]`, if zloc is located at vector `[1 2 3]`, a splice will result in raising the vector's children up `[1 2 3 4 5 6]` and locating the zipper at node `1`.\"\n  [zloc]\n  (if (zraw/branch? zloc)\n    (if-let [children (->> (zraw/children zloc)\n                           (drop-while nwhitespace/whitespace?)\n                           (reverse)\n                           (drop-while nwhitespace/whitespace?)\n                           (seq))]\n      (let [loc (->> (reduce zraw/insert-right zloc children)\n                     (u/remove-and-move-right))]\n        (or (ws/skip-whitespace loc) loc))\n      (r/remove zloc))\n    zloc))\n\n;; ## Prefix/Suffix\n\n(defn- edit-token\n  [zloc str-fn]\n  (let [e (base/sexpr zloc)\n        e' (cond (string? e) (str-fn e)\n                 (keyword? e) (keyword (namespace e) (str-fn (name e)))\n                 (symbol? e) (symbol (namespace e) (str-fn (name e))))]\n    (zraw/replace zloc (ntoken/token-node e'))))\n\n(defn- edit-multi-line\n  [zloc line-fn]\n  (let [n (-> (zraw/node zloc)\n              (update-in [:lines] (comp line-fn vec)))]\n    (zraw/replace zloc n)))\n\n(defn prefix\n  \"Return zipper with the current node in `zloc` prefixed with string `s`.\n   Operates on token node or a multi-line node, else exception is thrown.\n   When multi-line, first line is prefixed.\"\n  [zloc s]\n  (case (base/tag zloc)\n    :token      (edit-token zloc #(str s %))\n    :multi-line (->> (fn [lines]\n                       (if (empty? lines)\n                         [s]\n                         (update-in lines [0] #(str s %))))\n                     (edit-multi-line zloc))))\n\n(defn suffix\n  \"Return zipper with the current node in `zloc` suffixed with string `s`.\n   Operates on token node or a multi-line node, else exception is thrown.\n   When multi-line, last line is suffixed.\"\n  [zloc s]\n  (case (base/tag zloc)\n    :token      (edit-token zloc #(str % s))\n    :multi-line (->> (fn [lines]\n                       (if (empty? lines)\n                         [s]\n                         (concat (butlast lines) [(str (last lines) s)])))\n                     (edit-multi-line zloc))))\n"]}