{"version":3,"sources":["rewrite_clj/custom_zipper/core.cljc"],"mappings":"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","names":["rewrite-clj.custom-zipper.core/custom-zipper","root","rewrite-clj.custom-zipper.core/zipper","clojure.zip/zipper","rewrite-clj.node.protocols/inner?","cljs.core.comp","cljs.core/seq","rewrite-clj.node.protocols/children","rewrite-clj.node.protocols/replace-children","rewrite-clj.custom-zipper.core/custom-zipper?","value","G__151187","rewrite-clj.custom-zipper.switchable/custom-zipper?","clojure.zip/node","rewrite-clj.custom-zipper.core/node","zloc","G__151192","clojure.zip/branch?","rewrite-clj.custom-zipper.core/branch?","G__151195","map__151198","cljs.core/--destructure-map","cljs.core.get","clojure.zip/children","rewrite-clj.custom-zipper.core/children","node","cljs.core.ex_info","G__151213","G__151214","G__151215","clojure.zip/make-node","rewrite-clj.custom-zipper.core/make-node","_zloc","children","rewrite-clj.custom-zipper.core/position","rewrite-clj.custom-zipper.core/position-span","start-pos","rewrite-clj.node.protocols/+extent","rewrite-clj.node.protocols/extent","G__151219","clojure.zip/lefts","rewrite-clj.custom-zipper.core/lefts","cljs.core.map","cljs.core/first","G__151220","clojure.zip/down","rewrite-clj.custom-zipper.core/down","map__151228","vec__151229","cljs.core.nth","vec__151232","seq__151233","first__151234","cljs.core/next","row","col","c","cnext","cs","rewrite-clj.node.protocols/leader-length","G__151239","clojure.zip/up","rewrite-clj.custom-zipper.core/up","map__151242","parent","left","right","changed?","cljs.core.assoc","cljs.core.concat","cljs.core/cons","G__151253","clojure.zip/root","rewrite-clj.custom-zipper.core/root","p","G__151258","clojure.zip/right","rewrite-clj.custom-zipper.core/right","map__151260","vec__151261","seq__151262","first__151263","position","r","rnext","and__4221__auto__","cljs.core.conj","G__151267","clojure.zip/rightmost","rewrite-clj.custom-zipper.core/rightmost","temp__5751__auto__","next","G__151273","clojure.zip/left","rewrite-clj.custom-zipper.core/left","map__151277","vec__151280","lnode","lpos","cljs.core/peek","cljs.core/pop","G__151285","clojure.zip/leftmost","rewrite-clj.custom-zipper.core/leftmost","map__151287","vec__151291","cljs.core/rest","G__151295","G__151296","clojure.zip/insert-left","rewrite-clj.custom-zipper.core/insert-left","item","map__151297","cljs.core/not","G__151301","G__151302","clojure.zip/insert-right","rewrite-clj.custom-zipper.core/insert-right","map__151304","G__151309","G__151310","clojure.zip/replace","rewrite-clj.custom-zipper.core/replace","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","rewrite-clj.custom-zipper.core/edit","seq151315","G__151316","G__151317","self__4816__auto__","f","args","cljs.core.apply","clojure.zip/edit","G__151325","G__151326","clojure.zip/insert-child","rewrite-clj.custom-zipper.core/insert-child","G__151333","G__151334","clojure.zip/append-child","rewrite-clj.custom-zipper.core/append-child","G__151336","clojure.zip/next","rewrite-clj.custom-zipper.core/next","or__4223__auto__","G__151342","clojure.zip/prev","rewrite-clj.custom-zipper.core/prev","lloc","child","G__151347","clojure.zip/end?","rewrite-clj.custom-zipper.core/end?","G__151351","clojure.zip/remove","rewrite-clj.custom-zipper.core/remove","map__151354","vec__151362"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n;functional hierarchical zipper, with navigation, editing and enumeration\n;see Huet\n\n(ns ^:no-doc ^{:doc \"Functional hierarchical zipper, with navigation, editing,\n  and enumeration.  See Huet.\n  Modified to optionally support row col position tracking.\"\n       :author \"Rich Hickey\"}\n  rewrite-clj.custom-zipper.core\n  (:refer-clojure :exclude (replace remove next))\n  (:require [clojure.zip :as clj-zip]\n            [rewrite-clj.custom-zipper.switchable :refer [defn-switchable]]\n            [rewrite-clj.node.protocols :as node])\n  #?(:cljs (:require-macros [rewrite-clj.custom-zipper.switchable :refer [defn-switchable]])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Switch\n;;\n;; To not force users into using this custom zipper, the following flag\n;; is used to dispatch to `clojure.zip` when set to `false`.\n\n(defn custom-zipper\n  [root]\n  {::custom? true\n   :node     root\n   :position [1 1]\n   :parent   nil\n   :left     []\n   :right   '()})\n\n(defn zipper\n  [root]\n  (clj-zip/zipper\n    node/inner?\n    (comp seq node/children)\n    node/replace-children\n    root))\n\n(defn custom-zipper?\n  [value]\n  (::custom? value))\n\n;; ## Implementation\n\n(defn-switchable node\n  \"Returns the current node in `zloc`.\"\n  [zloc]\n  (:node zloc))\n\n(defn-switchable branch?\n  \"Returns true if the current node in `zloc` is a branch.\"\n  [zloc]\n  (node/inner? (:node zloc)))\n\n(defn-switchable children\n  \"Returns a seq of the children of current node in `zloc`, which must be a branch.\"\n  [{:keys [node] :as zloc}]\n  (if (branch? zloc)\n    (seq (node/children node))\n    (throw (ex-info \"called children on a leaf node\" {}))))\n\n(defn-switchable make-node\n  \"Returns a new branch node, given an existing `node` and new\n  `children`. \"\n  [_zloc node children]\n  (node/replace-children node children))\n\n(defn position\n  \"Returns the ones-based `[row col]` of the start of the current node in `zloc`.\n   \n  Throws if `zloc` was not created with [position tracking](/doc/01-user-guide.adoc#position-tracking).\"\n  [zloc]\n  (if (custom-zipper? zloc)\n    (:position zloc)\n    (throw\n     (ex-info\n      (str \"to use position functions, please construct your zipper with \"\n           \"':track-position?'  set to true.\") {}))))\n\n(defn position-span\n  \"Returns the ones-based `[[start-row start-col] [end-row end-col]]` of the current node in `zloc`.\n  `end-col` is exclusive.\n\n  Throws if `zloc` was not created with [position tracking](/doc/01-user-guide.adoc#position-tracking).\"\n  [zloc]\n  (let [start-pos (position zloc)]\n    [start-pos (node/+extent start-pos (node/extent (node zloc)))]))\n\n(defn-switchable lefts\n  \"Returns a seq of the left siblings of current node in `zloc`.\"\n  [zloc]\n  (map first (:left zloc)))\n\n(defn-switchable down\n  \"Returns zipper with the location at the leftmost child of current node in `zloc`, or\n  nil if no children.\"\n  [zloc]\n  (when (branch? zloc)\n    (let [{:keys [node] [row col] :position} zloc\n          [c & cnext :as cs] (children zloc)]\n      (when cs\n        {::custom? true\n         :node     c\n         :position [row (+ col (node/leader-length node))]\n         :parent   zloc\n         :left     []\n         :right    cnext}))))\n\n(defn-switchable up\n  \"Returns zipper with the location at the parent of current node in `zloc`, or nil if at\n  the top.\"\n  [zloc]\n  (let [{:keys [node parent left right changed?]} zloc]\n    (when parent\n      (if changed?\n        (assoc parent\n               :changed? true\n               :node (make-node zloc\n                                (:node parent)\n                                (concat (map first left) (cons node right))))\n        parent))))\n\n(defn-switchable root\n  \"Zips all the way up `zloc` and returns the root node, reflecting any changes.\"\n  [zloc]\n  (if (:end? zloc)\n    (node zloc)\n    (let [p (up zloc)]\n      (if p\n        (recur p)\n        (node zloc)))))\n\n(defn-switchable right\n  \"Returns zipper with location at the right sibling of the current node in `zloc`, or nil.\"\n  [zloc]\n  (let [{:keys [node parent position left] [r & rnext :as right] :right} zloc]\n    (when (and parent right)\n      (assoc zloc\n             :node r\n             :left (conj left [node position])\n             :right rnext\n             :position (node/+extent position (node/extent node))))))\n\n(defn-switchable rightmost\n  \"Returns zipper with location at the rightmost sibling of the current node in `zloc`, or self.\"\n  [zloc]\n  (if-let [next (right zloc)]\n    (recur next)\n    zloc))\n\n(defn-switchable left\n  \"Returns zipper with location at the left sibling of the current node in `zloc`, or nil.\"\n  [zloc]\n  (let [{:keys [node parent left right]} zloc]\n    (when (and parent (seq left))\n      (let [[lnode lpos] (peek left)]\n        (assoc zloc\n               :node lnode\n               :position lpos\n               :left (pop left)\n               :right (cons node right))))))\n\n(defn-switchable leftmost\n  \"Returns zipper with location at the leftmost sibling of the current node in `zloc`, or self.\"\n  [zloc]\n  (let [{:keys [node parent left right]} zloc]\n    (if (and parent (seq left))\n      (let [[lnode lpos] (first left)]\n        (assoc zloc\n               :node lnode\n               :position lpos\n               :left []\n               :right (concat (map first (rest left)) [node] right)))\n      zloc)))\n\n(defn-switchable insert-left\n  \"Returns zipper with `item` inserted as the left sibling of current node in `zloc`,\n without moving location.\"\n  [zloc item]\n  (let [{:keys [parent position left]} zloc]\n    (if-not parent\n      (throw (ex-info \"cannot insert left at top\" {}))\n      (assoc zloc\n             :changed? true\n             :left (conj left [item position])\n             :position (node/+extent position (node/extent item))))))\n\n(defn-switchable insert-right\n  \"Returns zipper with `item` inserted as the right sibling of the current node in `zloc`,\n  without moving location.\"\n  [zloc item]\n  (let [{:keys [parent right]} zloc]\n    (if-not parent\n      (throw (ex-info \"cannot insert right at top\" {}))\n      (assoc zloc\n             :changed? true\n             :right (cons item right)))))\n\n(defn-switchable replace\n  \"Returns zipper with `node` replacing current node in `zloc`, without moving location.\"\n  [zloc node]\n  (assoc zloc :changed? true :node node))\n\n(defn edit\n  \"Returns zipper with value of `(apply f current-node args)` replacing current node in `zloc`.\n   \n   The result of `f` should be a rewrite-clj node.\"\n  [zloc f & args]\n  (if (custom-zipper? zloc)\n    (replace zloc (apply f (node zloc) args))\n    (apply clj-zip/edit zloc f args)))\n\n(defn-switchable insert-child\n  \"Returns zipper with `item` inserted as the leftmost child of the current node in `zloc`,\n  without moving location.\"\n  [zloc item]\n  (replace zloc (make-node zloc (node zloc) (cons item (children zloc)))))\n\n(defn-switchable append-child\n  \"Returns zipper with `item` inserted as the rightmost child of the current node in `zloc`,\n  without moving.\"\n  [zloc item]\n  (replace zloc (make-node zloc (node zloc) (concat (children zloc) [item]))))\n\n(defn-switchable next\n  \"Returns zipper with location at the next depth-first location in the hierarchy in `zloc`.\n  When reaching the end, returns a distinguished zipper detectable via [[end?]]. If already\n  at the end, stays there.\"\n  [zloc]\n  (if (:end? zloc)\n    zloc\n    (or\n     (and (branch? zloc) (down zloc))\n     (right zloc)\n     (loop [p zloc]\n       (if (up p)\n         (or (right (up p)) (recur (up p)))\n         (assoc p :end? true))))))\n\n(defn-switchable prev\n  \"Returns zipper with location at the previous depth-first location in the hierarchy in `zloc`.\n  If already at the root, returns nil.\"\n  [zloc]\n  (if-let [lloc (left zloc)]\n    (loop [zloc lloc]\n      (if-let [child (and (branch? zloc) (down zloc))]\n        (recur (rightmost child))\n        zloc))\n    (up zloc)))\n\n(defn-switchable end?\n  \"Returns true if at end of depth-first walk in `zloc`.\"\n  [zloc]\n  (:end? zloc))\n\n(defn-switchable remove\n  \"Returns zipper with current node in `zloc` removed, with location at node that would have preceded\n  it in a depth-first walk.\"\n  [zloc]\n  (let [{:keys [parent left right]} zloc]\n    (if-not parent\n      (throw (ex-info \"cannot remove at top\" {}))\n      (if (seq left)\n        (loop [zloc (let [[lnode lpos] (peek left)]\n                     (assoc zloc\n                            :changed? true\n                            :position lpos\n                            :node lnode\n                            :left (pop left)))]\n          (if-let [child (and (branch? zloc) (down zloc))]\n            (recur (rightmost child))\n            zloc))\n        (assoc parent\n               :changed? true\n               :node (make-node zloc (:node parent) right))))))\n"]}