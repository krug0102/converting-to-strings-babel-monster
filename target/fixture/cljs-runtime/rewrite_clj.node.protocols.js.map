{"version":3,"sources":["rewrite_clj/node/protocols.cljc"],"mappings":"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","names":["rewrite-clj$node$protocols$Node$tag$dyn","x__4521__auto__","m__4522__auto__","rewrite-clj.node.protocols/tag","goog/typeOf","m__4519__auto__","cljs.core/missing-protocol","rewrite-clj$node$protocols$Node$node_type$dyn","rewrite-clj.node.protocols/node-type","rewrite-clj$node$protocols$Node$printable_only_QMARK_$dyn","rewrite-clj.node.protocols/printable-only?","rewrite-clj$node$protocols$Node$sexpr_STAR_$dyn","rewrite-clj.node.protocols/sexpr*","rewrite-clj$node$protocols$Node$length$dyn","rewrite-clj.node.protocols/length","rewrite-clj$node$protocols$Node$string$dyn","rewrite-clj.node.protocols/string","rewrite-clj.node.protocols/Node","node","opts","goog.object/set","_this","this","_opts","cljs.core/count","cljs.core.pr_str","rewrite-clj.node.protocols/sexpr-able?","cljs.core/not","var_args","G__151035","rewrite-clj.node.protocols/sexpr","js/Error","rewrite_clj.node.protocols.sexpr","G__151044","rewrite-clj.node.protocols/sexprs","nodes","rewrite_clj.node.protocols.sexprs","cljs.core.remove","p1__151040#","cljs.core.map","rewrite-clj.node.protocols/sum-lengths","cljs.core.reduce","cljs.core/+","rewrite-clj.node.protocols/concat-strings","cljs.core/str","rewrite-clj$node$protocols$InnerNode$inner_QMARK_$dyn","rewrite-clj.node.protocols/inner?","rewrite-clj$node$protocols$InnerNode$children$dyn","rewrite-clj.node.protocols/children","rewrite-clj$node$protocols$InnerNode$replace_children$dyn","rewrite-clj.node.protocols/replace-children","rewrite-clj$node$protocols$InnerNode$leader_length$dyn","rewrite-clj.node.protocols/leader-length","rewrite-clj.node.protocols/InnerNode","children","cljs.core.ex_info","_children","G__151079","rewrite-clj.node.protocols/child-sexprs","rewrite_clj.node.protocols.child_sexprs","rewrite-clj.node.protocols/node?","x","cljs.core.not_EQ_","rewrite-clj.node.protocols/default-auto-resolve","alias","cljs.core._EQ_","cljs.core.symbol","rewrite-clj$node$protocols$NodeCoerceable$coerce$dyn","rewrite-clj.node.protocols/coerce","rewrite-clj.node.protocols/NodeCoerceable","form","rewrite-clj$node$protocols$MapQualifiable$map_context_apply$dyn","rewrite-clj.node.protocols/map-context-apply","rewrite-clj$node$protocols$MapQualifiable$map_context_clear$dyn","rewrite-clj.node.protocols/map-context-clear","rewrite-clj.node.protocols/MapQualifiable","map-qualifier","rewrite-clj.node.protocols/node->string","n","n'","cljs.core/re-find","clojure.string/replace","rewrite_clj.interop.simple_format","cljs.core/name","rewrite-clj.node.protocols/make-printable-cljs!","obj","cljs.core/PROTOCOL_SENTINEL","o","writer","cljs.core/-write","rewrite-clj.node.protocols/make-printable!","rewrite-clj.node.protocols/without-whitespace","rewrite-clj.node.protocols/assert-sexpr-count","c","rewrite-clj.node.protocols/assert-single-sexpr","rewrite-clj.node.protocols/extent","map__151114","cljs.core/--destructure-map","cljs.core.get","row","col","next-row","next-col","cljs.core/meta","and__4221__auto__","s","rows","cljs.core.filter","cljs.core.partial","cljs.core/=","cols","cljs.core/reverse","cljs.core.take_while","cljs.core/complement","p__151119","p__151120","vec__151122","cljs.core.nth","vec__151125","rewrite-clj.node.protocols/+extent","row-extent","col-extent","G__151129","rewrite-clj.node.protocols/meta-elided","cljs.core.apply","cljs.core/dissoc","rewrite-clj.node.protocols/value","G__151136","cljs.core/first","cljs.core.juxt"],"sourcesContent":["(ns ^:no-doc ^{:added \"0.4.0\"} rewrite-clj.node.protocols\n  (:require [clojure.string :as string]\n            [rewrite-clj.interop :as interop]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Node\n\n(defprotocol Node\n  \"Protocol for EDN/Clojure/ClojureScript nodes.\"\n  (tag [node]\n    \"Returns keyword representing type of `node`.\")\n  (node-type [node]\n    \"Returns keyword representing the node type for `node`.\n     Currently internal and used to support testing.\")\n  (printable-only? [node]\n    \"Return true if `node` cannot be converted to an s-expression element.\")\n  (sexpr* [node opts]\n    \"Return `node` converted to form applying `opts`. Internal, use `sexpr` instead.\")\n  (length [node]\n    \"Return number of characters for the string version of `node`.\")\n  (string [node]\n    \"Return the string version of `node`.\"))\n\n(extend-protocol Node\n  #?(:clj Object :cljs default)\n  (tag [_this] :unknown)\n  (node-type [_this] :unknown)\n  (printable-only? [_this] false)\n  (sexpr* [this _opts] this)\n  (length [this] (count (string this)))\n  (string [this] (pr-str this)))\n\n(defn sexpr-able?\n  \"Return true if [[sexpr]] is supported for `node`.\"\n  [node]\n  (not (printable-only? node)))\n\n(defn sexpr\n  \"Return `node` converted to form.\n\n  Optional `opts` can specify:\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\n   \n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\"\n  ([node] (sexpr node {}))\n  ([node opts] (sexpr* node opts)))\n\n(defn sexprs\n  \"Return forms for `nodes`. Nodes that do not represent s-expression are skipped.\n\n  Optional `opts` can specify:\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\n   \n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\"\n  ([nodes]\n   (sexprs nodes {}))\n  ([nodes opts]\n   (->> nodes\n        (remove printable-only?)\n        (map #(sexpr % opts)))))\n\n(defn sum-lengths\n  \"Return total string length for `nodes`.\"\n  [nodes]\n  (reduce + (map length nodes)))\n\n(defn concat-strings\n  \"Return string version of `nodes`.\"\n  [nodes]\n  (reduce str (map string nodes)))\n\n;; ## Inner Node\n\n(defprotocol InnerNode\n  \"Protocol for non-leaf EDN/Clojure/ClojureScript nodes.\"\n  (inner? [node]\n    \"Returns true if `node` can have children.\")\n  (children [node]\n    \"Returns child nodes for `node`.\")\n  (replace-children [node children]\n    \"Returns `node` replacing current children with `children`.\")\n  (leader-length [node]\n    \"Returns number of characters before children for `node`.\"))\n\n(extend-protocol InnerNode\n  #?(:clj Object :cljs default)\n  (inner? [_this] false)\n  (children [_this]\n    (throw (ex-info \"unsupported operation\" {})))\n  (replace-children [_this _children]\n    (throw (ex-info \"unsupported operation\" {})))\n  (leader-length [_this]\n    (throw (ex-info \"unsupported operation\" {}))))\n\n(defn child-sexprs\n  \"Returns children for `node` converted to Clojure forms.\n\n  Optional `opts` can specify:\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n  ([node]\n   (child-sexprs node {}))\n  ([node opts]\n   (when (inner? node)\n     (sexprs (children node) opts))))\n\n(defn node?\n  \"Returns true if `x` is a rewrite-clj created node.\"\n  [x]\n  (and (some? x) (not= :unknown (tag x))))\n\n(defn default-auto-resolve [alias]\n  (if (= :current alias)\n    '?_current-ns_?\n    (symbol (str \"??_\" alias \"_??\"))))\n\n;; ## Coerceable\n\n(defprotocol NodeCoerceable\n  \"Protocol for values that can be coerced to nodes.\"\n  (coerce [form] \"Coerce `form` to node.\"))\n\n(defprotocol MapQualifiable\n  \"Protocol for nodes that can be namespaced map qualified\"\n  (map-context-apply [node map-qualifier]\n    \"Applies `map-qualifier` context to `node`\")\n  (map-context-clear [node]\n    \"Removes map-qualifier context for `node`\"))\n\n;; ## Print Helper\n\n(defn- node->string\n  #?(:clj ^String [node]\n     :cljs ^string [node])\n  (let [n (str (if (printable-only? node)\n                 (pr-str (string node))\n                 (string node)))\n        n' (if (re-find #\"\\n\" n)\n             (->> (string/replace n #\"\\r?\\n\" \"\\n  \")\n                  (interop/simple-format \"\\n  %s\\n\"))\n             (str \" \" n))]\n    (interop/simple-format \"<%s:%s>\" (name (tag node)) n')))\n\n#?(:clj\n   (defn write-node\n     [^java.io.Writer writer node]\n     (.write writer (node->string node))))\n\n#?(:clj\n   (defmacro make-printable-clj!\n     [class]\n     `(defmethod print-method ~class\n        [node# w#]\n        (write-node w# node#)))\n   :cljs\n   (defn ^:no-doc make-printable-cljs!\n     [obj]\n     (extend-protocol IPrintWithWriter\n       obj\n       (-pr-writer [o writer _opts]\n         (-write writer (node->string o))))))\n\n(defn make-printable! [obj]\n  #?(:clj (make-printable-clj! obj)\n     :cljs (make-printable-cljs! obj)))\n\n;; ## Helpers\n\n(defn without-whitespace\n  [nodes]\n  (remove printable-only? nodes))\n\n(defn assert-sexpr-count\n  [nodes c]\n  (assert\n   (= (count (without-whitespace nodes)) c)\n   (interop/simple-format \"can only contain %d non-whitespace form%s.\"\n                          c (if (= c 1) \"\" \"s\"))))\n\n(defn assert-single-sexpr\n  [nodes]\n  (assert-sexpr-count nodes 1))\n\n(defn extent\n  \"A node's extent is how far it moves the \\\"cursor\\\".\n\n  Rows are simple - if we have x newlines in the string representation, we\n  will always move the \\\"cursor\\\" x rows.\n\n  Columns are strange.  If we have *any* newlines at all in the textual\n  representation of a node, following nodes' column positions are not\n  affected by our startting column position at all.  So the second number\n  in the pair we return is interpreted as a relative column adjustment\n  when the first number in the pair (rows) is zero, and as an absolute\n  column position when rows is non-zero.\"\n  [node]\n  (let [{:keys [row col next-row next-col]} (meta node)]\n    (if (and row col next-row next-col)\n      [(- next-row row)\n       (if (= row next-row row)\n         (- next-col col)\n         next-col)]\n      (let [s (string node)\n            rows (->> s (filter (partial = \\newline)) count)\n            cols (if (zero? rows)\n                   (count s)\n                   (->> s\n                     reverse\n                     (take-while (complement (partial = \\newline)))\n                     count\n                     inc))]\n        [rows cols]))))\n\n(defn +extent\n  [[row col] [row-extent col-extent]]\n  [(+ row row-extent)\n   (cond-> col-extent (zero? row-extent) (+ col))])\n\n(defn meta-elided\n  \"Same as `clojure.core/meta` but with positional metadata removed.\n  Use when you want to omit reader generated metadata on forms.\"\n  [form]\n  (apply dissoc (meta form) [:line :column :end-line :end-column]))\n\n(defn ^{:deprecated \"0.4.0\"} value\n  \"DEPRECATED: Get first child as a pair of tag/sexpr (if inner node),\n   or just the node's own sexpr. (use explicit analysis of `children`\n   `child-sexprs` instead) \"\n  [node]\n  (if (inner? node)\n    (some-> (children node)\n            (first)\n            ((juxt tag sexpr)))\n    (sexpr node)))\n \n"]}