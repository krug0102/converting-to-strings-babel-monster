{"version":3,"sources":["rewrite_clj/zip/move.cljc"],"mappings":";AAOA;;;6BAAA,7BAAMA,kEAEHC;AAFH,AAGE,IAAAC,YAAQD;IAARC,gBAAA,EAAA,CAAAA,aAAA,OAAA,KAAA,qCAAAA,rCAAaC;AAAb,AAAA,GAAA,CAAAD,iBAAA;AAAA;;AAAA,gFAAAA,zEAAwBE;;;AAE1B;;;4BAAA,5BAAMC,gEAEHJ;AAFH,AAGE,IAAAK,YAAQL;IAARK,gBAAA,EAAA,CAAAA,aAAA,OAAA,KAAA,oCAAAA,pCAAaC;AAAb,AAAA,GAAA,CAAAD,iBAAA;AAAA;;AAAA,uDAAAA,hDAAuBE;;;AAEzB;;;4BAAA,5BAAMC,gEAEHR;AAFH,AAGE,IAAAS,YAAQT;IAARS,gBAAA,EAAA,CAAAA,aAAA,OAAA,KAAA,oCAAAA,pCAAaC;AAAb,AAAA,GAAA,CAAAD,iBAAA;AAAA;;AAAA,gFAAAA,zEAAuBN;;;AAEzB;;;0BAAA,1BAAMQ,4DAEHX;AAFH,AAGE,IAAAY,YAAQZ;IAARY,gBAAA,EAAA,CAAAA,aAAA,OAAA,KAAA,kCAAAA,lCAAaC;AAAb,AAAA,GAAA,CAAAD,iBAAA;AAAA;;AAAA,uDAAAA,hDAAqBL;;;AAEvB;;;;4BAAA,5BAAMO,gEAGHd;AAHH,AAIE,oBAAMA;AAAN,AACE,IAAAe,mBAAI,iBAAAC,YAAShB;IAATgB,gBAAA,EAAA,CAAAA,aAAA,OAAA,KAAA,oCAAAA,pCACSC;AADT,AAAA,GAAA,CAAAD,iBAAA;AAAA;;AAES,oHAAAA,7GAACb,yEAAmBc;;;AAFjC,AAAA,oBAAAF;AAAAA;;AAGI,8EAAA,2FAAA,lKAACG,kDAAUlB,KAAKmB;;;AAJtB;;;AAMF;;;kCAAA,lCAAMC,4EAEHpB;AAFH,AAGE,IAAAe,mBAAI,AAACM,cAAIrB;AAAT,AAAA,GAAAe;AAAAA;;AAAA,IAAAA,uBACI,AAACO,0CAAUtB;AADf,AAAA,oBAAAe;AAAAA;;AAEI,OAAA,yHAAQ,AAACQ,eAAKvB;;;;AAEpB;;;wCAAA,xCAAMwB,wFAEHxB;AAFH,AAGE,gIAAA,xHAAM,AAACG,yEAAmB,AAACD,qCAAWF;;AAExC;;;uCAAA,vCAAMyB,sFAEHzB;AAFH,AAGE,sGAAA,9FAAM,AAACO,gDAAwB,AAACD,oCAAUN;;AAE5C;;;4BAAA,5BAAM0B,gEAEH1B;AAFH,AAGE,IAAA2B,YAAS3B;IAAT2B,gBAAA,EAAA,CAAAA,aAAA,OAAA,KAAA,oCAAAA,pCACSC;AADT,AAAA,GAAA,CAAAD,iBAAA;AAAA;;AAES,oHAAAA,7GAACxB,yEAAmByB;;;AAE/B;;;gCAAA,hCAAMC,wEAEH7B;AAFH,AAGE,IAAA8B,YAAQ9B;IAAR8B,gBAAA,EAAA,CAAAA,aAAA,OAAA,KAAA,wCAAAA,xCACQC;AADR,AAAA,GAAA,CAAAD,iBAAA;AAAA;;AAAA,gFAAAA,zEAEQ3B;;;AAEV;;;iCAAA,jCAAM6B,0EAEHhC;AAFH,AAGE,IAAAiC,YAAQjC;IAARiC,gBAAA,EAAA,CAAAA,aAAA,OAAA,KAAA,yCAAAA,zCACQC;AADR,AAAA,GAAA,CAAAD,iBAAA;AAAA;;AAAA,uDAAAA,hDAEQ1B","names":["rewrite-clj.zip.move/right","zloc","G__151490","rewrite-clj.custom-zipper.core/right","rewrite_clj.zip.whitespace.skip_whitespace","rewrite-clj.zip.move/left","G__151497","rewrite-clj.custom-zipper.core/left","rewrite-clj.zip.whitespace/skip-whitespace-left","rewrite-clj.zip.move/down","G__151499","rewrite-clj.custom-zipper.core/down","rewrite-clj.zip.move/up","G__151501","rewrite-clj.custom-zipper.core/up","rewrite-clj.zip.move/next","or__4223__auto__","G__151504","rewrite-clj.custom-zipper.core/next","cljs.core.vary_meta","cljs.core/assoc","rewrite-clj.zip.move/end?","cljs.core/not","rewrite-clj.custom-zipper.core/end?","cljs.core/meta","rewrite-clj.zip.move/rightmost?","rewrite-clj.zip.move/leftmost?","rewrite-clj.zip.move/prev","G__151507","rewrite-clj.custom-zipper.core/prev","rewrite-clj.zip.move/leftmost","G__151508","rewrite-clj.custom-zipper.core/leftmost","rewrite-clj.zip.move/rightmost","G__151509","rewrite-clj.custom-zipper.core/rightmost"],"sourcesContent":["(ns ^:no-doc rewrite-clj.zip.move\n  (:refer-clojure :exclude [next])\n  (:require [rewrite-clj.custom-zipper.core :as zraw]\n            [rewrite-clj.zip.whitespace :as ws]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn right\n  \"Return zipper with location moved right to next non-whitespace/non-comment sibling of current node in `zloc`.\"\n  [zloc]\n  (some-> zloc zraw/right ws/skip-whitespace))\n\n(defn left\n  \"Return zipper with location moved left to next non-whitespace/non-comment sibling of current node in `zloc`.\"\n  [zloc]\n  (some-> zloc zraw/left ws/skip-whitespace-left))\n\n(defn down\n  \"Return zipper with location moved down to the first non-whitespace/non-comment child node of the current node in `zloc`, or nil if no applicable children.\"\n  [zloc]\n  (some-> zloc zraw/down ws/skip-whitespace))\n\n(defn up\n  \"Return zipper with location moved up to next non-whitespace/non-comment parent of current node in `zloc`, or `nil` if at the top.\"\n  [zloc]\n  (some-> zloc zraw/up ws/skip-whitespace-left))\n\n(defn next\n  \"Return zipper with location moved to the next depth-first non-whitespace/non-comment node in `zloc`.\n   End can be detected with [[end?]], if already at end, stays there.\"\n  [zloc]\n  (when zloc\n    (or (some->> zloc\n                 zraw/next\n                 (ws/skip-whitespace zraw/next))\n        (vary-meta zloc assoc ::end? true))))\n\n(defn end?\n  \"Return true if `zloc` is at end of depth-first traversal.\"\n  [zloc]\n  (or (not zloc)\n      (zraw/end? zloc)\n      (::end? (meta zloc))))\n\n(defn rightmost?\n  \"Return true if at rightmost non-whitespace/non-comment sibling node in `zloc`.\"\n  [zloc]\n  (nil? (ws/skip-whitespace (zraw/right zloc))))\n\n(defn leftmost?\n  \"Return true if at leftmost non-whitespace/non-comment sibling node in `zloc`.\"\n  [zloc]\n  (nil? (ws/skip-whitespace-left (zraw/left zloc))))\n\n(defn prev\n  \"Return zipper with location moved to the previous depth-first non-whitespace/non-comment node in `zloc`. If already at root, returns nil.\"\n  [zloc]\n  (some->> zloc\n           zraw/prev\n           (ws/skip-whitespace zraw/prev)))\n\n(defn leftmost\n  \"Return zipper with location moved to the leftmost non-whitespace/non-comment sibling of current node in `zloc`.\"\n  [zloc]\n  (some-> zloc\n          zraw/leftmost\n          ws/skip-whitespace))\n\n(defn rightmost\n  \"Return zipper with location moved to the rightmost non-whitespace/non-comment sibling of current node in `zloc`.\"\n  [zloc]\n  (some-> zloc\n          zraw/rightmost\n          ws/skip-whitespace-left))\n"]}