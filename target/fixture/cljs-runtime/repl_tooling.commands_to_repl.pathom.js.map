{"version":3,"sources":["repl_tooling/commands_to_repl/pathom.cljs"],"mappings":"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","names":["js/repl-tooling","js/repl-tooling.commands-to-repl","js/repl-tooling.commands-to-repl.pathom","js/repl-tooling.commands-to-repl.pathom.global-eql","repl-tooling.commands-to-repl.pathom/global-eql","cljs.core.atom","js/repl-tooling.commands-to-repl.pathom.global-resolvers","repl-tooling.commands-to-repl.pathom/global-resolvers","js/repl-tooling.commands-to-repl.pathom.orig-resolvers","repl-tooling.commands-to-repl.pathom/orig-resolvers","repl-tooling.commands-to-repl.pathom/reset-resolvers","cljs.core/deref","cljs.core/reset!","duck_repled.core.gen_eql","repl-tooling.commands-to-repl.pathom/add-resolver","config","fun","old","new","duck_repled.core.add_resolver","repl-tooling.commands-to-repl.pathom/compose-resolver","duck_repled.core.compose_resolver","this__4472__auto__","k__4473__auto__","this__4474__auto__","k51119","else__4475__auto__","G__51123","cljs.core/Keyword","evaluator","cljs.core.get","__extmap","this__4492__auto__","f__4493__auto__","init__4494__auto__","cljs.core.reduce","ret__4495__auto__","p__51124","vec__51125","k__4496__auto__","cljs.core.nth","v__4497__auto__","this__4487__auto__","writer__4488__auto__","opts__4489__auto__","pr-pair__4490__auto__","keyval__4491__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__51118","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4470__auto__","__meta","this__4467__auto__","__hash","this__4476__auto__","cljs.core/count","this__4468__auto__","h__4330__auto__","coll__4469__auto__","cljs.core/hash-unordered-coll","this51120","other51121","cljs.core._EQ_","this__4482__auto__","k__4483__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4479__auto__","G__51128","this__4480__auto__","k__4481__auto__","pred__51129","cljs.core/keyword-identical?","expr__51130","cljs.core.assoc","this__4485__auto__","cljs.core/seq","cljs.core/MapEntry","cljs.core/PROTOCOL_SENTINEL","this__4471__auto__","this__4477__auto__","entry__4478__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","repl-tooling.commands-to-repl.pathom/REPL","this__4516__auto__","cljs.core/List","writer__4517__auto__","cljs.core/-write","G__51122","extmap__4512__auto__","G__51132","cljs.core/record?","repl-tooling.commands-to-repl.pathom/->REPL","repl-tooling.commands-to-repl.pathom/map->REPL","_","command","options","repl_tooling.eval.eval","repl-tooling.commands-to-repl.pathom/adapt-repl","repl-tooling.commands-to-repl.pathom/resolvers-from-state","editor-state","promesa.protocols/-bind","___31820__auto__","p__51133","map__51134","cljs.core/--destructure-map","___31810__auto__","promesa.protocols/-promise","callbacks","editor-data","fexpr__51135","fexpr__51136","not-found","or__4223__auto__","cljs.core/vec","repl-tooling.commands-to-repl.pathom/doc-part","repl-tooling.commands-to-repl.pathom/spec-part","repl-tooling.commands-to-repl.pathom/markdown-check","repl-tooling.commands-to-repl.pathom/var-contents","p__51137","map__51138","repl-tooling.commands-to-repl.pathom/improved-doc-for-var","fqn","meta","spec","repl-tooling.commands-to-repl.pathom/eql-from-state","resolver","resolvers","com.wsscode.pathom3.connect.operation/?","query","fexpr__51139","seed","G__51141","G__51142","fexpr__51140"],"sourcesContent":["(ns repl-tooling.commands-to-repl.pathom\n  (:require [promesa.core :as p]\n            [duck-repled.core :as duck]\n            [duck-repled.repl-protocol :as duck-repl]\n            [repl-tooling.eval :as eval]\n            [com.wsscode.pathom3.connect.operation :as connect]))\n\n(defonce ^:private global-eql (atom nil))\n(defonce ^:private global-resolvers (atom nil))\n(defonce ^:private orig-resolvers (atom nil))\n\n(defn reset-resolvers []\n  (reset! global-resolvers @orig-resolvers)\n  (reset! global-eql (duck/gen-eql {:resolvers @orig-resolvers})))\n\n(defn add-resolver [config fun]\n  (let [old @global-resolvers\n        new (duck/add-resolver old config fun)]\n    (reset! global-resolvers new)\n    (reset! global-eql (duck/gen-eql {:resolvers new}))))\n\n(defn compose-resolver [config fun]\n  (let [old @global-resolvers\n        new (duck/compose-resolver old config fun)]\n    (reset! global-resolvers new)\n    (reset! global-eql (duck/gen-eql {:resolvers new}))))\n\n#_@global-resolvers\n\n(defrecord REPL [evaluator]\n  duck-repl/Evaluator\n  (-evaluate [_ command options]\n    (eval/eval evaluator command options)))\n\n(defn- adapt-repl [evaluator]\n  (if evaluator\n    (->REPL evaluator)\n    :com.wsscode.pathom3.connect.operation/unknown-value))\n\n(defn- resolvers-from-state [editor-state]\n  (p/let [{:keys [editor/callbacks]} @editor-state\n          editor-data ((:editor-data callbacks))\n          config ((:get-config callbacks))\n          not-found :com.wsscode.pathom3.connect.operation/unknown-value]\n    {:editor/data (or editor-data not-found)\n     :config/eval-as (:eval-mode config)\n     :config/project-paths (vec (:project-paths config))\n     ; FIXME: Get the right REPL\n     :repl/evaluators {:clj (adapt-repl (:clj/aux @editor-state))\n                       :cljs (adapt-repl (:cljs/repl @editor-state))}\n     :config/repl-kind (-> @editor-state :repl/info :kind)}))\n\n(def ^:private doc-part\n  '(when-let [text (:doc ?state)]\n     [:<>\n      [:div.space]\n      (if (:markdown? ?state)\n        [:div/md text]\n        [:div.pre text])]))\n\n(def ^:private spec-part\n  '(when-let [spec (:spec ?state)]\n     [:<>\n      [:div.space]\n      [:div.pre\n       (cond-> \"Spec:\\n\"\n               (:args spec) (str \"  args: \" (pr-str (:args spec)) \"\\n\")\n               (:ret spec) (str \"  ret: \" (pr-str (:ret spec)) \"\\n\")\n               (:fn spec) (str \"  fn: \" (pr-str (:fn spec))))]]))\n\n(def ^:private markdown-check\n  '(when (:doc ?state)\n     [:<>\n      [:div.space]\n      [:label [:input {:type :checkbox\n                       :checked (:markdown? ?state)\n                       :on-click (fn [e]\n                                   (swap! ?state-atom update :markdown? not))}]\n       \" Use markdown\"]]))\n\n(def ^:private var-contents\n  '(if (empty? (:arglists ?state))\n     [:div.rows\n      [:div.space]\n      (if (contains? ?state :var-value)\n        [:div/clj (:var-value ?state)]\n        [:div [:a {:href \"#\"\n                   :on-click (?get-contents (->> ?state :fqn eval))}\n               \"Get contents of var\"]])]\n     [:div.rows\n      [:div.space]\n      (if (contains? ?state :var-value)\n        [:div/md (str \"```\\n\" (:var-value ?state) \"\\n```\")]\n        [:div [:a {:href \"#\"\n                   :on-click (fn [evt]\n                               (.preventDefault evt)\n                               (.stopPropagation evt)\n                               (p/let [info (eql [{:editor/contents\n                                                   [{:text/current-var [:definition/source]}]}])]\n                                 (swap! ?state-atom\n                                        assoc\n                                        :var-value\n                                        (-> info\n                                            :editor/contents\n                                            :text/current-var\n                                            :definition/source\n                                            :text/contents))))}\n               \"Get source\"]])]))\n\n(defn- improved-doc-for-var [{:var/keys [fqn meta spec]}]\n  {:render/doc\n   {:html [:div.rows\n           '[:div.title (-> ?state :fqn str)]\n           '(when-let [args (seq (:arglists ?state))]\n              (map (fn [a] [:li {:key a} (pr-str a)]) args))\n\n           '(cond-> [:div.cols]\n                    (:macro ?state) (conj [:i \"macro\"])\n                    (:private ?state) (conj [:i \"private\"]))\n           doc-part\n           spec-part\n           markdown-check\n           var-contents]\n    :state (-> meta\n               (dissoc :ns)\n               (assoc :markdown? true :fqn fqn :spec spec))\n    :fns {:get-contents '(fn [_ state value]\n                           (assoc state :var-value value))}}})\n\n(defn eql-from-state [editor-state]\n  (let [resolver #(resolvers-from-state editor-state)\n        resolvers (duck/add-resolver {:inputs []\n                                      :outputs [:editor/data :config/eval-as\n                                                :config/project-paths :config/repl-kind]}\n                                     resolver)\n        resolvers (duck/add-resolver resolvers\n                                     {:inputs [:var/fqn :var/meta (connect/? :var/spec)]\n                                      :outputs [:render/doc]}\n                                     improved-doc-for-var)]\n    (reset! orig-resolvers resolvers)\n    (reset! global-resolvers resolvers)\n    (reset! global-eql (duck/gen-eql {:resolvers resolvers}))\n    (fn eql\n      ([query] (@global-eql query))\n      ([seed query] (@global-eql (or seed {}) query)))))\n"]}