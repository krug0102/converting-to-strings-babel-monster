{"version":3,"sources":["repl_tooling/ui/pinkie.cljs"],"mappings":";AAQA,AAAKA,0CAAiB,gDAAA,hDAACC;AAEvB,uCAAA,vCAAMC;AAAN,AACE,mDAAA,WAAAC,vDAACC;AAAD,AAAM,4DAAA,mCAAA,qIAAA,7NAACC,wIAAY,gBAAAF,hBAACG,oIAAY,AAACC,wGAAO,eAAAJ,fAACK;GAAU,cAAA,AAAAC,dAACC,8BAAKV;;AAE3D,sCAAA,tCAAMW,oFAAcC,EAAEC;AAAtB,AACE,OAACC,mDAAMd,wCAAiBe,gBAAMH,EAAEC;;AAalC,sCAAA,tCAAMG,oFACHC;AADH,AAEE,OAAYC,eAAQ,AAACC,qBAAQF;;AAE/B,0CAAA,1CAAMG,4FAAYC;AAAlB,AACE,IACMC,YAAU,AAACC,mCAAaF;IAExBG,YAAU,AAAOF;IACjBE,gBAAU,uBAAA,rBAAI,cAAA,bAAMA,yBAAe,AAACC,gDAAQD;AAJlD,AAQE,OAACE,0BAAUC,mCAAWH;;AAE1B,2CAAA,3CAAMI,8FAAaP;AAAnB,AACE,IAAAQ,oBAAK,gBAAAC,fAAUT;AAAf,AAAA,GAAAQ;AAAoB,OAACE,oBAAUV;;AAA/BQ;;;AAEF,+CAAA,/CAAMG,sGAAiBC;AAAvB,AACE,+DAAA,xDAACP,0BAAU,AAACQ,eAAKD;;AAEnB,8CAAA,9CAAOE,oGAAgBF;AAAvB,AACE,qDAAA,5CACC,AAACG,wBAAQH,sBACT,GAAK,AAACI,2BAAWJ,sBACjB,2CAAAH,1CAAU,AAACxB,gBAAM2B;;AAGpB,+CAAA,/CAAMK,sGAAiBL;AAAvB,AACE,GAAI,AAACE,4CAAeF;AAClB,IAAMZ,MAAI,AAACf,gBAAM2B;AAAjB,AACE,IAAAJ,oBAAK,GAAK,AAACG,6CAAgBC;AAA3B,AAAA,GAAAJ;AAAA,IAAAA,wBACK,GAAK,AAACT,wCAAWC;AADtB,AAAA,GAAAQ;AAEK,OAACD,yCAAYP;;AAFlBQ;;;AAAAA;;;AAFJ;;;AAOF;;;;qCAAA,rCAAMU,kFAGHlB;AAHH,AAAA,0FAAA,8EAAA,2CAAA,uDAAA,2CAAA,4EAAA,sBAKG,CAAA,4DAAqBA;;AAExB;;;;;;sDAAA,tDAAMmB,oHAKHP;AALH,AAME,IACMZ,MAAI,AAACf,gBAAM2B;IACXQ,kBAAgB,iBAAAC,YAAA,AAAAjC,gBAAMT;AAAN,AAAA,8EAAA0C,2BAAAA,jGAACrB,oCAAAA,+CAAAA;;AAFvB,AAGE,GAAI,oBAAA,nBAAMoB;AACR,AAAI,YAAA,ZAAME,mCAAkC,AAACC,eAAKvB;;AAC9C,OAACkB,mCAAYlB;;AACjB,oDAAA,7CAACwB,8EAAQ,4DAAA,5DAACxC,8CAAM4B,kBAAgBQ;;;AAEtC;;;;oCAAA,pCAAOK,gFAGJb;AAHH,AAIE,OAACc,qBACA,WAAKC;AAAL,AACE,oBAAI,AAACV,6CAAgBU;AACnB,OAACR,oDAA6BQ;;AAC9BA;;GACJf;;AAKH,sCAAA,tCAAMgB,oFAAcC;AAApB,AACE,IAAMC,YAAU,4CAAA,WAAAC,vDAAChD;AAAD,AAAM,0DAAAgD,kBAAA,rEAACC;GAAkB,qDAAA,rDAACA,mDAAUH;AAApD,AACE,oDAAA,7CAACL,gFACK,iBAAAS,qBAAA,6DAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,gBAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAA/C,cAAA6C;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,gBAAAE;AAAA,AAAA,GAAA,AAAAC,6BAAAH;AAAA,IAAAI,kBAq1EyC,AAAA6B,sBAAAjC;IAr1EzCK,qBAAA,AAAAC,gBAAAF;IAAAG,YAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,YAAA;;AAAA,AAAA,GAAA,CAAAA,YAAAJ;AAAA,IAAAK,cAAA,AAAAC,eAAAP,gBAAAK;QAAA,AAAAG,4CAAAF,YAAA,IAAA,hEAAOrD;QAAP,AAAAuD,4CAAAF,YAAA,IAAA,hEAASpD;AAAT,AAAA,AAAA,AAAAuD,uBAAAN,UAAA,mFACG,AAACrC,gDAAQ,AAACmD,oBAAShE,IAAI,AAACgE,oBAAS/D;;AADpC,gBAAA,CAAAmD,YAAA;;;;AAAA;;;;;AAAA,OAAAK,qBAAA,AAAAC,gBAAAR,WAAA,AAAAS,mDAAA,AAAAC,qBAAAjB;;AAAA,OAAAc,qBAAA,AAAAC,gBAAAR,WAAA;;;AAAA,IAAAW,cAAA,AAAAnE,gBAAAiD;QAAA,AAAAY,4CAAAM,YAAA,IAAA,hEAAO7D;QAAP,AAAAuD,4CAAAM,YAAA,IAAA,hEAAS5D;AAAT,AAAA,OAAA6D,eAAA,0LAAA,AAAAH,mDAAA,AAAAI,eAAApB,zKACG,AAAC9B,gDAAQ,AAACmD,oBAAShE,IAAI,AAACgE,oBAAS/D;;;AADpC;;;;GAAA,KAAA;;AAAA,AAAA,OAAAyC,mBAAYH;;;AAGtB,yCAAA,zCAAM0B,0FAAW7B;AAAjB,AAEE,GAAI,kCAAA,4EAAA,5GAAK,AAACZ,wBAAQY,UACT,6CAAA,7CAAC8B,iDAAI,AAACjB,gBAAMb,WACZ,gEAAA,hEAAC8B,6CAAE,AAACxE,gBAAM0C,gEACV,OAAS,AAAC+B,iBAAO/B;AAH1B;;AAAA;;;AAOF,uCAAA,vCAAMgC,sFAAehC;AAArB,AACE,yGAAA,zGAACiC,2IAA0CjC;;AAC3C,oDAAA,7CAACH,8EAAQ,gDAAA,hDAACxC,8CAAM2C,MAAI,AAACC,oCAAa,AAACzC,eAAKwC;;AAE1C;;;;yDAAA,zDAAMkC,0HAGHjD;AAHH,AAIE,OAACc,qBACA,WAAKC;AAAL,AACE,GAAI,AAAC6B,uCAAU7B;AACb,OAACgC,qCAAchC;;AACfA;;GACJf;;AAEH,AASA,0CAAA,1CAAMkD,4FAAYlD;AAAlB,AACE,+DAAA,xDAACP,0BAAU,AAACQ,eAAKD;;AAEnB,uCAAA,vCAAMmD,sFAAepC;AAArB,AACE,IAAMqC,WAAS,AAAA,+FAAc,AAACnD,eAAKc;AAAnC,AACE,yGAAA,qCAAA,9IAACiC,qIAAoCI,iBAAiBrC;;AADxD,2BAAA,sGAAA,2CAAA,+CAAA,7GAEOqC,SAASrC;;AAElB;;;;2CAAA,3CAAMsC,8FAGHrD;AAHH,AAIE,OAACsD,sBACA,WAAKvC;AAAL,AACE,GAAI,AAACmC,wCAAWnC;AACd,OAACoC,qCAAcpC;;AACfA;;GACJf","names":["repl-tooling.ui.pinkie/custom-renderers","reagent.core.atom","repl-tooling.ui.pinkie/renderer-list","p1__154022#","cljs.core.map","cljs.core.assoc","cljs.core/first","cljs.core.pr_str","cljs.core/last","cljs.core/deref","cljs.core/seq","repl-tooling.ui.pinkie/register-tag","k","v","cljs.core.swap_BANG_","cljs.core/assoc","repl-tooling.ui.pinkie/clj->json","ds","js/JSON","cljs.core/clj->js","repl-tooling.ui.pinkie/html5-tag?","tag","tag-typed","reagent.impl.template/cached-parse","tag-clean","cljs.core.keyword","cljs.core/contains?","pinkgorilla.ui.htmltags/html5-tags","repl-tooling.ui.pinkie/pinkie-tag?","and__4221__auto__","cljs.core/Keyword","cljs.core/namespace","repl-tooling.ui.pinkie/pinkie-exclude?","hiccup-vector","cljs.core/meta","repl-tooling.ui.pinkie/hiccup-vector?","cljs.core/vector?","cljs.core/map-entry?","repl-tooling.ui.pinkie/should-replace?","repl-tooling.ui.pinkie/unknown-tag","repl-tooling.ui.pinkie/replace-tag-in-hiccup-vector","render-function","G__154026","js/console","cljs.core/name","cljs.core.into","repl-tooling.ui.pinkie/tag-inject","clojure.walk/prewalk","x","repl-tooling.ui.pinkie/to-map-style","s","style-vec","p1__154027#","clojure.string.split","iter__4622__auto__","s__154029","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4620__auto__","size__4621__auto__","cljs.core/count","b__154031","cljs.core/chunk-buffer","i__154030","vec__154032","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__154028","cljs.core/chunk-rest","vec__154035","cljs.core/cons","cljs.core/rest","clojure.string/trim","repl-tooling.ui.pinkie/is-style?","cljs.core._EQ_","cljs.core/second","repl-tooling.ui.pinkie/replace-style","cljs.core.println","repl-tooling.ui.pinkie/convert-style-as-strings-to-map","repl-tooling.ui.pinkie/render-as?","repl-tooling.ui.pinkie/wrap-renderer","renderer","repl-tooling.ui.pinkie/convert-render-as","clojure.walk/postwalk","cljs.core/chunk-first"],"sourcesContent":["(ns repl-tooling.ui.pinkie\n  (:require\n   [clojure.string :as str]\n   [reagent.core :as r :refer [atom]]\n   [reagent.impl.template :refer [HiccupTag cached-parse]]\n   [clojure.walk :refer [prewalk postwalk]]\n   [pinkgorilla.ui.htmltags :refer [html5-tags]]))\n\n(def custom-renderers (atom {}))\n\n(defn renderer-list []\n  (map #(assoc {} :k (first %) :r (pr-str (last %))) (seq @custom-renderers)))\n\n(defn register-tag [k v]\n  (swap! custom-renderers assoc k v))\n  ; it would be ideal to let reagent deal with this, but the below line did not work.\n  ;(gobj/set reagent.impl.template/tag-name-cache (name k) v)\n\n; mfikes approach would be great, but does not work\n; https://github.com/reagent-project/reagent/issues/362\n\n#_(defn register-tag2 [k v]\n    (gobj/set reagent.impl.template/tag-name-cache k v))\n\n#_(defn register-tag3 [kw c]\n    (register-tag2 (name kw) (r/as-element c)))\n\n(defn clj->json\n  [ds]\n  (.stringify js/JSON (clj->js ds)))\n\n(defn html5-tag? [tag]\n  (let [; reagent also has :div#main.big which we have to transform to :div\n        tag-typed (cached-parse tag) ; #js {:name \"<>\", :id nil, :class nil, :custom false}\n        ;_ (.log js/console \"tag typed:\" (pr-str tag-typed))\n        tag-clean (.-tag tag-typed)\n        tag-clean (if (nil? tag-clean) nil (keyword tag-clean))]\n       ; tag-clean (keyword (:name (js->clj tag-typed :keywordize-keys true)))\n       ; _ (.log js/console \"tag clean:\" tag-clean)\n\n    (contains? html5-tags tag-clean)))\n\n(defn pinkie-tag? [tag]\n  (and (keyword? tag) (namespace tag)))\n\n(defn pinkie-exclude? [hiccup-vector]\n  (contains? (meta hiccup-vector) :r))\n\n(defn- hiccup-vector? [hiccup-vector]\n  (and\n   (vector? hiccup-vector)\n   (not (map-entry? hiccup-vector)); ignore maps\n   (keyword? (first hiccup-vector)))); reagent syntax requires first element  to be a keyword\n\n\n(defn should-replace? [hiccup-vector]\n  (if (hiccup-vector? hiccup-vector)\n    (let [tag (first hiccup-vector)]\n      (and (not (pinkie-exclude? hiccup-vector))\n           (not (html5-tag? tag))\n           (pinkie-tag? tag)))\n    false))\n\n(defn unknown-tag\n  \"ui component for unknown tags - so that we don't need to catch react errors\n   Currently not yet used (see resolve function)\"\n  [tag]\n  [:span.unknown-tag {:style {:background-color \"red\"}}\n   (str \"Unknown Tag: \" tag)])\n\n(defn replace-tag-in-hiccup-vector\n  \"input: hiccup vector\n   if keyword (first position in vector) has been registered via register-tag,\n   then it gets replaced with the react function,\n   otherwise keyword remains\"\n  [hiccup-vector]\n  (let [;_ (.log js/console \"pinkie replacing: \" (pr-str hiccup-vector))\n        tag (first hiccup-vector)\n        render-function (tag @custom-renderers)]\n    (if (nil? render-function)\n      (do (.log js/console \"pinkie unknown tag: \" (name tag))\n          (unknown-tag tag))\n      (into [] (assoc hiccup-vector 0 render-function)))))\n\n(defn  tag-inject\n  \"resolve function-as symbol to function references in the reagent-hickup-map.\n   Leaves regular hiccup data unchanged.\"\n  [hiccup-vector]\n  (prewalk\n   (fn [x]\n     (if (should-replace? x)\n       (replace-tag-in-hiccup-vector x)\n       x))\n   hiccup-vector))\n\n;; Hiccup accepts Style as string, but Reagent does not.\n;; Example: [:rect {:width \"100%\", :height \"100%\", :style \"stroke: none; fill: #FFFFFF;\"}]\n\n(defn to-map-style [s]\n  (let [style-vec (map #(str/split % #\":\") (str/split s #\";\"))]\n    (into {}\n          (for [[k v] style-vec]\n            [(keyword (str/trim k)) (str/trim v)]))))\n\n(defn is-style? [x]\n  ;(println \"is-style? \" x)\n  (if (and (vector? x)\n           (= 2 (count x))\n           (= (first x) :style)\n           (string? (second x)))\n    true\n    false))\n\n(defn replace-style [x]\n  (println \"pinkie replacing string style: \" x)\n  (into [] (assoc x 1 (to-map-style (last x)))))\n\n(defn convert-style-as-strings-to-map\n  \"resolve function-as symbol to function references in the reagent-hickup-map.\n   Leaves regular hiccup data unchanged.\"\n  [hiccup-vector]\n  (prewalk\n   (fn [x]\n     (if (is-style? x)\n       (replace-style x)\n       x))\n   hiccup-vector))\n\n(comment\n  (to-map-style \"background-color: blue; font-size: 14px\"))\n;=> {:background-color \"blue\" :font-size \"14px\"}\n\n\n\n;; RENDER-AS\n\n\n(defn render-as? [hiccup-vector]\n  (contains? (meta hiccup-vector) :p/render-as))\n\n(defn wrap-renderer [x]\n  (let [renderer (:p/render-as (meta x))]\n    (println \"pinkie wrapping renderer \" renderer \" to: \" x)\n    ^:R [renderer x]))\n\n(defn convert-render-as\n  \"resolve function-as symbol to function references in the reagent-hickup-map.\n   Leaves regular hiccup data unchanged.\"\n  [hiccup-vector]\n  (postwalk\n   (fn [x]\n     (if (render-as? x)\n       (wrap-renderer x)\n       x))\n   hiccup-vector))\n"]}