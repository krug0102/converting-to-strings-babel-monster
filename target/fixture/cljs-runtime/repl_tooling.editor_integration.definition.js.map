{"version":3,"sources":["repl_tooling/editor_integration/definition.cljs"],"mappings":";AAGA,6DAAA,7DAAMA,kIAAiBC,MAAMC;AAA7B,AACE,IAAAC,cAAA,AAAAC,gBAA8BH;IAA9BE,kBAAA,AAAAE,4BAAAF;mBAAA,AAAAG,4CAAAH,gBAAA,3EAAcK;IAAdD,cACoB,AAAA,sGAAA,AAAAH,gBAAmBH;IADvCM,kBAAA,AAAAF,4BAAAE;UAAA,AAAAD,4CAAAC,gBAAA,lEACcE;AADd,yGAEM,iBAAAC,YAAKR,7EAIL,AAACU,zDAcD,OAACa;IAlBDd,YAAA,mFAAA,gFAAA,gFAAA,qEAAA;AAAA,AAAA,8EAAAD,UAAAC,2BAAAD,UAAAC,rHAACF,oCAAAA,yDAAAA;KAIO,WAAAI;AAAA,AAAA,IAAAC,cAAAD;IAAAC,kBAAA,AAAAT,4BAAAS;eAAA,AAAAR,4CAAAQ,gBAAA,vEAAwBC;UAAxB,AAAAT,4CAAAQ,gBAAA,lEAAiCE;eAAjC,AAAAV,4CAAAQ,gBAAA,vEAAqCG;UAArC,AAAAX,4CAAAQ,gBAAA,lEAA8CI;AAA9C,AACE,oBAAID;AACF,IAAAE,YAAA;IAAAC,YACc,iBAAAC,YAAA,2CAAA,yEAAA,TAAoBJ,6DAAgBC;IAApCG,gBAAA,gQAAAA,9OAEQN,UACA,8CAAAM,UAAA,xDAACC,sHAAgB,AAAA,mGAAgBP;AAHzC,AAAA,oBAKQC;AACA,qDAAAK,cAAA,5DAACC,qHAAcN;;AANvBK;;;AADd,AAAA,gGAAAF,UAAAC,oCAAAD,UAAAC,hJAACZ,6CAAAA,kEAAAA;;AASD,IAAAe,YAAA;IAAAC,YAAA,2CAAA,qDAAA,uDAAA,sDAAA;AAAA,AAAA,gGAAAD,UAAAC,oCAAAD,UAAAC,hJAAChB,6CAAAA,kEAAAA;;IAGb;AAAA,AAAU,IAAAkB,YAAA;IAAAC,YAAA,2CAAA,qDAAA,uDAAA,sDAAA;AAAA,AAAA,gGAAAD,UAAAC,oCAAAD,UAAAC,hJAACnB,6CAAAA,kEAAAA;;;AAGnB,8DAAA,9DAAMoB,oIAAkB3B;AAAxB,AACE,wEAAA,jEAACD,2DAAgBC","names":["repl-tooling.editor-integration.definition/goto-definition","state","resolver-opts","map__153805","cljs.core/deref","cljs.core/--destructure-map","cljs.core.get","map__153806","run-callback","eql","G__153808","G__153809","promesa.core.then","p__153810","map__153811","contents","col","filename","row","G__153813","G__153814","G__153815","cljs.core.assoc","G__153816","G__153817","promesa.core.catch$","G__153818","G__153819","repl-tooling.editor-integration.definition/goto-current-var"],"sourcesContent":["(ns repl-tooling.editor-integration.definition\n  (:require [promesa.core :as p]))\n\n(defn goto-definition [state resolver-opts]\n  (let [{:keys [run-callback]} @state\n        {:keys [eql]} (:editor/features @state)]\n    (-> (eql resolver-opts [:definition/filename\n                            :definition/contents\n                            :definition/row\n                            :definition/col])\n        (p/then (fn [{:definition/keys [contents col filename row]}]\n                  (if filename\n                    (run-callback :open-editor\n                                  (cond-> {:file-name filename, :line row}\n\n                                          contents\n                                          (assoc :contents (:text/contents contents))\n\n                                          col\n                                          (assoc :column col)))\n\n                    (run-callback :notify\n                                  {:type :error\n                                   :title \"Could not find definition for var\"}))))\n        (p/catch #(run-callback :notify\n                                {:type :error :title \"Could not find definition for var\"})))))\n\n(defn goto-current-var [state]\n  (goto-definition state nil))\n"]}