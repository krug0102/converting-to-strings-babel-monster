{"version":3,"sources":["rewrite_clj/node/quote.cljc"],"mappings":"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","names":["this__4472__auto__","k__4473__auto__","this__4474__auto__","k151615","else__4475__auto__","G__151624","cljs.core/Keyword","tag","prefix","sym","children","cljs.core.get","__extmap","this__4492__auto__","f__4493__auto__","init__4494__auto__","cljs.core.reduce","ret__4495__auto__","p__151628","vec__151629","k__4496__auto__","cljs.core.nth","v__4497__auto__","this__4487__auto__","writer__4488__auto__","opts__4489__auto__","pr-pair__4490__auto__","keyval__4491__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__151614","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4470__auto__","__meta","this__4467__auto__","__hash","this__4476__auto__","cljs.core/count","this__4468__auto__","h__4330__auto__","coll__4469__auto__","cljs.core/hash-unordered-coll","this151616","other151617","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4482__auto__","k__4483__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4479__auto__","G__151658","this__4480__auto__","k__4481__auto__","pred__151659","cljs.core/keyword-identical?","expr__151660","cljs.core.assoc","this__4485__auto__","cljs.core/seq","cljs.core/MapEntry","this__4471__auto__","this__4477__auto__","entry__4478__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.quote/QuoteNode","this__4516__auto__","cljs.core/List","writer__4517__auto__","cljs.core/-write","G__151620","extmap__4512__auto__","G__151666","cljs.core/record?","rewrite-clj.node.quote/->QuoteNode","rewrite-clj.node.quote/map->QuoteNode","_node","opts","cljs.core/first","rewrite_clj.node.protocols.sexprs","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/concat-strings","node","children'","rewrite-clj.node.protocols/assert-single-sexpr","rewrite-clj.node.protocols/make-printable!","rewrite-clj.node.quote/->node","t","rewrite-clj.node.quote/quote-node","cljs.core/sequential?","rewrite-clj.node.quote/syntax-quote-node","rewrite-clj.node.quote/unquote-node","rewrite-clj.node.quote/unquote-splicing-node"],"sourcesContent":["(ns ^:no-doc rewrite-clj.node.quote\n  (:require [rewrite-clj.node.protocols :as node]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Node\n\n(defrecord QuoteNode [tag prefix sym children]\n  node/Node\n  (tag [_node] tag)\n  (node-type [_node] :quote)\n  (printable-only? [_node] false)\n  (sexpr* [_node opts]\n    (list sym (first (node/sexprs children opts))))\n  (length [_node]\n    (+ (count prefix) (node/sum-lengths children)))\n  (string [_node]\n    (str prefix (node/concat-strings children)))\n\n  node/InnerNode\n  (inner? [_node] true)\n  (children [_node] children)\n  (replace-children [node children']\n    (node/assert-single-sexpr children')\n    (assoc node :children children'))\n  (leader-length [_node]\n    (count prefix))\n\n  Object\n  (toString [node]\n    (node/string node)))\n\n(node/make-printable! QuoteNode)\n\n;; ## Constructors\n\n(defn- ->node\n  [t prefix sym children]\n  (node/assert-single-sexpr children)\n  (->QuoteNode t prefix sym children))\n\n(defn quote-node\n  \"Create node representing a single quoted form where `children`\n   is either a sequence of nodes or a single node.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n\n   (-> (n/quote-node (n/token-node 'sym))\n       (n/string))\n   ;; => \\\"'sym\\\"\n\n   ;; specifying a sequence allows for whitespace between the \n   ;; quote and the quoted\n   (-> (n/quote-node [(n/spaces 10)\n                      (n/token-node 'sym1) ])\n       n/string)\n   ;; => \\\"'          sym1\\\"\n   ```\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :quote \"'\" 'quote\n      children)\n    (recur [children])))\n\n(defn syntax-quote-node\n  \"Create node representing a single syntax-quoted form where `children`\n   is either a sequence of nodes or a single node.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n\n   (-> (n/syntax-quote-node (n/token-node 'map))\n       n/string)\n   ;; => \\\"`map\\\"\n\n   ;; specifying a sequence allows for whitespace between the \n   ;; syntax quote and the syntax quoted\n   (-> (n/syntax-quote-node [(n/spaces 3)\n                             (n/token-node 'map)])\n       n/string)\n   ;; => \\\"`   map\\\"\n   ```\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :syntax-quote \"`\" 'quote\n      children)\n    (recur [children])))\n\n(defn unquote-node\n  \"Create node representing a single unquoted form where `children`\n   is either a sequence of nodes or a single node.\n   \n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n\n   (-> (n/unquote-node (n/token-node 'my-var))\n       n/string)\n   ;; => \\\"~my-var\\\"\n\n   ;; specifying a sequence allows for whitespace between the \n   ;; unquote and the uquoted\n   (-> (n/unquote-node [(n/spaces 4)\n                        (n/token-node 'my-var)])\n       n/string)\n   ;; => \\\"~    my-var\\\"\n   ```\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :unquote \"~\" 'unquote\n      children)\n    (recur [children])))\n\n(defn unquote-splicing-node\n  \"Create node representing a single unquote-spliced form where `children`\n   is either a sequence of nodes or a single node.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n]) \n\n   (-> (n/unquote-splicing-node (n/token-node 'my-var))\n       n/string)\n   ;; => \\\"~@my-var\\\"\n\n   ;; specifying a sequence allows for whitespace between the \n   ;; splicing unquote and the splicing unquoted\n   (-> (n/unquote-splicing-node [(n/spaces 2)\n                                 (n/token-node 'my-var)])\n       n/string)\n   ;; => \\\"~@  my-var\\\"   \n   ```\"\n  [children]\n  (if (sequential? children)\n    (->node\n      :unquote-splicing \"~@\" 'unquote-splicing\n      children)\n    (recur [children])))\n"]}