{"version":3,"sources":["repl_tooling/editor_integration/interpreter.cljs"],"mappings":"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","names":["repl-tooling.editor-integration.interpreter/read-config-file","config-file","p","promesa.core/deferred","p1__138628#","p2__138627#","js/shadow.js.shim.module$fs.readFile","promesa.core.resolve_BANG_","repl-tooling.editor-integration.interpreter/name-for","k","cljs.core/name","clojure.string/capitalize","clojure.string/replace","repl-tooling.editor-integration.interpreter/promised-let","_&form","_&env","bindings","body","binds","cljs.core.partition_all","cljs.core/reverse","G__138638","vec__138639","seq__138640","cljs.core/seq","first__138641","cljs.core/first","cljs.core/next","vec__138642","cljs.core.nth","vec__138653","seq__138654","first__138655","vec__138656","cljs.core/cons","var","elem","rest","cljs.core/List","repl-tooling.editor-integration.interpreter/find-repl","state","promesa.protocols/-bind","___31820__auto__","___31810__auto__","promesa.protocols/-promise","data","repl-tooling.editor-integration.commands/run-callback!","repl_tooling.editor_integration.commands.run_feature_BANG_","repl-tooling.editor-integration.interpreter/interactive-eval","params","repl-tooling.editor-helpers/*out-on-aux*","cljs.core.update","cljs.core/assoc","promesa.core.finally$","_","repl-tooling.editor-integration.interpreter/editor-ns","repl","p1__138665#","p1__138664#","cljs.core/Delay","or__4223__auto__","cljs.core.partial","cmd","args","cljs.core/deref","curr-repl","cljs.core._EQ_","cljs.core.assoc","cljs.core.apply","repl-tooling.editor-integration.commands/run-feature!","repl-tooling.commands-to-repl.pathom/eql-from-state","res","cljs.core/str","repl-tooling.commands-to-repl.pathom/add-resolver","repl-tooling.commands-to-repl.pathom/compose-resolver","p1__138666#","p1__138667#","p1__138668#","p2__138669#","p1__138670#","p2__138671#","p1__138672#","p2__138673#","p1__138674#","p2__138675#","repl-tooling.editor-integration.interpreter/render-ns","editor-state","js/shadow.js.shim.module$path.dirname","js/shadow.js.shim.module$path.join","js/require","js/document","e","seq__138676","chunk__138677","count__138678","i__138679","temp__5753__auto__","cljs.core/chunked-seq?","c__4649__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","a","attr","value","and__4221__auto__","cljs.core/Keyword","cljs.core/namespace","cljs.core/fn?","repl-tooling.editor-integration.renderer.pinkie/register-reagent","repl_tooling.editor_integration.commands.run_callback_BANG_","repl-tooling.editor-integration.renderer.pinkie/register-tag","repl-tooling.editor-integration.interpreter/prepare-nses","sci.impl.namespaces/namespaces","clojure.set/rename-keys","reagent.core/atom","reagent.dom/render","reagent.core/adapt-react-class","reagent.core/as-element","reagent.core/create-class","reagent.core/create-element","reagent.core/current-component","reagent.core/cursor","reagent.core/is-client","reagent.core/reactify-component","reagent.core/wrap","repl-tooling.editor-helpers/Error","p1__138701#","p1__138702#","p2__138703#","p1__138704#","p2__138705#","repl-tooling.editor-integration.interpreter/promised-bindings","js/Promise","repl-tooling.editor-integration.interpreter/debug-bindings","run-callback","G__138707","G__138708","clojure.string.join","G__138709","G__138710","cljs.core.map","cljs.core/pr-str","p1__138706#","G__138711","G__138712","js/console.log","G__138713","G__138714","repl-tooling.editor-integration.interpreter/readers-for","repl-tooling.editor-helpers/map->Error","repl-tooling.editor-helpers/map->Browseable","repl-tooling.editor-helpers/map->Patchable","repl-tooling.editor-helpers/map->IncompleteObj","p__138733","map__138734","cljs.core/--destructure-map","cljs.core.get","repl-tooling.editor-integration.interpreter/evaluate-code","code","sci-state","cljs.core.atom","cljs.core.merge","sci.core.eval_string"],"sourcesContent":["(ns repl-tooling.editor-integration.interpreter\n  (:require [sci.core :as sci]\n            [clojure.set :as set]\n            [promesa.core :as p]\n            [paprika.collection :as coll]\n            [clojure.string :as str]\n            [repl-tooling.editor-integration.commands :as cmds]\n            [repl-tooling.editor-helpers :as helpers]\n            [sci.impl.namespaces :as sci-ns]\n            [reagent.core :as r]\n            [reagent.dom :as rdom]\n            [repl-tooling.commands-to-repl.pathom :as pathom]\n            [repl-tooling.editor-integration.renderer.pinkie :as r-pinkie]\n            [\"path\" :refer [dirname join]]\n            [\"fs\" :refer [watch readFile existsSync]]\n            [\"ansi_up\" :default Ansi]))\n\n(defn- read-config-file [config-file]\n  (let [p (p/deferred)]\n    (readFile config-file #(p/resolve! p (str %2)))\n    p))\n\n(defn- name-for [k]\n  (-> k name str/capitalize (str/replace #\"-\" \" \")))\n\n(def ^:private promised-let\n  ^:sci/macro\n  (fn [_&form _&env bindings & body]\n    (let [binds (->> bindings (partition-all 2 2) reverse)]\n      (loop [body (cons 'do body)\n             [[var elem] & rest] binds]\n        (if (nil? var)\n          body\n          (recur\n            (list 'p/then (list 'promise elem) (list 'fn [var] body))\n            rest))))))\n\n(defn- find-repl [state]\n  (p/let [data (cmds/run-callback! state :editor-data)]\n    (cmds/run-feature! state :repl-for (:filename data) true)))\n\n(defn- interactive-eval [state params]\n  (set! helpers/*out-on-aux* true)\n  (-> state\n      (cmds/run-feature! :evaluate-and-render\n                         (update params :pass assoc\n                                 :interactive true\n                                 :aux true))\n      (p/finally (fn [ & _] (set! helpers/*out-on-aux* false)))))\n\n(defn- editor-ns [repl state]\n  (let [repl (delay (or repl (find-repl state)))]\n    {'run-callback (partial cmds/run-callback! state)\n     'run-feature (fn [cmd & args]\n                    (p/let [curr-repl @repl]\n                      (if (= cmd :go-to-var-definition)\n                        (cmds/run-feature! state\n                                           :go-to-var-definition\n                                           (assoc (first args)\n                                                  :repl curr-repl))\n                        (apply cmds/run-feature! state cmd args))))\n     'eql (pathom/eql-from-state state)\n     'get-top-block #(cmds/run-feature! state :get-code :top-block)\n     'get-block #(cmds/run-feature! state :get-code :block)\n     'get-var #(cmds/run-feature! state :get-code :var)\n     'get-selection #(cmds/run-feature! state :get-code :selection)\n     'get-namespace #(p/let [res (cmds/run-feature! state :get-code :ns)]\n                       (update res :text str))\n     'eval-and-render #(cmds/run-feature! state :evaluate-and-render %)\n     'eval-interactive #(interactive-eval state %)\n     'eval (partial cmds/run-feature! state :eval)\n     'add-resolver pathom/add-resolver\n     'compose-resolver pathom/compose-resolver}))\n\n(defn- render-ns [editor-state]\n  {'js-require #(-> @editor-state\n                    :editor/callbacks\n                    :config-file-path\n                    dirname\n                    (join %)\n                    js/require)\n   'create-tag #(.createElement js/document %)\n   'set-text #(aset %1 \"innerText\" %2)\n   'set-html #(aset %1 \"innerHTML\" %2)\n   'add-class (fn [^js e & args]\n                (doseq [a args]\n                  (.. e -classList (add a))))\n   'set-attr (fn [^js e attr value]\n              (.setAttribute e attr value))\n   'register-reagent #(if (and (keyword? %1) (namespace %1) (fn? %2))\n                        (r-pinkie/register-reagent %1 %2)\n                        (cmds/run-callback!\n                         editor-state\n                         :notify\n                         {:type :error\n                          :title \"Invalid params\"\n                          :text (str \"First argument needs to be a namespaced keyword, \"\n                                     \"and second argument needs to be a reagent fn\")}))\n   'register-tag #(if (and (keyword? %1) (namespace %1) (fn? %2))\n                    (r-pinkie/register-tag %1 %2)\n                    (cmds/run-callback!\n                     editor-state\n                     :notify\n                     {:type :error\n                      :title \"Invalid params\"\n                      :text (str \"First argument needs to be a namespaced keyword, \"\n                                 \"and second argument needs to be a function that \"\n                                 \"returns a HTML tag\")}))})\n\n(defn- prepare-nses [repl editor-state]\n  (-> sci-ns/namespaces\n      (set/rename-keys '{clojure.string str\n                         clojure.set set\n                         clojure.walk walk\n                         clojure.template template\n                         clojure.repl repl\n                         clojure.edn edn})\n      (assoc 'r {'atom r/atom\n                 'render rdom/render\n                 'adapt-react-class r/adapt-react-class\n                 'as-element r/as-element\n                 'create-class r/create-class\n                 'create-element r/create-element\n                 'current-component r/current-component\n                 'cursor r/cursor\n                 'is-client r/is-client\n                 'reactify-component r/reactify-component\n                 'wrap r/wrap})\n      (assoc 'render (render-ns editor-state))\n      (assoc 'editor (editor-ns repl editor-state))\n      (assoc 'repl-tooling.editor-helpers {'Error helpers/Error})))\n\n(def ^:private promised-bindings {'promise #(.resolve js/Promise %)\n                                  'p/then #(.then ^js %1 %2)\n                                  'p/catch #(.catch ^js %1 %2)\n                                  'p/let promised-let})\n\n(defn debug-bindings [editor-state]\n  (let [run-callback (:run-callback @editor-state)]\n    {'println (fn [& args]\n                (run-callback :on-stdout (str (str/join \" \" args) \"\\n\"))\n                nil)\n     'print (fn [& args]\n              (run-callback :on-stdout (str/join \" \" args))\n              nil)\n     'prn (fn [& args]\n            (->> args\n                 (map pr-str)\n                 (str/join \" \")\n                 (#(str % \"\\n\"))\n                 (run-callback :on-stdout))\n            nil)\n     'log (fn [& args] (apply js/console.log args))\n     'pr (fn [& args]\n           (->> args (map pr-str)\n                (str/join \" \")\n                (run-callback :on-stdout))\n           nil)}))\n\n(defn- readers-for [editor-state]\n  {'repl-tooling.editor-helpers.Error helpers/map->Error\n   'repl-tooling.editor-helpers.Browseable helpers/map->Browseable\n   'repl-tooling.editor-helpers.Patchable helpers/map->Patchable\n   'repl-tooling.editor-helpers.IncompleteObj helpers/map->IncompleteObj})\n\n(defn evaluate-code [{:keys [code bindings sci-state editor-state repl]\n                      :or {sci-state (atom {})}}]\n  (let [bindings (cond\n                   editor-state (-> promised-bindings\n                                    (assoc 'eql (-> @editor-state :editor/feature :eql))\n                                    (merge (debug-bindings editor-state)\n                                           bindings))\n                   :else promised-bindings)]\n    (sci/eval-string code {:env sci-state\n                           :classes {:allow :all}\n                           :preset {:termination-safe true}\n                           :readers (readers-for editor-state)\n                           :namespaces (prepare-nses repl editor-state)\n                           :bindings bindings})))\n"]}