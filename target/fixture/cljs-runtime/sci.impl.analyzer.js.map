{"version":3,"sources":["sci/impl/analyzer.cljc"],"mappings":"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","names":["sci.impl.analyzer/special-syms","sci.impl.analyzer/macros","p__154284","map__154285","cljs.core/--destructure-map","allow","cljs.core.get","deny","sci.impl.analyzer/check-permission!","check-sym","sym","G__154286","G__154287","sci.impl.utils/kw-identical?","cljs.core/meta","sci.impl.utils/strip-core-ns","cljs.core/contains?","sci.impl.utils.throw_error_with_location","p__154288","map__154289","env","sci.impl.analyzer/lookup*","ctx","call?","cljs.core/deref","sym-ns","G__154290","cljs.core/namespace","cljs.core.symbol","sym-name","cljs.core/name","cnn","sci.impl.vars/current-ns-name","the-current-ns","G__154291","or__4223__auto__","cljs.core.get_in","cljs.core/find","and__4221__auto__","cljs.core._EQ_","G__154292","temp__5753__auto__","v","G__154293","clazz","sci.impl.interop/resolve-class","cljs.core/with-meta","G__154294","c","sci.impl.analyzer/tag","_ctx","expr","m","p__154295","map__154296","bindings","sci.impl.analyzer/lookup","vec__154297","cljs.core.nth","k","kv","vec__154300","t","sci.impl.utils/mark-resolve-sym","cljs.core.vary_meta","cljs.core/assoc","vec__154303","_","temp__5751__auto__","cljs.core/not","var_args","G__154307","sci.impl.analyzer/resolve-symbol","js/Error","sci.impl.analyzer.resolve_symbol","res","cljs.core/second","n","clojure.string/starts-with?","clojure.string/ends-with?","cljs.core.subs","sci.impl.analyzer/analyze-children","children","p1__154308#","cljs.core.mapv","sci.impl.analyzer/analyze","sci.impl.analyzer/maybe-destructured","params","body","cljs.core/every?","cljs.core/symbol?","new-params","lets","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/Symbol","cljs.core/first","cljs.core/next","cljs.core.conj","gparam","cljs.core.gensym","p__154325","p__154326","map__154327","fn-expr","vec__154328","seq__154329","first__154330","sci.impl.analyzer/expand-fn-args+body","fn-name","binding-vector","body-exprs","macro?","cljs.core/vector?","map__154333","cljs.core.into","fixed-args","p1__154322#","cljs.core.take_while","cljs.core.not_EQ_","fixed-arity","cljs.core/count","var-arg-name","p1__154323#","cljs.core.drop_while","next-body","conds","e","cljs.core/map?","pre","post","cljs.core/vec","cljs.core.map","cljs.core.update","cljs.core/merge","cljs.core/zipmap","cljs.core.repeat","p__154339","vec__154340","seq__154341","first__154342","sci.impl.analyzer/expand-fn","_fn","name?","cljs.core.assoc","cljs.core/cons","bodies","cljs.core/seq?","cljs.core/assoc-in","analyzed-bodies","cljs.core.reduce","p__154348","map__154349","max-fixed","min-varargs","acc","arglist","new-min-varargs","x__4306__auto__","y__4307__auto__","cljs.core/conj","arities","arglists","sci.impl.analyzer/expand-let*","destructured-let-bindings","exprs","vec__154359","new-let-bindings","p__154363","p__154364","vec__154367","vec__154370","binding-name","binding-value","cljs.core.partition","sci.impl.utils/mark-eval-call","p__154375","vec__154376","seq__154377","first__154378","sci.impl.analyzer/expand-let","_let","let-bindings","sci.impl.destructure/destructure","p__154381","vec__154382","seq__154383","first__154384","sci.impl.analyzer/expand->","x","forms","expanded","form","threaded","p__154387","vec__154388","seq__154389","first__154390","sci.impl.analyzer/expand-as->","_as","name","vec__154391","seq__154392","first__154393","cljs.core.interleave","cljs.core/butlast","cljs.core/empty?","cljs.core/last","sci.impl.analyzer/expand-def","vec__154397","_def","var-name","?docstring","?init","G__154400","G__154401","sci.impl.analyzer/expand-declare","cljs.core/simple-symbol?","arg-count","docstring","expected-arg-count","init","sci.impl.vars/current-ns","p__154405","vec__154406","seq__154407","first__154408","sci.impl.analyzer/expand-defn","op","G__154409","G__154410","vec__154411","pre-body","cljs.core/split-with","cljs.core.comp","cljs.core/sequential?","ds","meta-map","G__154414","G__154415","cljs.core.merge","fn-body","f","G__154421","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","sci.impl.analyzer/expand-comment","seq154426","G__154427","self__4816__auto__","_body","sci.impl.analyzer/expand-loop","vec__154437","bv","arg-names","cljs.core.take_nth","init-vals","cljs.core/rest","syms","cljs.core.repeatedly","bv1","cljs.core/vector","bv2","cljs.core/cat","cljs.core/nnext","expansion","cljs.core.list_STAR_","sci.impl.analyzer/expand-lazy-seq","G__154451","G__154452","p__154454","vec__154455","seq__154456","first__154457","sci.impl.analyzer/expand-if","_if","G__154458","sci.impl.analyzer/expand-case","G__154465","G__154466","clauses","match-clauses","result-clauses","default","cljs.core/odd?","G__154468","G__154469","cases","assoc-new","case-map","ret-map","vec__154479","seq__154480","first__154481","cljs.core/list?","ret","p__154489","vec__154490","seq__154491","first__154492","sci.impl.analyzer/expand-try","_try","vec__154498","catches","finally","catch-exprs","finally-expr","G__154513","G__154514","vec__154516","seq__154517","first__154518","ex","binding","G__154523","G__154524","G__154532","G__154533","p__154541","vec__154542","seq__154543","first__154544","_declare","names","_expr","cljs.core.swap_BANG_","cljs.core.update_in","current-ns","G__154551","sci.impl.vars/->SciVar","sci.impl.vars/current-file","p__154556","vec__154557","seq__154558","first__154559","sci.impl.analyzer/expand-dot","_dot","instance-expr","method-expr","args","vec__154563","seq__154564","first__154565","sci.impl.utils/vary-meta*","sci.impl.records.resolve_record_class","sci.impl.analyzer/expand-dot**","p__154568","vec__154569","seq__154570","first__154571","sci.impl.analyzer/expand-dot*","method-name","obj","p__154575","vec__154576","seq__154577","first__154578","sci.impl.analyzer/expand-new","_new","class-sym","map__154579","constructor","_opts","sci.impl.interop/resolve-class-opts","record","p__154586","vec__154587","seq__154588","first__154589","sci.impl.analyzer/expand-constructor","constructor-sym","constructor-name","p__154596","vec__154597","seq__154598","first__154599","sci.impl.analyzer/analyze-ns-form","_ns","ns-name","cljs.core.pr_str","vec__154603","vec__154606","fexpr","attr-map","sci.impl.utils/set-namespace!","vec__154619","seq__154620","first__154621","G__154622","cljs.core/Keyword","p__154623","vec__154624","sci.impl.analyzer/analyze-var","p__154627","vec__154628","sci.impl.analyzer/analyze-set!","sci.impl.types/getVal","sci.impl.analyzer/macro?","sci.impl.analyzer/analyze-call","special-sym","sci.impl.vars/var?","sci.impl.vars/isMacro","f-meta","eval?","G__154631","sci.impl.analyzer.expand_comment","sci.impl.for-macro/expand-for","G__154632","G__154634","sci.impl.doseq-macro/expand-doseq","e154637","needs-ctx?","G__154638","G__154639","cljs.core.apply","sci.impl.utils/rethrow-with-location-of-node","sci.impl.utils/constant?","sci.impl.types/->EvalVar","sci.impl.utils/merge-meta","cljs.core/record?","cljs.core/keys","cljs.core/vals","sci.impl.utils/mark-eval","cljs.core/set?","cljs.core/empty","cljs.core/select-keys"],"sourcesContent":["(ns sci.impl.analyzer\n  {:no-doc true}\n  (:refer-clojure :exclude [destructure macroexpand macroexpand-all macroexpand-1])\n  (:require\n   [clojure.string :as str]\n   [sci.impl.destructure :refer [destructure]]\n   [sci.impl.doseq-macro :refer [expand-doseq]]\n   [sci.impl.for-macro :refer [expand-for]]\n   [sci.impl.interop :as interop]\n   [sci.impl.records :as records]\n   [sci.impl.types :as types]\n   [sci.impl.utils :as utils :refer\n    [mark-resolve-sym mark-eval mark-eval-call constant?\n     rethrow-with-location-of-node throw-error-with-location\n     merge-meta kw-identical? strip-core-ns set-namespace!]]\n   [sci.impl.vars :as vars])\n  #?(:clj (:import [sci.impl Reflector])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; derived from (keys (. clojure.lang.Compiler specials))\n;; (& monitor-exit case* try reify* finally loop* do letfn* if clojure.core/import* new deftype* let* fn* recur set! . var quote catch throw monitor-enter def)\n(def special-syms '#{try finally do if new recur quote catch throw def . var set!})\n\n;; Built-in macros.\n\n(def macros '#{do if and or -> as-> quote quote* let fn fn* def defn\n               comment loop lazy-seq for doseq case try defmacro\n               declare expand-dot* expand-constructor new . import in-ns ns var\n               set! resolve macroexpand-1 macroexpand})\n\n(defn check-permission! [{:keys [:allow :deny]} check-sym sym]\n  (when-not (kw-identical? :allow (-> sym meta :line))\n    (let [check-sym (strip-core-ns check-sym)]\n      (when-not (if allow (contains? allow check-sym)\n                    true)\n        (throw-error-with-location (str sym \" is not allowed!\") sym))\n      (when (if deny (contains? deny check-sym)\n                false)\n        (throw-error-with-location (str sym \" is not allowed!\") sym)))))\n\n(defn lookup* [{:keys [:env] :as ctx} sym call?]\n  (let [sym-ns (some-> (namespace sym) symbol)\n        sym-name (symbol (name sym))\n        env @env\n        cnn (vars/current-ns-name)\n        the-current-ns (-> env :namespaces cnn)\n        ;; resolve alias\n        sym-ns (when sym-ns (or (get-in the-current-ns [:aliases sym-ns])\n                                sym-ns))]\n    (or (find the-current-ns sym) ;; env can contain foo/bar symbols from bindings\n        (cond\n          (and sym-ns (or (= sym-ns 'clojure.core) (= sym-ns 'cljs.core)))\n          (or (some-> env :namespaces (get 'clojure.core) (find sym-name))\n              (when-let [v (when call? (get macros sym-name))]\n                [sym v]))\n          sym-ns\n          (or (some-> env :namespaces sym-ns (find sym-name))\n              (when-let [clazz (interop/resolve-class ctx sym-ns)]\n                [sym (with-meta\n                       [clazz sym-name]\n                       #?(:clj\n                          (if call?\n                            {::static-access true}\n                            {:sci.impl/op :static-access})\n                          :cljs {:sci.impl/op :static-access}))]))\n          :else\n          ;; no sym-ns, this could be a symbol from clojure.core\n          (when-not (contains?\n                     (get-in the-current-ns [:refer 'clojure.core :exclude]) sym-name)\n            (or\n             (some-> env :namespaces (get 'clojure.core) (find sym-name))\n             (when (when call? (get macros sym))\n               [sym sym])\n             (when-let [c (interop/resolve-class ctx sym)]\n               [sym c])))))))\n\n(defn tag [_ctx expr]\n  (when-let [m (meta expr)]\n    (:tag m)))\n\n(defn lookup [{:keys [:bindings] :as ctx} sym call?]\n  (let [[k v :as kv]\n        (or\n         ;; bindings are not checked for permissions\n         (when-let [[k v]\n                    (find bindings sym)]\n           ;; never inline a binding at macro time!\n           (let [t (tag ctx v)\n                 v (mark-resolve-sym k)\n                 ;; pass along tag of expression!\n                 v (if t (vary-meta v\n                                    assoc :tag t)\n                       v)]\n             [k v]))\n         (when-let\n             [[k _ :as kv]\n              (or\n               (lookup* ctx sym call?)\n               #_(when (= 'recur sym)\n                   [sym sym]))]\n           (check-permission! ctx k sym)\n           kv))]\n    ;; (prn 'lookup sym '-> res)\n    (if-let [m (and (not (:sci.impl/prevent-deref ctx))\n                    (meta k))]\n      (if (:sci.impl/deref! m)\n        ;; the evaluation of this expression has been delayed by\n        ;; the caller and now is the time to deref it\n        [k (with-meta [v]\n             {:sci.impl/op :deref!})]\n        kv)\n      kv)))\n\n(defn resolve-symbol\n  ([ctx sym] (resolve-symbol ctx sym false))\n  ([ctx sym call?]\n   (let [sym sym ;; (strip-core-ns sym)\n         res (second\n              (or\n               (lookup ctx sym call?)\n               ;; TODO: check if symbol is in macros and then emit an error: cannot take\n               ;; the value of a macro\n               (let [n (name sym)]\n                 (cond\n                   (and call?\n                        (str/starts-with? n \".\")\n                        (> (count n) 1))\n                   [sym 'expand-dot*] ;; method invocation\n                   (and call?\n                        (str/ends-with? n \".\")\n                        (> (count n) 1))\n                   [sym 'expand-constructor]\n                   (str/starts-with? n \"'\") ;; TODO: deprecated?\n                   (let [v (symbol (subs n 1))]\n                     [v v])\n                   :else\n                   (throw-error-with-location\n                    (str \"Could not resolve symbol: \" (str sym))\n                    sym)))))]\n     ;; (prn 'resolve sym '-> res (meta res))\n     res)))\n\n(declare analyze analyze-call)\n\n(defn analyze-children [ctx children]\n  (mapv #(analyze ctx %) children))\n\n(defn maybe-destructured\n  [params body]\n  (if (every? symbol? params)\n    {:params params\n     :body body}\n    (loop [params params\n           new-params (with-meta [] (meta params))\n           lets []]\n      (if params\n        (if (symbol? (first params))\n          (recur (next params) (conj new-params (first params)) lets)\n          (let [gparam (gensym \"p__\")]\n            (recur (next params) (conj new-params gparam)\n                   (-> lets (conj (first params)) (conj gparam)))))\n        {:params new-params\n         :body [`(let ~lets\n                   ~@body)]}))))\n\n(defn expand-fn-args+body [{:keys [:fn-expr] :as ctx} fn-name [binding-vector & body-exprs] macro?]\n  (when-not binding-vector\n    (throw-error-with-location \"Parameter declaration missing.\" fn-expr))\n  (when-not (vector? binding-vector)\n    (throw-error-with-location \"Parameter declaration should be a vector\" fn-expr))\n  (let [binding-vector (if macro? (into ['&form '&env] binding-vector)\n                           binding-vector)\n        fixed-args (take-while #(not= '& %) binding-vector)\n        fixed-arity (count fixed-args)\n        var-arg-name (second (drop-while #(not= '& %) binding-vector))\n        next-body (next body-exprs)\n        conds (when next-body\n                (let [e (first body-exprs)]\n                  (when (map? e) e)))\n        body-exprs (if conds next-body body-exprs)\n        conds (or conds (meta binding-vector))\n        pre (:pre conds)\n        post (:post conds)\n        body-exprs (if post\n                     `((let [~'% ~(if (< 1 (count body-exprs))\n                                    `(do ~@body-exprs)\n                                    (first body-exprs))]\n                         ~@(map (fn* [c] `(assert ~c)) post)\n                         ~'%))\n                     body-exprs)\n        body-exprs (if pre\n                     (concat (map (fn* [c] `(assert ~c)) pre)\n                             body-exprs)\n                     body-exprs)\n        {:keys [:params :body]} (maybe-destructured binding-vector body-exprs)\n        ctx (update ctx :bindings merge (zipmap params\n                                                (repeat nil)))\n        body (analyze-children ctx body)]\n    #:sci.impl{:body body\n               :params params\n               :fixed-arity fixed-arity\n               :var-arg-name var-arg-name\n               :fn-name fn-name}))\n\n(defn expand-fn [ctx [_fn name? & body :as fn-expr] macro?]\n  (let [ctx (assoc ctx :fn-expr fn-expr)\n        fn-name (if (symbol? name?)\n                  name?\n                  nil)\n        body (if fn-name\n               body\n               (cons name? body))\n        ;; fn-name (or fn-name (gensym* \"fn\"))\n        bodies (if (seq? (first body))\n                 body\n                 [body])\n        ctx (if fn-name (assoc-in ctx [:bindings fn-name] nil)\n                ctx)\n        analyzed-bodies (reduce\n                         (fn [{:keys [:max-fixed :min-varargs] :as acc} body]\n                           (let [arglist (first body)\n                                 body (expand-fn-args+body ctx fn-name body macro?)\n                                 body (assoc body :sci.impl/arglist arglist)\n                                 var-arg-name (:sci.impl/var-arg-name body)\n                                 fixed-arity (:sci.impl/fixed-arity body)\n                                 new-min-varargs (when var-arg-name fixed-arity)]\n                             (when (and var-arg-name min-varargs)\n                               (throw-error-with-location \"Can't have more than 1 variadic overload\" fn-expr))\n                             (when (and (not var-arg-name) min-varargs (> fixed-arity min-varargs))\n                               (throw-error-with-location\n                                \"Can't have fixed arity function with more params than variadic function\" fn-expr))\n                             (-> acc\n                                 (assoc :min-varargs new-min-varargs\n                                        :max-fixed (max (:sci.impl/fixed-arity body)\n                                                        max-fixed))\n                                 (update :bodies conj body)\n                                 (update :arglists conj arglist))))\n                         {:bodies []\n                          :arglists []\n                          :min-var-args nil\n                          :max-fixed -1} bodies)\n        arities (:bodies analyzed-bodies)\n        arglists (:arglists analyzed-bodies)]\n    (with-meta #:sci.impl{:fn-bodies arities\n                          :fn-name fn-name\n                          :arglists arglists\n                          :fn true}\n      {:sci.impl/op :fn})))\n\n(defn expand-let*\n  [ctx destructured-let-bindings exprs]\n  (let [[ctx new-let-bindings]\n        (reduce\n         (fn [[ctx new-let-bindings] [binding-name binding-value]]\n           (let [v (analyze ctx binding-value)]\n             [(update ctx :bindings assoc binding-name v)\n              (conj new-let-bindings binding-name v)]))\n         [ctx []]\n         (partition 2 destructured-let-bindings))]\n    (mark-eval-call `(~'let ~new-let-bindings ~@(analyze-children ctx exprs)))))\n\n(defn expand-let\n  \"The let macro from clojure.core\"\n  [ctx [_let let-bindings  & exprs]]\n  (let [let-bindings (destructure let-bindings)]\n    (expand-let* ctx let-bindings exprs)))\n\n(defn expand->\n  \"The -> macro from clojure.core.\"\n  [ctx [x & forms]]\n  (let [expanded\n        (loop [x x, forms forms]\n          (if forms\n            (let [form (first forms)\n                  threaded (if (seq? form)\n                             (with-meta (concat (list (first form) x)\n                                                (next form))\n                               (meta form))\n                             (list form x))]\n              (recur threaded (next forms))) x))]\n    (analyze ctx expanded)))\n\n(defn expand-as->\n  \"The ->> macro from clojure.core.\"\n  [ctx [_as expr name & forms]]\n  (let [[let-bindings & body] `([~name ~expr\n                                 ~@(interleave (repeat name) (butlast forms))]\n                                ~(if (empty? forms)\n                                   name\n                                   (last forms)))]\n    (expand-let* ctx let-bindings body)))\n\n(declare expand-declare)\n\n(defn expand-def\n  [ctx expr]\n  (let [[_def var-name ?docstring ?init] expr]\n    (expand-declare ctx [nil var-name])\n    (when-not (simple-symbol? var-name)\n      (throw-error-with-location \"Var name should be simple symbol.\" expr))\n    (let [arg-count (count expr)\n          docstring (when (and (= 4 arg-count)\n                               (string? ?docstring))\n                      ?docstring)\n          expected-arg-count (if docstring 4 3)]\n      (when-not (<= arg-count expected-arg-count)\n        (throw (new #?(:clj  IllegalArgumentException\n                       :cljs js/Error)\n                    \"Too many arguments to def\")))\n      (let [init (if docstring ?init ?docstring)\n            init (if (= 2 arg-count)\n                   :sci.impl/var.unbound\n                   (analyze ctx init))\n            m (meta var-name)\n            m (analyze ctx m)\n            m (assoc m :ns @vars/current-ns)\n            m (if docstring (assoc m :doc docstring) m)\n            var-name (with-meta var-name m)]\n        (mark-eval-call (list 'def var-name init))))))\n\n(defn expand-defn [ctx [op fn-name & body :as expr]]\n  (when-not (simple-symbol? fn-name)\n    (throw-error-with-location \"Var name should be simple symbol.\" expr))\n  (expand-declare ctx [nil fn-name])\n  (let [macro? (= \"defmacro\" (name op))\n        [pre-body body] (split-with (comp not sequential?) body)\n        _ (when (empty? body)\n            (throw-error-with-location \"Parameter declaration missing.\" expr))\n        docstring (when-let [ds (first pre-body)]\n                    (when (string? ds) ds))\n        meta-map (when-let [m (last pre-body)]\n                   (when (map? m) m))\n        meta-map (analyze ctx (merge (meta fn-name) (meta expr) meta-map))\n        fn-body (with-meta (cons 'fn body)\n                  (meta expr))\n        f (expand-fn ctx fn-body macro?)\n        arglists (seq (:sci.impl/arglists f))\n        meta-map (assoc meta-map\n                        :ns @vars/current-ns\n                        :arglists arglists)\n        fn-name (with-meta fn-name\n                  (cond-> meta-map\n                    docstring (assoc :doc docstring)\n                    macro? (assoc :macro true)))\n        f (assoc f\n                 :sci/macro macro?\n                 :sci.impl/fn-name fn-name)]\n    (mark-eval-call (list 'def fn-name f))))\n\n(defn expand-comment\n  \"The comment macro from clojure.core.\"\n  [_ctx & _body])\n\n(defn expand-loop\n  [ctx expr]\n  (let [bv (second expr)\n        arg-names (take-nth 2 bv)\n        init-vals (take-nth 2 (rest bv))\n        [bv syms] (if (every? symbol? arg-names)\n                    [bv arg-names]\n                    (let [syms (repeatedly (count arg-names) #(gensym))\n                          bv1 (map vector syms init-vals)\n                          bv2  (map vector arg-names syms)]\n                      [(into [] cat (interleave bv1 bv2)) syms]))\n        body (nnext expr)\n        expansion (list 'let bv\n                        (list* `(fn ~(vec arg-names) ~@body)\n                               syms))]\n    (analyze ctx expansion)))\n\n(defn expand-lazy-seq\n  [ctx expr]\n  (let [body (rest expr)]\n    (mark-eval-call\n     (list 'lazy-seq\n           (analyze ctx\n                    ;; expand-fn will take care of the analysis of the body\n                    (list 'fn [] (cons 'do body)))))))\n\n(defn expand-if\n  [ctx [_if & exprs :as expr]]\n  (case (count exprs)\n    (0 1) (throw-error-with-location \"Too few arguments to if\" expr)\n    (2 3) (mark-eval-call `(~'if ~@(analyze-children ctx exprs)))\n    (throw-error-with-location \"Too many arguments to if\" expr)))\n\n(defn expand-case\n  [ctx expr]\n  (let [v (analyze ctx (second expr))\n        clauses (nnext expr)\n        match-clauses (take-nth 2 clauses)\n        result-clauses (analyze-children ctx (take-nth 2 (rest clauses)))\n        default (when (odd? (count clauses))\n                  [:val (analyze ctx (last clauses))])\n        cases (interleave match-clauses result-clauses)\n        assoc-new (fn [m k v]\n                    (if-not (contains? m k)\n                      (assoc m k v)\n                      (throw-error-with-location (str \"Duplicate case test constant \" k)\n                                                 expr)))\n        case-map (loop [cases (seq cases)\n                        ret-map {}]\n                   (if cases\n                     (let [[k v & cases] cases]\n                       (if (list? k)\n                         (recur\n                          cases\n                          (reduce (fn [acc k]\n                                    (assoc-new acc k v))\n                                  ret-map\n                                  k))\n                         (recur\n                          cases\n                          (assoc-new ret-map k v))))\n                     ret-map))\n        ret (mark-eval-call (list 'case\n                                  {:case-map case-map\n                                   :case-val v\n                                   :case-default default}\n                                  default))]\n    (mark-eval-call ret)))\n\n(defn expand-try\n  [ctx [_try & body]]\n  (let [[body-exprs\n         catches\n         finally]\n        (loop [exprs #_[expr & exprs :as all-exprs] (seq body)\n               body-exprs []\n               catch-exprs []\n               finally-expr nil]\n          (if exprs\n            (let [expr (first exprs)\n                  exprs (next exprs)]\n              (cond (and (seq? expr) (= 'catch (first expr)))\n                    (recur exprs body-exprs (conj catch-exprs expr) finally-expr)\n                    (and (not exprs) (and (seq? expr) (= 'finally (first expr))))\n                    [body-exprs catch-exprs expr]\n                    :else\n                    ;; TODO: cannot add body expression when catch is not empty\n                    ;; TODO: can't have finally as non-last expression\n                    (recur exprs (conj body-exprs expr) catch-exprs finally-expr)))\n            [body-exprs catch-exprs finally-expr]))\n        body (analyze ctx (cons 'do body-exprs))\n        catches (mapv (fn [c]\n                        (let [[_ ex binding & body] c]\n                          (if-let [clazz (interop/resolve-class ctx ex)]\n                            {:class clazz\n                             :binding binding\n                             :body (analyze (assoc-in ctx [:bindings binding] nil)\n                                            (cons 'do body))}\n                            (throw-error-with-location (str \"Unable to resolve classname: \" ex) ex))))\n                      catches)\n        finally (when finally\n                  (analyze ctx (cons 'do (rest finally))))]\n    (with-meta\n      {:sci.impl/try\n       {:body body\n        :catches catches\n        :finally finally}}\n      {:sci.impl/op :try})))\n\n(defn expand-declare [ctx [_declare & names :as _expr]]\n  (swap! (:env ctx)\n         (fn [env]\n           (let [cnn (vars/current-ns-name)]\n             (update-in env [:namespaces cnn]\n                        (fn [current-ns]\n                          (reduce (fn [acc name]\n                                    (if (contains? acc name)\n                                      ;; declare does not override an existing\n                                      ;; var\n                                      acc\n                                      (assoc acc name\n                                             (doto (vars/->SciVar nil (symbol (str cnn)\n                                                                              (str name))\n                                                                  (assoc (meta name)\n                                                                         :name name\n                                                                         :ns @vars/current-ns\n                                                                         :file @vars/current-file)\n                                                                  false)\n                                               (vars/unbind)))))\n                                  current-ns\n                                  names))))))\n  nil)\n\n;;;; Interop\n\n(defn expand-dot [ctx [_dot instance-expr method-expr & args :as _expr]]\n  (let [[method-expr & args] (if (seq? method-expr) method-expr\n                                 (cons method-expr args))\n        instance-expr (analyze ctx instance-expr)\n        instance-expr (utils/vary-meta*\n                       instance-expr\n                       (fn [m]\n                         (if-let [t (:tag m)]\n                           (let [clazz (or (interop/resolve-class ctx t)\n                                           (records/resolve-record-class ctx t)\n                                           (throw-error-with-location\n                                            (str \"Unable to resolve classname: \" t) t))]\n                             (assoc m :tag-class clazz))\n                           m)))\n        method-expr (name method-expr)\n        args (when args (analyze-children ctx args))\n        res #?(:clj (if (class? instance-expr)\n                      (if (nil? args)\n                        (if (str/starts-with? method-expr \"-\")\n                          (with-meta [instance-expr (subs method-expr 1)]\n                            {:sci.impl/op :static-access})\n                          ;; https://clojure.org/reference/java_interop\n                          ;; If the second operand is a symbol and no args are\n                          ;; supplied it is taken to be a field access - the\n                          ;; name of the field is the name of the symbol, and\n                          ;; the value of the expression is the value of the\n                          ;; field, unless there is a no argument public method\n                          ;; of the same name, in which case it resolves to a\n                          ;; call to the method.\n                          (if-let [_\n                                   (try (Reflector/getStaticField ^Class instance-expr ^String method-expr)\n                                        (catch IllegalArgumentException _ nil))]\n                            (with-meta [instance-expr method-expr]\n                              {:sci.impl/op :static-access})\n                            (mark-eval-call\n                             `(~(with-meta [instance-expr method-expr]\n                                  {:sci.impl/op :static-access}) ~@args))))\n                        (mark-eval-call\n                         `(~(with-meta [instance-expr method-expr]\n                              {:sci.impl/op :static-access}) ~@args)))\n                      (mark-eval-call `(~'. ~instance-expr ~method-expr ~args)))\n               :cljs (mark-eval-call `(~'. ~instance-expr ~method-expr ~args)))]\n    res))\n\n(defn expand-dot**\n  \"Expands (. x method)\"\n  [ctx expr]\n  (when (< (count expr) 3)\n    (throw (new #?(:clj IllegalArgumentException :cljs js/Error)\n                \"Malformed member expression, expecting (.member target ...)\")))\n  (expand-dot ctx expr))\n\n(defn expand-dot*\n  \"Expands (.foo x)\"\n  [ctx [method-name obj & args :as expr]]\n  (when (< (count expr) 2)\n    (throw (new #?(:clj IllegalArgumentException :cljs js/Error)\n                \"Malformed member expression, expecting (.member target ...)\")))\n  (expand-dot ctx (list '. obj (cons (symbol (subs (name method-name) 1)) args))))\n\n(defn expand-new [ctx [_new class-sym & args :as _expr]]\n  (if-let [#?(:clj {:keys [:class] :as _opts}\n              :cljs {:keys [:constructor] :as _opts}) (interop/resolve-class-opts ctx class-sym)]\n    (let [args (analyze-children ctx args)] ;; analyze args!\n      (mark-eval-call (list 'new #?(:clj class :cljs constructor) args)))\n    (if-let [record (records/resolve-record-class ctx class-sym)]\n      (let [args (analyze-children ctx args)]\n        (mark-eval-call (list* (:sci.impl.record/constructor (meta record)) args)))\n      (throw-error-with-location (str \"Unable to resolve classname: \" class-sym) class-sym))))\n\n(defn expand-constructor [ctx [constructor-sym & args]]\n  (let [;; TODO:\n        ;; here it strips the namespace, which is correct in the case of\n        ;; js/Error. but not in clj\n        constructor-name (name constructor-sym)\n        class-sym (with-meta (symbol (subs constructor-name 0\n                                           (dec (count constructor-name))))\n                    (meta constructor-sym))]\n    (expand-new ctx (with-meta (list* 'new class-sym args)\n                      (meta constructor-sym)))))\n\n;;;; End interop\n\n;;;; Namespaces\n\n(defn analyze-ns-form [ctx [_ns ns-name & exprs]]\n  (when-not (symbol? ns-name)\n    (throw (new #?(:clj IllegalArgumentException\n                   :cljs js/Error)\n                (str \"Namespace name must be symbol, got: \" (pr-str ns-name)))))\n  (let [[docstring exprs]\n        (let [fexpr (first exprs)]\n          (if (string? fexpr)\n            [fexpr (next exprs)]\n            [nil exprs]))\n        ;; skip attr-map\n        [attr-map exprs]\n        (let [m (first exprs)]\n          (if (map? m)\n            [m (next exprs)]\n            [nil exprs]))\n        attr-map (if docstring\n                   (assoc attr-map :doc docstring)\n                   attr-map)]\n    (set-namespace! ctx ns-name attr-map)\n    (loop [exprs exprs\n           ret []]\n      (if exprs\n        (let [[k & args] (first exprs)]\n          (case k\n            (:require :use)\n            (recur (next exprs)\n                   (conj ret\n                         (mark-eval-call\n                          (list* (symbol (name k)) args))))\n            :import (recur (next exprs) (conj ret (mark-eval-call (list* 'import args))))\n            :refer-clojure (recur (next exprs)\n                                  (conj ret\n                                        (mark-eval-call\n                                         (list* 'refer 'clojure.core args))))\n            :gen-class ;; ignore\n            (recur (next exprs) ret)))\n        (mark-eval-call (list* 'do ret))))))\n\n;;;; End namespaces\n\n\n;;;; Vars\n\n(defn analyze-var [ctx [_ var-name]]\n  (resolve-symbol (assoc ctx :sci.impl/prevent-deref true) var-name))\n\n(defn analyze-set! [ctx [_ obj v]]\n  (let [obj (analyze ctx obj)\n        v (analyze ctx v)\n        obj (types/getVal obj)]\n    (mark-eval-call (list 'set! obj v))))\n\n;;;; End vars\n\n;;;; Macros\n\n(defn macro? [f]\n  (when-let [m (meta f)]\n    (or (:sci/macro m)\n        (:macro m))))\n\n;;;; End macros\n\n(defn analyze-call [ctx expr]\n  (let [f (first expr)]\n    (if (symbol? f)\n      (let [;; in call position Clojure prioritizes special symbols over\n            ;; bindings\n            special-sym (get special-syms f)\n            _ (when special-sym (check-permission! ctx special-sym f))\n            f (or special-sym\n                  (resolve-symbol ctx f true))\n            f (if (and (vars/var? f)\n                       (vars/isMacro f))\n                @f f)\n            f-meta (meta f)\n            eval? (and f-meta (:sci.impl/op f-meta))]\n        (cond (and f-meta (::static-access f-meta))\n              (expand-dot** ctx (list* '. (first f) (second f) (rest expr)))\n              (and (not eval?) ;; the symbol is not a binding\n                   (or\n                    special-sym\n                    (contains? macros f)))\n              (case f\n                ;; we treat every subexpression of a top-level do as a separate\n                ;; analysis/interpretation unit so we hand this over to the\n                ;; interpreter again, which will invoke analysis + evaluation on\n                ;; every sub expression\n                do (mark-eval-call (cons 'do\n                                         (analyze-children ctx (rest expr))))\n                let (expand-let ctx expr)\n                (fn fn*) (expand-fn ctx expr false)\n                def (expand-def ctx expr)\n                ;; NOTE: defn / defmacro aren't implemented as normal macros yet\n                (defn defmacro) (let [ret (expand-defn ctx expr)]\n                                  ret)\n                ;; TODO: implement as normal macro in namespaces.cljc\n                -> (expand-> ctx (rest expr))\n                ;; TODO: implement as normal macro in namespaces.cljc\n                as-> (expand-as-> ctx expr)\n                quote (do nil (second expr))\n                ;; TODO: implement as normal macro in namespaces.cljc\n                comment (expand-comment ctx expr)\n                loop (expand-loop ctx expr)\n                lazy-seq (expand-lazy-seq ctx expr)\n                for (let [res (expand-for ctx expr)]\n                      (if (:sci.impl/macroexpanding ctx)\n                        res\n                        (analyze ctx res)))\n                doseq (analyze ctx (expand-doseq ctx expr))\n                if (expand-if ctx expr)\n                case (expand-case ctx expr)\n                try (expand-try ctx expr)\n                declare (expand-declare ctx expr)\n                expand-dot* (expand-dot* ctx expr)\n                . (expand-dot** ctx expr)\n                expand-constructor (expand-constructor ctx expr)\n                new (expand-new ctx expr)\n                ns (analyze-ns-form ctx expr)\n                var (analyze-var ctx expr)\n                set! (analyze-set! ctx expr)\n                import (mark-eval-call expr) ;; don't analyze children\n                ;; macroexpand-1 (macroexpand-1 ctx expr)\n                ;; macroexpand (macroexpand ctx expr)\n                ;; else:\n                (mark-eval-call (cons f (analyze-children ctx (rest expr)))))\n              :else\n              (try\n                (if (macro? f)\n                  (let [needs-ctx? (kw-identical? :needs-ctx\n                                                  (:sci.impl/op (meta f)))\n                        v (if needs-ctx?\n                            (apply f expr\n                                   (:bindings ctx)\n                                   ctx\n                                   (rest expr))\n                            (apply f expr\n                                   (:bindings ctx) (rest expr)))\n                        expanded (if (:sci.impl/macroexpanding ctx)\n                                   v\n                                   (analyze ctx v))]\n                    expanded)\n                  (mark-eval-call (cons f (analyze-children ctx (rest expr)))))\n                (catch #?(:clj Exception :cljs js/Error) e\n                  (rethrow-with-location-of-node ctx e expr)))))\n      (let [ret (mark-eval-call (analyze-children ctx expr))]\n        ret))))\n\n(defn analyze\n  [ctx expr]\n  ;; (prn \"ana\" expr)\n  (let [ret (cond (constant? expr) expr ;; constants do not carry metadata\n                  (symbol? expr) (let [v (resolve-symbol ctx expr false)]\n                                   (cond (constant? v) v\n                                         ;; (fn? v) (utils/vary-meta* v dissoc :sci.impl/op)\n                                         (vars/var? v) (if (:const (meta v))\n                                                         @v (types/->EvalVar v))\n                                         :else (merge-meta v (meta expr))))\n                  :else\n                  (merge-meta\n                   (cond\n                     (record? expr) expr ;; don't evaluate records\n                     (map? expr)\n                     (-> (zipmap (analyze-children ctx (keys expr))\n                                 (analyze-children ctx (vals expr)))\n                         mark-eval)\n                     (or (vector? expr) (set? expr))\n                     (-> (into (empty expr) (analyze-children ctx expr))\n                         mark-eval)\n                     (and (seq? expr) (seq expr))\n                     (analyze-call ctx expr)\n                     :else expr)\n                   (select-keys (meta expr)\n                                [:line :column :tag])))]\n    ;; (prn \"ana\" expr '-> ret 'm-> (meta ret))\n    ret))\n\n;;;; Scratch\n\n(comment\n  )\n"]}