{"version":3,"sources":["com/wsscode/pathom3/entity_tree.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/map?","com.wsscode.misc.refs/atom?","p__157999","map__158000","cljs.core/--destructure-map","cljs.core.get","com.wsscode.pathom3.entity-tree/entity","entity-tree*","G__158001","cljs.core/deref","com.wsscode.pathom3.entity-tree/create-entity","x","cljs.core.atom","com.wsscode.pathom3.entity-tree/with-entity","env","entity-tree","cljs.core.assoc","p__158002","map__158003","com.wsscode.pathom3.entity-tree/reset-entity!","cljs.core/reset!","var_args","G__158024","com.wsscode.pathom3.entity-tree/swap-entity!","args-arr__4850__auto__","len__4829__auto__","i__4830__auto__","argseq__4851__auto__","cljs.core/IndexedSeq","p__158025","map__158026","p__158027","map__158028","p__158029","map__158030","p__158031","map__158032","seq158019","G__158020","cljs.core/first","cljs.core/next","G__158021","G__158022","G__158023","self__4816__auto__","f","cljs.core.swap_BANG_","y","args","cljs.core.apply","cljs.core/swap!","G__158039","com.wsscode.pathom3.entity-tree/vswap-entity!","p__158040","map__158041","p__158044","map__158045","p__158048","map__158049","p__158053","map__158054","seq158034","G__158035","G__158036","G__158037","G__158038","cljs.core/-vreset!","G__158042","cljs.core/-deref","G__158046","G__158047","G__158050","G__158051","G__158052","cljs.core/vreset!","com.wsscode.pathom3.entity-tree/merge-entity-data","entity","new-data","cljs.core/reduce-kv","cljs.core/assoc"],"sourcesContent":["(ns com.wsscode.pathom3.entity-tree\n  (:require\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.guardrails.core :refer [<- => >def >defn >fdef ? |]]\n    [com.wsscode.misc.refs :as refs]))\n\n(>def ::entity-tree map?)\n(>def ::entity-tree* refs/atom?)\n\n(>defn entity\n  \"Returns the entity tree value from env\"\n  [{::keys [entity-tree*]}]\n  [(s/keys :opt [::entity-tree*]) => (? map?)]\n  (some-> entity-tree* deref))\n\n(>defn create-entity [x]\n  [::entity-tree => ::entity-tree*]\n  (atom x))\n\n(>defn with-entity\n  \"Set the entity in the environment. Note in this function you must send the cache-tree\n  as a map, not as an atom.\"\n  [env entity-tree]\n  [map? map? => map?]\n  (assoc env ::entity-tree* (atom entity-tree)))\n\n(>defn reset-entity!\n  [{::keys [entity-tree*]} entity-tree]\n  [(s/keys :req [::entity-tree*]) ::entity-tree => ::entity-tree]\n  (reset! entity-tree* entity-tree))\n\n(>defn swap-entity!\n  \"Swap cache-tree at the current path. Returns the updated whole cache-tree.\"\n  ([{::keys [entity-tree*]} f]\n   [(s/keys :req [::entity-tree*]) fn?\n    => map?]\n   (swap! entity-tree* f))\n  ([{::keys [entity-tree*]} f x]\n   [(s/keys :req [::entity-tree*]) fn? any?\n    => map?]\n   (swap! entity-tree* f x))\n  ([{::keys [entity-tree*]} f x y]\n   [(s/keys :req [::entity-tree*]) fn? any? any?\n    => map?]\n   (swap! entity-tree* f x y))\n  ([{::keys [entity-tree*]} f x y & args]\n   [(s/keys :req [::entity-tree*]) fn? any? any? (s/+ any?)\n    => map?]\n   (apply swap! entity-tree* f x y args)))\n\n(>defn vswap-entity!\n  \"Swap cache-tree at the current path. Returns the updated whole cache-tree.\"\n  ([{::keys [entity-tree*]} f]\n   [(s/keys :req [::entity-tree*]) fn?\n    => map?]\n   (vswap! entity-tree* f))\n  ([{::keys [entity-tree*]} f x]\n   [(s/keys :req [::entity-tree*]) fn? any?\n    => map?]\n   (vswap! entity-tree* f x))\n  ([{::keys [entity-tree*]} f x y]\n   [(s/keys :req [::entity-tree*]) fn? any? any?\n    => map?]\n   (vswap! entity-tree* f x y))\n  ([{::keys [entity-tree*]} f x y & args]\n   [(s/keys :req [::entity-tree*]) fn? any? any? (s/+ any?)\n    => map?]\n   (vreset! entity-tree* (apply f @entity-tree* x y args))))\n\n(>defn merge-entity-data\n  \"Specialized merge versions that work on entity data.\"\n  [entity new-data]\n  [::entity-tree ::entity-tree => ::entity-tree]\n  (reduce-kv\n    assoc\n    entity\n    new-data))\n"]}