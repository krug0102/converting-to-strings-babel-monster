{"version":3,"sources":["repl_tooling/eval.cljs"],"mappings":"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","names":["repl-tooling$eval$MoreData$without_ellision$dyn","x__4521__auto__","m__4522__auto__","repl-tooling.eval/without-ellision","goog/typeOf","m__4519__auto__","cljs.core/missing-protocol","repl-tooling$eval$MoreData$get_more_fn$dyn","repl-tooling.eval/get-more-fn","repl-tooling.eval/MoreData","self","repl-tooling$eval$Evaluator$evaluate$dyn","repl-tooling.eval/evaluate","repl-tooling$eval$Evaluator$break$dyn","repl-tooling.eval/break","repl-tooling.eval/Evaluator","this","command","opts","callback","repl","var_args","G__136334","repl-tooling.eval/eval","js/Error","evaluator","repl_tooling.eval.eval","p","promesa.core/deferred","e136338","res","parsed","repl-tooling.editor-helpers/parse-result","cljs.core/contains?","promesa.core.resolve_BANG_","promesa.core/reject!","e","repl-tooling.eval/without-ellision-list","lst","G__136342","cljs.core/last","cljs.core/butlast","repl-tooling.eval/get-more-fn-list","temp__5753__auto__","fun","repl_tooling$eval$get_more_fn_list_$_more","combine?","p1__136345#","G__136351","G__136353","cljs.core.concat","repl-tooling.eval/without-map","cljs.core.dissoc","repl-tooling.eval/get-more-map","cljs.core.get_in","repl_tooling$eval$get_more_map_$_more","p1__136358#","G__136365","G__136366","cljs.core.merge","cljs.core/PROTOCOL_SENTINEL","goog.object/set","repl-tooling.editor-helpers/IncompleteObj","_","repl_tooling$eval$more","p1__136369#","obj","browsable","repl-tooling.editor-helpers/as-obj","cljs.core/cons","repl-tooling.editor-helpers/Browseable","or__4223__auto__","p1__136371#","call","G__136472","G__136473","cljs.core.assoc","cljs.core/coll?","p1__136372#","repl-tooling.editor-helpers/WithTag","G__136434","G__136435","G__136436","p1__136374#","G__136437","repl-tooling.editor-helpers/IncompleteStr","cljs.core/meta","p1__136375#","G__136401","G__136402","cljs.core/PersistentHashMap","cljs.core/PersistentArrayMap","cljs.core/PersistentTreeMap","cljs.core/PersistentHashSet","cljs.core.remove","cljs.core/set","cljs.core/some","p1__136377#","G__136450","G__136451","cljs.core.into","cljs.core/PersistentVector","G__136405","cljs.core/pop","p1__136378#","G__136411","G__136412","cljs.core/LazySeq","cljs.core/List"],"sourcesContent":["(ns repl-tooling.eval\n  (:refer-clojure :exclude [eval])\n  (:require [repl-tooling.editor-helpers :as helpers]\n            [promesa.core :as p]))\n\n(defprotocol MoreData\n  (without-ellision [self]\n    \"Return the object without the {:repl-tooling/... (more-fn)} key\")\n\n  (get-more-fn [self]\n    \"Returns a function that'll receive an Evaluator and a callback\nwill call the callback with the same kind of object with more data\"))\n\n(defprotocol Evaluator\n  (evaluate [this command opts callback]\n            \"Evaluates the current command in the current REPL evaluator. Opts is a map with the\nfollowing:\n:filename -> the current filename (only works on supported REPLs for now)\n:row -> The 0-based row of the current file\n:col -> the 0-based col of the current file\n:pass -> a map where the data will be copied to the result\n:ignore -> will not send the result to the output/stdout/stderr callback\")\n  (break [this repl]))\n\n(defn eval\n  \"Uses the same API as `evaluate`, but instead of expecting a callback returns a\nresolved promise with the result, or a rejected promise with the error\n\nIf no argument is passed to opts, {:ignore true} is assumed\"\n  ([evaluator command] (eval evaluator command {:ignore true}))\n  ([evaluator command opts]\n   (let [p (p/deferred)]\n     (try\n       (evaluate evaluator command opts (fn [res]\n                                          (let [parsed (helpers/parse-result res)]\n                                            (if (contains? res :result)\n                                              (p/resolve! p parsed)\n                                              (p/reject! p parsed)))))\n       (catch :default e (p/reject! p {:error e})))\n     p)))\n\n(defn- without-ellision-list [lst]\n  (cond-> lst (-> lst last :repl-tooling/...) butlast))\n\n(defn get-more-fn-list [lst]\n  (when-let [fun (-> lst last :repl-tooling/...)]\n    (fn more\n      ([repl callback] (more repl true callback))\n      ([repl combine? callback]\n       (evaluate repl fun {:ignore true}\n                 #(let [res (-> % helpers/parse-result)]\n                    (callback (cond->> (:result res)\n                                       combine? (concat (without-ellision lst))))))))))\n\n(defn- without-map [self]\n  (dissoc self {:repl-tooling/... nil}))\n\n(defn- get-more-map [self]\n    (when-let [fun (get-in self [{:repl-tooling/... nil} :repl-tooling/...])]\n      (fn more\n        ([repl callback] (more repl true callback))\n        ([repl combine? callback]\n         (evaluate repl fun {:ignore true}\n                   #(let [res (-> % helpers/parse-result)]\n                      (callback (cond->> (:result res)\n                                         combine? (merge self)))))))))\n\n(extend-protocol MoreData\n  helpers/IncompleteObj\n  (without-ellision [_] nil)\n  (get-more-fn [self] nil\n    (fn more\n      ([repl callback] (more repl true callback))\n      ([repl _ callback]\n       (evaluate repl\n                 (:more-fn self)\n                 {:ignore true}\n                 #(let [parsed (helpers/parse-result %)\n                        obj (:result parsed)\n                        browsable (helpers/as-obj (cons nil obj))]\n                    (callback browsable))))))\n  helpers/Browseable\n  (without-ellision [self]\n    (:object self))\n\n  (get-more-fn [self]\n    (when-let [fun (or (:more-fn self) (get-more-fn (:attributes self)))]\n      (fn more\n        ([repl callback] (more repl true callback))\n        ([repl combine? callback]\n         (let [call #(callback (cond->> %\n                                        combine? (assoc self\n                                                        :more-fn nil\n                                                        :attributes)))]\n           (if (coll? fun)\n             (evaluate repl fun {:ignore true} #(-> % helpers/parse-result :result call))\n             (fun repl call)))))))\n\n  helpers/WithTag\n  (without-ellision [self]\n    (helpers/WithTag. (without-ellision (helpers/obj self))\n                      (helpers/tag self)))\n  (get-more-fn [self]\n    (when-let [fun (get-more-fn (helpers/obj self))]\n      (fn more\n        ([repl callback] (more repl true callback))\n        ([repl combine? callback]\n         (fun repl combine? #(callback (helpers/WithTag. % (helpers/tag self))))))))\n\n  helpers/IncompleteStr\n  (without-ellision [self]\n    (helpers/only-str self))\n  (get-more-fn [self]\n    (fn more\n      ([repl callback] (more repl true callback))\n      ([repl combine? callback]\n       (let [fun (-> self meta :get-more)]\n         (evaluate repl fun {:ignore true}\n                   #(let [res (-> % helpers/parse-result)]\n                      (callback (cond->> (:result res)\n                                         combine? (helpers/concat-with self)))))))))\n\n  cljs.core/PersistentHashMap\n  (without-ellision [self] (without-map self))\n  (get-more-fn [self] (get-more-map self))\n  cljs.core/PersistentArrayMap\n  (without-ellision [self] (without-map self))\n  (get-more-fn [self] (get-more-map self))\n  cljs.core/PersistentTreeMap\n  (without-ellision [self] (without-map self))\n  (get-more-fn [self] (get-more-map self))\n\n  cljs.core/PersistentHashSet\n  (without-ellision [self] (->> self (remove :repl-tooling/...) set))\n  (get-more-fn [self]\n    (when-let [fun (->> self (some :repl-tooling/...))]\n      (fn more\n        ([repl callback] (more repl true callback))\n        ([repl combine? callback]\n         (evaluate repl fun {:ignore true}\n                   #(let [res (-> % helpers/parse-result)]\n                      (callback (cond->> (:result res)\n                                         combine? (into (without-ellision self))))))))))\n\n  cljs.core/PersistentVector\n  (without-ellision [self] (cond-> self\n                                   (-> self last :repl-tooling/...) pop))\n  (get-more-fn [self]\n    (when-let [fun (-> self last :repl-tooling/...)]\n      (fn more\n        ([repl callback] (more repl true callback))\n        ([repl combine? callback]\n         (evaluate repl fun {:ignore true}\n                   #(let [res (-> % helpers/parse-result)]\n                      (callback (cond->> (:result res)\n                                         combine? (into (without-ellision self))))))))))\n\n  cljs.core/LazySeq\n  (without-ellision [self] (without-ellision-list self))\n  (get-more-fn [self] (get-more-fn-list self))\n\n  cljs.core/List\n  (without-ellision [self] (without-ellision-list self))\n  (get-more-fn [self] (get-more-fn-list self))\n\n  default\n  (without-ellision [self] self)\n  (get-more-fn [_] nil))\n"]}