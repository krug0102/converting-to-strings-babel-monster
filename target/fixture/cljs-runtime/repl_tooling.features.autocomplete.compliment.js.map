{"version":3,"sources":["repl_tooling/features/autocomplete/compliment.cljs"],"mappings":"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","names":["repl-tooling.features.autocomplete.compliment/re-escape","str","clojure.string/replace","repl-tooling.features.autocomplete.compliment/make-context","text","prefix","row","col","lines","clojure.string/split-lines","pattern","cljs.core/re-pattern","cljs.core/count","cljs.core.update","clojure.string/replace-first","clojure.string.join","var_args","G__40703","repl-tooling.features.autocomplete.compliment/for-clojure","js/Error","repl","ns-name","repl_tooling.features.autocomplete.compliment.for_clojure","sources","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/vec","cljs.core.apply","cljs.core/array-map","ns","cljs.core.symbol","context","code","p1__40698#","repl_tooling.eval.eval","cljs.core/constantly","repl-tooling.features.autocomplete.compliment/for-cljs","cmd-for-cljs-env","promesa.protocols/-bind","___31820__auto__","p__40750","map__40751","cljs.core/--destructure-map","cljs.core.get","___31810__auto__","promesa.protocols/-promise","result","clj-result","cljs.core.distinct","cljs.core.sort_by"],"sourcesContent":["(ns repl-tooling.features.autocomplete.compliment\n  (:require [clojure.string :as str]\n            [promesa.core :as p]\n            [repl-tooling.eval :as eval]))\n\n(defn- re-escape [str]\n  (str/replace str #\"[.*+?^${}()|\\[\\]\\\\]\" \"\\\\$&\"))\n\n(defn- make-context [text prefix row col]\n  (let [lines (str/split-lines text)\n        pattern (re-pattern (str \"(.{\" (- col (count prefix)) \"})\" (re-escape prefix)))]\n    (->> \"$1__prefix__\"\n         (update lines row str/replace-first pattern)\n         (str/join \"\\n\"))))\n\n(defn for-clojure\n  ([repl ns-name text prefix row col]\n   (for-clojure repl ns-name text prefix row col nil))\n  ([repl ns-name text prefix row col sources]\n   (let [ns (when ns-name (symbol ns-name))\n         context (make-context text prefix row col)\n         code `(do\n                  (~'clojure.core/require '[compliment.core])\n                  (~'clojure.core/let [completions# (compliment.core/completions\n                                                     ~prefix\n                                                     {:tag-candidates true\n                                                      :ns '~ns\n                                                      :sources ~sources\n                                                      :context ~context})]\n                    (~'clojure.core/vec completions#)))]\n     (.. (eval/eval repl code)\n         (then #(:result %))\n         (catch (constantly []))))))\n\n(defn for-cljs [repl cmd-for-cljs-env ns-name text prefix row col]\n  (p/let [ns (when ns-name (symbol ns-name))\n          context (make-context text prefix row col)\n          code `(do\n                 (~'clojure.core/require 'compliment.sources.cljs)\n                 (~'clojure.core/binding [compliment.sources.cljs/*compiler-env*\n                                          ~cmd-for-cljs-env]\n                   (compliment.sources.cljs/candidates ~prefix\n                                                       '~ns\n                                                       ~context)))\n           {:keys [result]} (.catch (eval/eval repl code) (constantly {:result []}))\n           clj-result (for-clojure repl ns-name text prefix row col\n                                   [:compliment.sources.local-bindings/local-bindings\n                                    :compliment.sources.keywords/keywords])]\n    (->> result\n         (concat clj-result)\n         distinct\n         (sort-by :candidate))))\n"]}