{"version":3,"sources":["repl_tooling/repl_client/source.cljs"],"mappings":";AAMA,AAAA,AACA,4CAAA,5CAAOA,gGAAWC;AAAlB,AACE,GACE,EAAI,AAACC,8CAA4BD,WAC7B,AAACE,kCAAgBF;AACrB,wCAAA,jCAACG;;AAHH,AAME,QAACC,kFAAAA,wFAAAA,RAAkBJ,oEAAAA;;;;AAEvB,oDAAA,pDAAOI,gHAAmBC;AAA1B,AACE,IAAAC,YAAQD;AAAR,AAAA,GAAgB,kCAAA,lCAACE,0BAAUF;AAAmB,sDAAAC,UAAA,6DAAA,WAAAE,jIAACC;AAAD,AAAmB,6FAAAD,tFAACE,4CAAIX;;;AAAtEO;;;AAEF,gDAAA,hDAAMK,wGAAeN,QAAQO;AAA7B,AACE,IAAMP,cAAQ,4CAAKA;IACbQ,MAAI,iBAAA,AAAA,kDAAA,yDACW,AAACE,oCAAwBV;iBADpC,QAAAS,JAEkBE;AAFlB,AAAA,kDAAA,uDAGY,AAACC,wGAAO,AAAWD;;AAJzC,AAKE,IAAAE,qBAAa,AAAA,uFAASL;AAAtB,AAAA,oBAAAK;AAAA,UAAAA,NAASC;AAAT,AAAA,kDAAA,yDACW,4CAAK,iBAAAC,YAAQD;AAAR,AAAA,oBAAYP;AAAZ,yDAAAQ,lDAA0BhB;;AAA1BgB;;;;AACdP;;;AAEN,AAAeQ,mDAAiB;AAChC,AAAA,+CAAA,uDAAAC,tGAAME;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6EAAA,7EAAMD,wFACFE,GAAGb,IAAIc,QAAQC;AADnB,AAEG,OAACC,2EAAaR,iDAAiBK,GAAGb,IAAIc,QAAQC;;;AAFjD,CAAA,6EAAA,7EAAMJ,wFAGFM,SAASJ,GAAGb,IAAIc,QAAQC;AAH5B,AAIG,IAAMf,UAAI,AAACF,8CAAcE,IAAIe;AAA7B,AACE,IAAAV,qBAAa,AAAA,uFAASL;AAAtB,AAAA,oBAAAK;AAAA,UAAAA,NAASC;AAAT,yKACMW,vBACA,gCAAA,hCAACC,8CAA2B,kDAAA,LAAKZ,lHACjC,uIAAA,vIAACY,gJAAsB,AAACd,wGAAOS,/QAC/B,yRAAA,zRAACK,uSAA2B,AAACd,wGAAOU,7bACpC,AAAChB,4cAAciB,lgBACf,yhBAAA,uEAAA,zlBAACnB,2kBAAeuB;;AACpBnB;;;;AAZP,CAAA,uEAAA,vEAAMW;;AAAN,AAcA,kDAAA,lDAAMS,4GAAiBC;AAAvB,AACE,QAAA,2HAAA,KAAA,QAAA,8DAAA,iEAAA,rJAA2EA","names":["repl-tooling.repl-client.source/conv-node","node","rewrite-clj.node/whitespace-or-comment?","rewrite-clj.node/linebreak?","rewrite-clj.node/whitespace-node","repl-tooling.repl-client.source/normalize-command","command","G__152964","cljs.core/contains?","p1__152962#","cljs.core.update","cljs.core.map","repl-tooling.repl-client.source/parse-command","remove-lines?","cmd","e152965","rewrite-clj.parser/parse-string-all","e","cljs.core.pr_str","temp__5751__auto__","res","G__152967","repl-tooling.repl-client.source/default-template","var_args","G__152976","repl-tooling.repl-client.source/wrap-command","js/Error","id","ex-type","strip-newlines?","repl_tooling.repl_client.source.wrap_command","template","clojure.string/replace","cljs.core/str","repl-tooling.repl-client.source/have-ns-command","ns-name"],"sourcesContent":["(ns repl-tooling.repl-client.source\n  (:require [clojure.string :as str]\n            [repl-tooling.repl-client.clj-helper :refer [generic-eval-wrapper]]\n            [rewrite-clj.parser :as parser]\n            [rewrite-clj.node :as node]))\n\n(declare normalize-command)\n(defn- conv-node [node]\n  (cond\n    (or (node/whitespace-or-comment? node)\n        (node/linebreak? node))\n    (node/whitespace-node \" \")\n\n    :else\n    (normalize-command node)))\n\n(defn- normalize-command [command]\n  (cond-> command (contains? command :children) (update :children #(map conv-node %))))\n\n(defn parse-command [command remove-lines?]\n  (let [command (str command)\n        cmd (try\n              {:result (parser/parse-string-all command)}\n              (catch :default e\n                {:error (pr-str (.-message e))}))]\n    (if-let [res (:result cmd)]\n      {:result (str (cond-> res remove-lines? normalize-command))}\n      cmd)))\n\n(def ^:private default-template (generic-eval-wrapper))\n(defn wrap-command\n  ([id cmd ex-type strip-newlines?]\n   (wrap-command default-template id cmd ex-type strip-newlines?))\n  ([template id cmd ex-type strip-newlines?]\n   (let [cmd (parse-command cmd strip-newlines?)]\n     (if-let [res (:result cmd)]\n       (-> template\n           (str/replace #\"__COMMAND__\" (str res \"\\n\"))\n           (str/replace #\"__ID__\" (pr-str id))\n           (str/replace #\"__EX_TYPE__\" (pr-str ex-type))\n           (parse-command strip-newlines?)\n           (update :result str \"\\n\"))\n       cmd))))\n\n(defn have-ns-command [ns-name]\n  (str \"(try (#?(:joker joker.core/require :default clojure.core/require) '\" ns-name \") \"\n       \"true \"\n       \"(catch #?(:bb java.lang.Throwable :clj java.lang.Throwable \"\n       \":joker Error :cljs :default :cljr System.Exception :clje _) _ \"\n       \"false))\"))\n"]}