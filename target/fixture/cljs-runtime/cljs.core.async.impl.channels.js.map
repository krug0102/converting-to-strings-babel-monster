{"version":3,"sources":["cljs/core/async/impl/channels.cljs"],"mappings":"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","names":["cljs.core.async.impl.channels/box","val","js/cljs","js/cljs.core","js/cljs.core.async","js/cljs.core.async.impl","js/cljs.core.async.impl.channels","js/cljs.core.async.impl.channels.t_cljs$core$async$impl$channels148808","cljs.core.async.impl.channels/t_cljs$core$async$impl$channels148808","_148810","meta148809","this__4461__auto__","writer__4462__auto__","opt__4463__auto__","cljs.core/-write","cljs.core.async.impl.channels/->t_cljs$core$async$impl$channels148808","_","cljs.core.async.impl.channels/PutBox","cljs.core.async.impl.channels/->PutBox","handler","cljs.core.async.impl.channels/put-active?","box","cljs.core.async.impl.protocols/active?","cljs.core.async.impl.channels/MAX_DIRTY","cljs$core$async$impl$channels$MMC$abort$dyn","x__4521__auto__","m__4522__auto__","cljs.core.async.impl.channels/abort","goog/typeOf","m__4519__auto__","cljs.core/missing-protocol","cljs.core.async.impl.channels/MMC","this","cljs.core/PROTOCOL_SENTINEL","cljs.core.async.impl.channels/ManyToManyChannel","cljs.core.async.impl.channels/->ManyToManyChannel","takes","dirty-takes","puts","dirty-puts","buf","closed","add!","putter","put-handler","put-cb","cljs.core.async.impl.dispatch/run","cljs.core/constantly","js/Error","and__4221__auto__","cljs.core/not","done?","cljs.core/reduced?","take-cbs","takers","cljs.core/count","taker","ret","cljs.core.conj","cljs.core/seq","seq__148816","chunk__148817","count__148818","i__148819","temp__5753__auto__","cljs.core/chunked-seq?","c__4649__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","f","take-cb","cljs.core.async.impl.protocols/MAX-QUEUE-SIZE","temp__5751__auto__","vec__148824","cljs.core.nth","cbs","cb","seq__148829","chunk__148830","count__148831","i__148832","cljs.core.async.impl.protocols/commit","has-val","cljs.core.async.impl.channels/ex-handler","ex","js/console","cljs.core.async.impl.channels/handle","exh","t","else","fexpr__148835","or__4223__auto__","cljs.core.async.impl.protocols.add_BANG_","var_args","G__148837","cljs.core.async.impl.channels/chan","cljs.core.async.impl.channels.chan","xform","cljs.core.async.impl.buffers/ring-buffer","cljs.core.async.impl.protocols/add!","e148838","e148839"],"sourcesContent":[";;   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core.async.impl.channels\n  (:require [cljs.core.async.impl.protocols :as impl]\n            [cljs.core.async.impl.dispatch :as dispatch]\n            [cljs.core.async.impl.buffers :as buffers]))\n\n\n\n(defn box [val]\n  (reify cljs.core/IDeref\n    (-deref [_] val)))\n\n(deftype PutBox [handler val])\n\n(defn put-active? [box]\n  (impl/active? (.-handler box)))\n\n(def ^:const MAX_DIRTY 64)\n\n(defprotocol MMC\n  (abort [this]))\n\n(deftype ManyToManyChannel [takes ^:mutable dirty-takes puts ^:mutable dirty-puts ^not-native buf ^:mutable closed add!]\n  MMC\n  (abort [this]\n    (loop []\n      (let [putter (.pop puts)]\n        (when-not (nil? putter)\n          (let [^not-native put-handler (.-handler putter)\n                val (.-val putter)]\n            (if ^boolean (impl/active? put-handler)\n              (let [put-cb (impl/commit put-handler)]\n                (dispatch/run #(put-cb true)))\n              (recur))))))\n    (.cleanup puts (constantly false))\n    (impl/close! this))\n  impl/WritePort\n  (put! [this val ^not-native handler]\n    (assert (not (nil? val)) \"Can't put nil on a channel\")\n    ;; bug in CLJS compiler boolean inference - David\n    (let [^boolean closed closed]\n      (if (or closed (not ^boolean (impl/active? handler)))\n        (box (not closed))\n        (if (and buf (not (impl/full? buf)))\n          (do\n            (impl/commit handler)\n            (let [done? (reduced? (add! buf val))\n                  take-cbs (loop [takers []]\n                             (if (and (pos? (.-length takes)) (pos? (count buf)))\n                               (let [^not-native taker (.pop takes)]\n                                 (if ^boolean (impl/active? taker)\n                                   (let [ret (impl/commit taker)\n                                         val (impl/remove! buf)]\n                                     (recur (conj takers (fn [] (ret val)))))\n                                   (recur takers)))\n                               takers))]\n              (when done? (abort this))\n              (when (seq take-cbs)\n                (doseq [f take-cbs]\n                  (dispatch/run f)))\n              (box true)))\n          (let [taker (loop []\n                        (let [^not-native taker (.pop takes)]\n                          (when taker\n                            (if (impl/active? taker)\n                              taker\n                              (recur)))))]\n            (if taker\n              (let [take-cb (impl/commit taker)]\n                (impl/commit handler)\n                (dispatch/run (fn [] (take-cb val)))\n                (box true))\n              (do\n                (if (> dirty-puts MAX_DIRTY)\n                  (do (set! dirty-puts 0)\n                      (.cleanup puts put-active?))\n                  (set! dirty-puts (inc dirty-puts)))\n                (when (impl/blockable? handler)\n                  (assert (< (.-length puts) impl/MAX-QUEUE-SIZE)\n                    (str \"No more than \" impl/MAX-QUEUE-SIZE\n                         \" pending puts are allowed on a single channel.\"\n                         \" Consider using a windowed buffer.\"))\n                  (.unbounded-unshift puts (PutBox. handler val)))\n                nil)))))))\n  impl/ReadPort\n  (take! [this ^not-native handler]\n    (if (not ^boolean (impl/active? handler))\n      nil\n      (if (and (not (nil? buf)) (pos? (count buf)))\n        (do\n          (if-let [take-cb (impl/commit handler)]\n            (let [val (impl/remove! buf)\n                  [done? cbs] (when (and (not (impl/full? buf)) (pos? (.-length puts)))\n                                (loop [cbs []]\n                                  (let [putter (.pop puts)\n                                        ^not-native put-handler (.-handler putter)\n                                        val (.-val putter)\n                                        cb (and ^boolean (impl/active? put-handler) (impl/commit put-handler))\n                                        cbs (if cb (conj cbs cb) cbs)\n                                        done? (when cb (reduced? (add! buf val)))]\n                                    (if (and (not done?) (not (impl/full? buf)) (pos? (.-length puts)))\n                                      (recur cbs)\n                                      [done? cbs]))))]\n              (when done?\n                (abort this))\n              (doseq [cb cbs]\n                (dispatch/run #(cb true)))\n              (box val))))\n        (let [putter (loop []\n                       (let [putter (.pop puts)]\n                         (when putter\n                           (if ^boolean (impl/active? (.-handler putter))\n                             putter\n                             (recur)))))]\n          (if putter\n            (let [put-cb (impl/commit (.-handler putter))]\n              (impl/commit handler)\n              (dispatch/run #(put-cb true))\n              (box (.-val putter)))\n            (if closed\n              (do\n                (when buf (add! buf))\n                (if (and (impl/active? handler) (impl/commit handler))\n                  (let [has-val (and buf (pos? (count buf)))]\n                    (let [val (when has-val (impl/remove! buf))]\n                      (box val)))\n                  nil))\n              (do\n                (if (> dirty-takes MAX_DIRTY)\n                  (do (set! dirty-takes 0)\n                      (.cleanup takes impl/active?))\n                  (set! dirty-takes (inc dirty-takes)))\n                (when (impl/blockable? handler)\n                  (assert (< (.-length takes) impl/MAX-QUEUE-SIZE)\n                    (str \"No more than \" impl/MAX-QUEUE-SIZE\n                         \" pending takes are allowed on a single channel.\"))\n                  (.unbounded-unshift takes handler))\n                nil)))))))\n  impl/Channel\n  (closed? [_] closed)\n  (close! [this]\n    (if ^boolean closed\n        nil\n        (do (set! closed true)\n            (when (and buf (zero? (.-length puts)))\n                    (add! buf))\n            (loop []\n              (let [^not-native taker (.pop takes)]\n                (when-not (nil? taker)\n                  (when ^boolean (impl/active? taker)\n                    (let [take-cb (impl/commit taker)\n                          val (when (and buf (pos? (count buf))) (impl/remove! buf))]\n                      (dispatch/run (fn [] (take-cb val)))))\n                  (recur))))\n            (when buf (impl/close-buf! buf))\n            nil))))\n\n(defn- ex-handler [ex]\n  (.log js/console ex)\n  nil)\n\n(defn- handle [buf exh t]\n  (let [else ((or exh ex-handler) t)]\n    (if (nil? else)\n      buf\n      (impl/add! buf else))))\n\n(defn chan\n  ([buf] (chan buf nil))\n  ([buf xform] (chan buf xform nil))\n  ([buf xform exh]\n     (ManyToManyChannel. (buffers/ring-buffer 32) 0 (buffers/ring-buffer 32)\n                         0 buf false\n                         (let [add! (if xform (xform impl/add!) impl/add!)]\n                           (fn\n                             ([buf]\n                              (try\n                                (add! buf)\n                                (catch :default t\n                                  (handle buf exh t))))\n                             ([buf val]\n                              (try\n                                (add! buf val)\n                                (catch :default t\n                                  (handle buf exh t)))))))))\n"]}