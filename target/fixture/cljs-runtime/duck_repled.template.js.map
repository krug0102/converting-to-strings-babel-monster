{"version":3,"sources":["duck_repled/template.cljc"],"mappings":";AAGA,gCAAA,hCAAMA,wEAAUC,KAAKC;AAArB,AACE,IAAMD,WACU,AAACE,sBAAc,WAAKC;AAAL,AACE,GAAI,EAAK,gBAAAC,fAASD,uGACLA,pBAAIE,7CAAU,6CAAA,yBAAA,tEAACC;AAC1B,sDAAA,/CAACC,8DAAsB,AAACC,eAAKL;;AAC7BA;;GALnBH;AAAhB,AAME,OAACS,wGAAO,AAACC,8BAAsBT,SAASD","names":["duck-repled.template/template","code","replaces","clojure.walk/postwalk","sym","cljs.core/Symbol","cljs.core/namespace","cljs.core._EQ_","cljs.core.symbol","cljs.core/name","cljs.core.pr_str","clojure.walk/postwalk-replace"],"sourcesContent":["(ns duck-repled.template\n  (:require [clojure.walk :as walk]))\n\n(defn template [code replaces]\n  (let [code (->> code\n                  (walk/postwalk (fn [sym]\n                                   (if (and (symbol? sym)\n                                            (-> sym namespace (= \"cljs.core\")))\n                                     (symbol \"clojure.core\" (name sym))\n                                     sym))))]\n    (pr-str (walk/postwalk-replace replaces code))))\n"]}