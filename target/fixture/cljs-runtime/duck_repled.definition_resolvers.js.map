{"version":3,"sources":["duck_repled/definition_resolvers.cljc"],"mappings":"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","names":["duck-repled.definition-resolvers/join-paths","paths","cljs.core.apply","js/shadow.js.shim.module$path.join","duck-repled.definition-resolvers/file-exists?","path","and__4221__auto__","js/shadow.js.shim.module$fs.existsSync","js/shadow.js.shim.module$fs.statSync","com.wsscode.pathom3.connect.operation.resolver","_","p__160819","map__160820","cljs.core/--destructure-map","cljs.core.get","original160815","resolver160816","outputs160817","op160818","cljs.core.assoc","a__89033__auto__","b__89034__auto__","promesa.protocols/-bind","___56277__auto__","result__89035__auto__","___56267__auto__","promesa.protocols/-promise","duck_repled.schemas.validate_BANG_","cljs.core/keys","duck-repled.definition-resolvers/join-paths-resolver","p__160830","map__160832","filename","original160824","resolver160825","outputs160826","op160827","duck-repled.definition-resolvers/file-exists-resolver","p__160842","map__160843","meta","original160834","resolver160835","outputs160836","op160837","duck-repled.definition-resolvers/position-resolver","temp__5753__auto__","line","G__160844","duck-repled.definition-resolvers/norm-result","file-name","os","js/shadow.js.shim.module$os.platform","G__160861","cljs.core/re-find","clojure.string/replace-first","p__160866","map__160867","original160862","resolver160863","outputs160864","op160865","duck-repled.definition-resolvers/existing-filename","duck-repled.definition-resolvers/read-jar","clj","jar-file-name","vec__160871","cljs.core.nth","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/vec","jar","clojure.string.split","t","code","duck-repled.template/template","duck_repled.repl_protocol.eval","p__160882","map__160883","evaluator","kind","original160878","resolver160879","outputs160880","op160881","duck-repled.definition-resolvers/clojure-filename","com.wsscode.pathom3.connect.operation/?","repl","G__160885","cljs.core/Keyword","p__160889","map__160890","cljs.core/select-keys","result","p__160893","map__160894","pos","p__160903","map__160904","original160898","resolver160899","outputs160900","op160901","duck-repled.definition-resolvers/file-from-clr","cljs.core._EQ_","p__160906","map__160907","duck-repled.definition-resolvers/extract-right-var","current-var","contents","vec__160913","or__4223__auto__","var","duck-repled.editor-helpers/current-var","p__160926","map__160927","original160920","resolver160921","outputs160922","op160923","duck-repled.definition-resolvers/resolver-for-ns-only","fqn","G__160928","cljs.core.symbol","cljs.core/namespace","p__160937","map__160938","col","G__160940","G__160941","p__160951","map__160952","original160947","resolver160948","outputs160949","op160950","duck-repled.definition-resolvers/resolver-for-stacktrace","function-name","row","p__160953","map__160954","ns-name","cljs.core/first","original160955","resolver160956","outputs160957","op160958","duck-repled.definition-resolvers/source-from-contents","inputs","source","p__160963","map__160964","original160959","resolver160960","outputs160961","op160962","duck-repled.definition-resolvers/source-from-file","duck-repled.editor-helpers/read-file","top-blocks","duck-repled.editor-helpers/top-blocks","vec__160965","range","text","duck-repled.editor-helpers/top-block-for","duck-repled.definition-resolvers/resolvers"],"sourcesContent":["(ns duck-repled.definition-resolvers\n  (:require [clojure.string :as str]\n            [duck-repled.connect :as connect]\n            [com.wsscode.pathom3.connect.operation :as pco]\n            [duck-repled.repl-protocol :as repl]\n            [duck-repled.template :refer [template]]\n            [duck-repled.editor-helpers :as helpers]\n            [promesa.core :as p]\n            #?(:cljs [\"fs\" :refer [existsSync statSync]])\n            #?(:cljs [\"path\" :refer [join]])\n            #?(:cljs [\"os\" :refer [platform]]))\n  #?(:clj (:import [java.io File]\n                   [java.nio.file FileSystems])))\n\n(defn- join-paths [paths]\n  #?(:cljs (apply join paths)\n     :clj (if (empty? paths)\n            \".\"\n            (let [[fst & rst] paths]\n              (-> (FileSystems/getDefault)\n                  (.getPath fst (into-array rst))\n                  str)))))\n\n(defn- file-exists? [path]\n  #?(:clj (.isFile (File. path))\n     :cljs (and (existsSync path)\n                (.isFile (statSync path)))))\n\n(connect/defresolver join-paths-resolver [{:keys [:file/path]}]\n  {:file/filename (join-paths path)})\n\n(connect/defresolver file-exists-resolver [{:keys [:file/filename]}]\n  {:file/exists? (file-exists? filename)})\n\n(connect/defresolver position-resolver [{:keys [:var/meta]}]\n  {::pco/output [:definition/row :definition/col]}\n\n  (when-let [line (:line meta)]\n    (cond-> {:definition/row (-> meta :line dec)}\n            (:column meta) (assoc :definition/col (-> meta :column dec)))))\n\n(defn- norm-result [file-name]\n  (let [os #?(:clj (System/getProperty \"os.name\")\n              :cljs (platform))]\n    (cond-> file-name\n            (and (re-find #\"(?i)^win\" os))\n            (str/replace-first #\"^/\" \"\"))))\n\n(connect/defresolver existing-filename [{:keys [:var/meta]}]\n  {::pco/output [:definition/filename]\n   ::pco/priority 3}\n\n  (when (file-exists? (:file meta))\n    {:definition/filename (-> meta :file norm-result)}))\n\n(defn- read-jar [clj jar-file-name]\n  (let [[jar path] (str/split jar-file-name #\"!/\" 2)\n        jar (clojure.string/replace-first jar #\"file:\" \"\")\n        t `(let [jar-file# (java.util.jar.JarFile. ::jar)\n                 ba# (java.io.ByteArrayOutputStream.)\n                 is# (.getInputStream jar-file# (.getJarEntry jar-file# ::path))]\n             (clojure.java.io/copy is# ba#)\n             (java.lang.String. (.toByteArray ba#)))\n        code (template t {::jar jar ::path path})]\n    (repl/eval clj code)))\n\n(connect/defresolver clojure-filename [{:keys [:repl/evaluator :var/meta\n                                               :repl/kind :repl/clj]}]\n  {::pco/input [:repl/evaluator :var/meta :repl/kind (pco/? :repl/clj)]\n   ::pco/output [:definition/filename\n                 {:definition/contents [:text/contents :text/range]}]}\n\n  (when-let [repl (case kind\n                   :clj evaluator\n                   :cljs clj\n                   nil)]\n    (p/let [code (template `(do\n                              (require 'clojure.java.io)\n                              (some->> :file\n                                       (.getResource (clojure.lang.RT/baseLoader))\n                                       .getPath))\n                           (select-keys meta [:file]))\n            {:keys [result]} (repl/eval repl code)\n            filename (norm-result result)]\n      (if (re-find #\"\\.jar!/\" filename)\n        (p/let [{:keys [result]} (read-jar repl filename)\n                pos [(-> meta (:line 1) dec) (-> meta (:column 1) dec)]]\n          {:definition/filename filename\n           :definition/contents {:text/contents result\n                                 :text/range [pos pos]}})\n        {:definition/filename filename}))))\n\n(connect/defresolver file-from-clr [{:keys [:repl/evaluator :var/meta :repl/kind]}]\n  {::pco/output [:definition/filename]}\n  (when (= :cljr kind)\n    (p/let [code (template `(some-> ::file\n                                    clojure.lang.RT/FindFile\n                                    str)\n                           {::file (:file meta)})\n            {:keys [result]} (repl/eval evaluator code)]\n      (when result\n        {:definition/filename (norm-result result)}))))\n\n(defn- extract-right-var [current-var contents]\n  (let [contents (or (:text/contents current-var) contents)\n        [_ var] (helpers/current-var (str contents) [0 0])]\n    (when (and var (= var contents))\n      contents)))\n\n(connect/defresolver resolver-for-ns-only\n  [{:keys [repl/evaluator text/contents text/current-var]}]\n\n  {::pco/input [:repl/evaluator (pco/? :text/current-var) (pco/? :text/contents)]\n   ::pco/output [:var/meta :definition/row :definition/col]}\n\n  (when-let [fqn (some-> (extract-right-var current-var contents) symbol)]\n    (when (-> fqn namespace nil?)\n      (p/let [code (template `(let [ns# (find-ns '::namespace-sym)\n                                     first-var# (some-> ns#\n                                                        ns-interns\n                                                        first\n                                                        second\n                                                        meta\n                                                        :file)\n                                     ns-meta# (meta ns#)]\n                                (cond-> ns-meta#\n                                        first-var# (assoc :file first-var#)))\n                             {::namespace-sym fqn})\n              {:keys [result]} (repl/eval evaluator code)\n              col (some-> result :column dec)]\n        (when result\n          (cond-> {:var/meta result\n                   :definition/row (dec (:line result 1))}\n                  col (assoc :definition/col col)))))))\n\n(connect/defresolver resolver-for-stacktrace [{:repl/keys [evaluator]\n                                               :ex/keys [function-name filename row]}]\n  {::pco/input [:repl/evaluator :ex/function-name :ex/filename (pco/? :ex/row)]\n   ::pco/output [:var/meta :definition/row]\n   ::pco/priority 20}\n\n  (p/let [ns-name (-> function-name (str/split #\"/\") first)\n          code (template `(let [n# (find-ns '::namespace-sym)]\n                            (->> n#\n                                 ns-interns\n                                 (some (fn [[_# res#]]\n                                         (let [meta# (meta res#)\n                                               file# (-> meta# :file str)]\n                                           (and (clojure.string/ends-with? file#\n                                                                           ::file-name)\n                                                (select-keys meta# [:file])))))))\n                         {::namespace-sym (symbol ns-name)\n                          ::file-name filename})\n          {:keys [result]} (repl/eval evaluator code)]\n    {:var/meta result\n     :definition/row row}))\n\n(connect/defresolver source-from-contents [inputs]\n  {::pco/input [{:definition/contents [:text/top-block]}]\n   ::pco/output [:definition/source]\n   ::pco/priority 1}\n\n  (when-let [source (-> inputs :definition/contents :text/top-block)]\n   {:definition/source source}))\n\n;; FIXME: Maybe this will not cache top-blocks from the same filename\n(connect/defresolver source-from-file [{:definition/keys [filename row col]}]\n  {::pco/input [:definition/filename :definition/row (pco/? :definition/col)]\n   ::pco/output [{:definition/source [:text/contents :text/range]}]}\n\n  (p/let [source (helpers/read-file filename)\n          top-blocks (helpers/top-blocks source)]\n    (when-let [[range text] (helpers/top-block-for top-blocks [row (or col 0)])]\n      {:definition/source {:text/contents text\n                           :text/range range}})))\n\n\n(def resolvers [join-paths-resolver file-exists-resolver position-resolver\n                existing-filename clojure-filename file-from-clr\n                resolver-for-ns-only resolver-for-stacktrace\n                source-from-contents source-from-file])\n"]}