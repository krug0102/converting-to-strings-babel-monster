{"version":3,"sources":["matcher_combinators/utils.cljc"],"mappings":";AAGA,sDAAA,tDAAOA,oHAAqBC;AAA5B,AAKW,SAAK,OAASA,oBACT,GAAK,AAACC,0BAAUD;;AAEhC,gCAAA,hCAAOE,wEAAKC;AAAZ,AAIW,OAACC,SAAYD;;AAExB;;;;gDAAA,hDAAeE,wGAGZC,MAAMC,SAASC;AAHlB,AAIE,0EAAA,jEAAK,AAACT,oDAAoBS,eACrB,CAAID,YAAS,CAAGC,SAAO,AAACN,8BAAII,cAC5B,CAAIC,YAAS,CAAGC,SAAO,AAACN,8BAAII;;AAEnC;;;uCAAA,vCAAeG,sFAEZC,KAAKC;AAFR,AAGE,2EAAKA,pDAAK,AAACC,+CAAOF,/DAAMG;;AAE1B;;;;yCAAA,zCAAeC,0FAGZJ,KAAKC;AAHR,AAIE,IAAAI,cAAkB,AAACU,qBAAW,AAACC,qBAAWhB,MAAMC;QAAhD,AAAAK,4CAAAD,YAAA,IAAA,hEAAOO;IAAPL,cAAA,AAAAD,4CAAAD,YAAA,IAAA;IAAAG,cAAA,AAAAC,cAAAF;IAAAG,gBAAA,AAAAP,gBAAAK;IAAAA,kBAAA,AAAAG,eAAAH;QAAAE,JAAUG;QAAVL,JAAcM;AAAd,AACE,OAACG,+CAAOL,EAAEE","names":["matcher-combinators.utils/processable-number?","v","cljs.core/infinite?","matcher-combinators.utils/abs","n","js/Math.abs","matcher-combinators.utils/within-delta?","delta","expected","actual","matcher-combinators.utils/find-first","pred","coll","cljs.core.filter","cljs.core/first","matcher-combinators.utils/remove-first","vec__147713","cljs.core.nth","vec__147716","seq__147717","cljs.core/seq","first__147718","cljs.core/next","x","y","z","cljs.core/split-with","cljs.core/complement","cljs.core.concat"],"sourcesContent":["(ns ^:no-doc matcher-combinators.utils\n  \"Internal use only. Subject (and likely) to change.\")\n\n(defn- processable-number? [v]\n  #?(:clj (or (decimal? v)\n              (and (number? v)\n                   (not (Double/isInfinite v))\n                   (not (Double/isNaN v))))\n     :cljs (and (number? v)\n                (not (infinite? v)))))\n\n(defn- abs [n]\n  #?(:clj (if (decimal? n)\n            (.abs n)\n            (Math/abs n))\n     :cljs (js/Math.abs n)))\n\n(defn ^:no-doc within-delta?\n  \"Internal use only. Subject to change and removal.\n  Supports the `within-delta` matcher.\"\n  [delta expected actual]\n  (and (processable-number? actual)\n       (>= expected (- actual (abs delta)))\n       (<= expected (+ actual (abs delta)))))\n\n(defn ^:no-doc find-first\n  \"Internal use only. Subject to change and removal.\"\n  [pred coll]\n  (->> coll (filter pred) first))\n\n(defn ^:no-doc remove-first\n  \"Internal use only. Subject to change and removal.\n  Similar to `remove` but stops after removing 1 element\"\n  [pred coll]\n  (let [[x [y & z]] (split-with (complement pred) coll)]\n    (concat x z)))\n"]}