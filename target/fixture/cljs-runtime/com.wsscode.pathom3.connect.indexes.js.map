{"version":3,"sources":["com/wsscode/pathom3/connect/indexes.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/map-spec-impl","G__158055","cljs.core/map?","cljs.spec.alpha.every_impl","cljs.spec.alpha.tuple_impl","G__158062","i__11949__auto__","v__11950__auto__","cljs.core.nth","G__158066","G__158071","G__158070","G__158069","cljs.core/set?","G__158073","cljs.spec.alpha/or-spec-impl","G__158074","cljs.core/coll?","com.wsscode.pathom3.connect.indexes/op-set","G__158075","G__158077","com.wsscode.pathom3.connect.indexes/merge-oir","a","b","p1__158079#","p2__158080#","cljs.core.merge_with","cljs.core/into","js/com","js/com.wsscode","js/com.wsscode.pathom3","js/com.wsscode.pathom3.connect","js/com.wsscode.pathom3.connect.indexes","js/com.wsscode.pathom3.connect.indexes.index-merger","method-table__4712__auto__","cljs.core.atom","prefer-table__4713__auto__","method-cache__4714__auto__","cached-hierarchy__4715__auto__","hierarchy__4716__auto__","cljs.core.get","fexpr__158081","cljs.core/MultiFn","cljs.core.symbol","com.wsscode.pathom3.connect.indexes/index-merger","k","_","cljs.core/reduce-kv","m","v","js/Error","cljs.core/contains?","cljs.core.assoc","com.wsscode.misc.coll.merge_grow","com.wsscode.pathom3.connect.indexes/merge-indexes","ia","ib","idx","p1__158105#","cljs.core.update","com.wsscode.pathom3.connect.indexes/input-set","input","cljs.core.into","cljs.core.map","attr","com.wsscode.misc.coll/map-vals","p__158109","map__158110","cljs.core/--destructure-map","com.wsscode.pathom3.connect.indexes/index-attributes","op-name","requires","provides","cljs.core/keys","p1__158106#","cljs.core.remove","op-group","attr-provides","cljs.core/zipmap","cljs.core.repeat","input-count","cljs.core/count","<>","cljs.core.reduce","in-attr","cljs.core.partial","cljs.core/merge-with","com.wsscode.misc.coll/merge-grow","G__158111","out-attr","cljs.core/vector?","cljs.core/peek","cljs.core/pop","com.wsscode.pathom3.connect.indexes/register-resolver","indexes","resolver","map__158113","output","op-config","com.wsscode.pathom3.connect.operation/operation-config","input'","root-props","com.wsscode.pathom3.format.eql/query-root-properties","com.wsscode.pathom3.connect.indexes/resolver","com.wsscode.pathom3.format.shape-descriptor/query->shape-descriptor","G__158114","cljs.core.update_in","com.wsscode.misc.coll/sconj","com.wsscode.pathom3.connect.indexes/register-mutation","mutation","map__158117","params","com.wsscode.pathom3.connect.indexes/mutation","attribute","G__158120","G__158122","p__158123","map__158124","index-resolvers","resolver-name","p__158125","map__158126","com.wsscode.pathom3.connect.indexes/resolver-config","G__158127","com.wsscode.pathom3.connect.indexes/resolver-provides","env","resolver-sym","com.wsscode.pathom3.connect.indexes/resolver-optionals","com.wsscode.pathom3.connect.indexes/dynamic-resolver?","p__158128","map__158129","index-mutations","mutation-name","p__158130","map__158131","com.wsscode.pathom3.connect.indexes/mutation-config","G__158132","var_args","G__158134","com.wsscode.pathom3.connect.indexes/register","operation-or-operations","com.wsscode.pathom3.connect.indexes.register","operation-or-operations-or-indexes","com.wsscode.pathom3.connect.operation/operation?","G__158135","cljs.core/Keyword","com.wsscode.pathom3.connect.operation/operation-type","cljs.core/sequential?","cljs.core.ex_info","p__158136","map__158137","com.wsscode.pathom3.connect.indexes/attribute-available?","index-oir","p__158140","map__158141","com.wsscode.pathom3.connect.indexes/reachable-attributes*","index-io","queue","attributes","cljs.core/seq","vec__158142","seq__158143","first__158144","cljs.core/first","cljs.core/next","rest","attrs","cljs.core.conj_BANG_","p1__158139#","p__158148","map__158149","com.wsscode.pathom3.connect.indexes/reachable-attributes-for-groups*","groups","cljs.core.comp","p1__158145#","cljs.core.filter","cljs.core/every?","x","p1__158146#","cljs.core.mapcat","p1__158147#","p__158151","map__158152","com.wsscode.pathom3.connect.indexes/attrs-multi-deps","index-attributes","p1__158150#","cljs.core.get_in","p__158153","map__158154","com.wsscode.pathom3.connect.indexes/reachable-attributes","available-data","cljs.core/persistent!","cljs.core/transient","group-reaches","new-attrs","p__158156","map__158157","com.wsscode.pathom3.connect.indexes/reachable-paths*","paths","vec__158158","seq__158159","first__158160","vec__158161","sub","com.wsscode.pathom3.format.shape-descriptor/merge-shapes","p1__158155#","cljs.core/key","p__158166","map__158167","com.wsscode.pathom3.connect.indexes/reachable-paths-for-groups*","group","com.wsscode.pathom3.format.shape_descriptor.merge_shapes","p1__158164#","cljs.core/filterv","p1__158165#","com.wsscode.misc.coll/remove-keys","p__158168","map__158169","com.wsscode.pathom3.connect.indexes/reachable-paths","com.wsscode.pathom3.connect.indexes/attribute-reachable?"],"sourcesContent":["(ns com.wsscode.pathom3.connect.indexes\n  (:require\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.guardrails.core :refer [<- => >def >defn >fdef ? |]]\n    [com.wsscode.misc.coll :as coll]\n    [com.wsscode.pathom3.attribute :as p.attr]\n    [com.wsscode.pathom3.connect.operation :as pco]\n    [com.wsscode.pathom3.format.eql :as pfse]\n    [com.wsscode.pathom3.format.shape-descriptor :as pfsd]))\n\n(>def ::indexes (s/keys))\n(>def ::index-attributes map?)\n(>def ::index-resolvers (s/map-of ::pco/op-name ::pco/resolver))\n(>def ::index-mutations (s/map-of ::pco/op-name ::pco/mutation))\n\n(>def ::index-oir\n  \"Index: Output -> Input -> Resolver\"\n  (s/map-of ::p.attr/attribute\n            (s/map-of ::pfsd/shape-descriptor (s/coll-of ::pco/op-name :kind set?))))\n\n(>def ::index-io \"Index: Input -> Output\"\n  (s/map-of ::p.attr/attributes-set ::pfsd/shape-descriptor))\n\n(>def ::operations\n  (s/or :single ::pco/operation\n        :indexes ::indexes\n        :many (s/coll-of ::operations)))\n\n(def op-set (s/coll-of ::pco/op-name :kind set?))\n\n(>def ::attr-id ::p.attr/attribute)\n(>def ::attr-combinations (s/coll-of ::pco/input :kind set?))\n(>def ::attr-input-in op-set)\n(>def ::attr-output-in op-set)\n(>def ::attr-mutation-output-in op-set)\n(>def ::attr-mutation-param-in op-set)\n\n(declare resolver mutation)\n\n(defn merge-oir\n  \"Merge ::index-oir maps.\"\n  [a b]\n  (merge-with #(merge-with into % %2) a b))\n\n(defmulti index-merger\n  \"This is an extensible gateway so you can define different strategies for merging different\n  kinds of indexes.\"\n  (fn [k _ _] k))\n\n(defmethod index-merger ::index-resolvers [_ a b]\n  (reduce-kv\n    (fn [m k v]\n      (assert (not (contains? m k))\n        (str \"Tried to register duplicated resolver: \" k))\n      (assoc m k v))\n    a\n    b))\n\n(defmethod index-merger ::index-mutations [_ a b]\n  (reduce-kv\n    (fn [m k v]\n      (assert (not (contains? m k))\n        (str \"Tried to register duplicated mutation: \" k))\n      (assoc m k v))\n    a\n    b))\n\n(defmethod index-merger ::index-oir [_ a b]\n  (merge-oir a b))\n\n(defmethod index-merger :default [_ a b]\n  (coll/merge-grow a b))\n\n(>defn merge-indexes\n  \"Merge index ib in index ia.\"\n  [ia ib]\n  [::indexes ::indexes => ::indexes]\n  (reduce-kv\n    (fn [idx k v]\n      (if (contains? idx k)\n        (update idx k #(index-merger k % v))\n        (assoc idx k v)))\n    ia ib))\n\n(defn input-set [input]\n  (into #{}\n        (map (fn [attr]\n               (if (map? attr)\n                 (coll/map-vals input-set attr)\n                 attr)))\n        input))\n\n(defn index-attributes [{::pco/keys [op-name requires provides]}]\n  (let [input         (into #{} (keys requires))\n        provides      (remove #(contains? input %) (keys provides))\n        op-group      #{op-name}\n        attr-provides (zipmap provides (repeat op-group))\n        input-count   (count input)]\n    (as-> ^:com.wsscode.pathom3.connect.runner/map-container? {} <>\n      ; inputs\n      (reduce\n        (fn [idx in-attr]\n          (update idx in-attr (partial merge-with coll/merge-grow)\n            {::attr-id       in-attr\n             ::attr-provides attr-provides\n             ::attr-input-in op-group}))\n        <>\n        (case input-count\n          0 [#{}]\n          1 input\n          [input]))\n\n      ; combinations\n      (if (> input-count 1)\n        (reduce\n          (fn [idx in-attr]\n            (update idx in-attr (partial merge-with coll/merge-grow)\n              {::attr-id           in-attr\n               ::attr-combinations #{input}\n               ::attr-input-in     op-group}))\n          <>\n          input)\n        <>)\n\n      ; provides\n      (reduce\n        (fn [idx out-attr]\n          (if (vector? out-attr)\n            (update idx (peek out-attr) (partial merge-with coll/merge-grow)\n              {::attr-id        (peek out-attr)\n               ::attr-reach-via {(into [input] (pop out-attr)) op-group}\n               ::attr-output-in op-group})\n\n            (update idx out-attr (partial merge-with coll/merge-grow)\n              {::attr-id        out-attr\n               ::attr-reach-via {input op-group}\n               ::attr-output-in op-group})))\n        <>\n        provides)\n\n      ; leaf / branches\n      #_(reduce\n          (fn [idx {:keys [key children]}]\n            (cond-> idx\n              key\n              (update key (partial merge-with coll/merge-grow)\n                {(if children ::attr-branch-in ::attr-leaf-in) op-group})))\n          <>\n          (if (map? output)\n            (mapcat #(tree-seq :children normalized-children (eql/query->ast %)) (vals output))\n            (tree-seq :children :children (eql/query->ast output)))))))\n\n(defn- register-resolver\n  \"Low level function to add resolvers to the index. This function adds the resolver\n  configuration to the index set, adds the resolver to the ::pc/index-resolvers, add\n  the output to input index in the ::pc/index-oir and the reverse index for auto-complete\n  to the index ::pc/index-io.\"\n  ([indexes resolver]\n   (let [{::pco/keys [op-name output requires] :as op-config} (pco/operation-config resolver)\n         input'     (into #{} (keys requires))\n         root-props (pfse/query-root-properties output)]\n     (assert (nil? (com.wsscode.pathom3.connect.indexes/resolver indexes op-name))\n       (str \"Tried to register duplicated resolver: \" op-name))\n     (merge-indexes indexes\n       {::index-resolvers  ^:com.wsscode.pathom3.connect.runner/map-container? {op-name resolver}\n        ::index-attributes (index-attributes op-config)\n        ::index-io         {input' (pfsd/query->shape-descriptor output)}\n        ::index-oir        (reduce (fn [indexes out-attr]\n                                     (cond-> indexes\n                                       (not (contains? requires out-attr))\n                                       (update-in [out-attr requires] coll/sconj op-name)))\n                             {}\n                             root-props)}))))\n\n(defn- register-mutation\n  \"Low level function to add a mutation to the index. For mutations, the index-mutations\n  and the index-attributes are affected.\"\n  ([indexes mutation]\n   (let [{::pco/keys [op-name params output]} (pco/operation-config mutation)]\n     (assert (nil? (com.wsscode.pathom3.connect.indexes/mutation indexes op-name))\n       (str \"Tried to register duplicated mutation: \" op-name))\n     (merge-indexes indexes\n       {::index-mutations  ^:com.wsscode.pathom3.connect.runner/map-container? {op-name mutation}\n        ::index-attributes (as-> {} <>\n                             (reduce\n                               (fn [idx attribute]\n                                 (update idx attribute (partial merge-with coll/merge-grow)\n                                   {::attr-id           attribute\n                                    ::attr-mutation-param-in #{op-name}}))\n                               <>\n                               (some-> params pfse/query-root-properties))\n\n                             (reduce\n                               (fn [idx attribute]\n                                 (update idx attribute (partial merge-with coll/merge-grow)\n                                   {::attr-id            attribute\n                                    ::attr-mutation-output-in #{op-name}}))\n                               <>\n                               (some-> output pfse/query-root-properties)))}))))\n\n(>defn resolver\n  [{::keys [index-resolvers]} resolver-name]\n  [(s/keys :opt [::index-resolvers]) ::pco/op-name\n   => (? ::pco/resolver)]\n  (get index-resolvers resolver-name))\n\n(>defn resolver-config\n  \"Given a indexes map and a resolver sym, returns the resolver configuration map.\"\n  [{::keys [index-resolvers]} resolver-name]\n  [(s/keys :opt [::index-resolvers]) ::pco/op-name\n   => (? ::pco/operation-config)]\n  (some-> (get index-resolvers resolver-name)\n          (pco/operation-config)))\n\n(>defn resolver-provides\n  \"Get the resolver provides from the resolver configuration map\"\n  [env resolver-sym]\n  [(s/keys :opt [::index-resolvers]) ::pco/op-name\n   => (? ::pco/provides)]\n  (-> (resolver-config env resolver-sym)\n      ::pco/provides))\n\n(>defn resolver-optionals\n  \"Get the resolver provides from the resolver configuration map\"\n  [env resolver-sym]\n  [(s/keys :opt [::index-resolvers]) ::pco/op-name\n   => (? ::pco/optionals)]\n  (-> (resolver-config env resolver-sym)\n      ::pco/optionals))\n\n(defn dynamic-resolver?\n  [env resolver-name]\n  (::pco/dynamic-resolver? (resolver-config env resolver-name)))\n\n(>defn mutation\n  [{::keys [index-mutations]} mutation-name]\n  [(s/keys :opt [::index-mutations]) ::pco/op-name\n   => (? ::pco/mutation)]\n  (get index-mutations mutation-name))\n\n(>defn mutation-config\n  \"Given a indexes map and a mutation sym, returns the mutation configuration map.\"\n  [{::keys [index-mutations]} mutation-name]\n  [(s/keys :opt [::index-mutations]) ::pco/op-name\n   => (? ::pco/operation-config)]\n  (some-> (get index-mutations mutation-name)\n          (pco/operation-config)))\n\n(>defn register\n  \"Add an operation to the indexes. The operation can be either a Resolver or a Mutation.\"\n  ([operation-or-operations]\n   [::operations => ::indexes]\n   (register {} operation-or-operations))\n  ([indexes operation-or-operations-or-indexes]\n   [::indexes ::operations => ::indexes]\n   (cond\n     (pco/operation? operation-or-operations-or-indexes)\n     (case (pco/operation-type operation-or-operations-or-indexes)\n       ::pco/operation-type-resolver\n       (register-resolver indexes operation-or-operations-or-indexes)\n\n       ::pco/operation-type-mutation\n       (register-mutation indexes operation-or-operations-or-indexes))\n\n     (sequential? operation-or-operations-or-indexes)\n     (reduce register indexes operation-or-operations-or-indexes)\n\n     (map? operation-or-operations-or-indexes)\n     (merge-indexes indexes operation-or-operations-or-indexes)\n\n     :else\n     (throw (ex-info \"Invalid type to register\" {::operations operation-or-operations-or-indexes})))))\n\n(>defn attribute-available?\n  \"Check if some attribute is known in the index, this checks uses the index-oir.\"\n  [{::keys [index-oir]} k]\n  [(s/keys :req [::index-oir]) ::p.attr/attribute\n   => boolean?]\n  (contains? index-oir k))\n\n(defn reachable-attributes*\n  [{::keys [index-io] :as env} queue attributes]\n  (if (seq queue)\n    (let [[attr & rest] queue\n          attrs (conj! attributes attr)]\n      (recur env\n        (into rest (remove #(contains? attrs %)) (-> index-io (get #{attr}) keys))\n        attrs))\n    attributes))\n\n(defn reachable-attributes-for-groups*\n  [{::keys [index-io]} groups attributes]\n  (into #{}\n        (comp (filter #(every? (fn [x] (contains? attributes x)) %))\n              (mapcat #(-> index-io (get %) keys))\n              (remove #(contains? attributes %)))\n        groups))\n\n(defn attrs-multi-deps\n  [{::keys [index-attributes]} attrs]\n  (into #{} (mapcat #(get-in index-attributes [% ::attr-combinations])) attrs))\n\n(>defn reachable-attributes\n  \"Discover which attributes are available, given an index and a data context.\n\n  Also includes the attributes from available-data.\"\n  [{::keys [index-io] :as env} available-data]\n  [(s/keys) map?\n   => set?]\n  (let [queue (-> #{}\n                  (into (keys (get index-io #{})))\n                  (into (keys available-data)))]\n    (loop [attrs         (persistent! (reachable-attributes* env queue (transient #{})))\n           group-reaches (reachable-attributes-for-groups* env (attrs-multi-deps env attrs) attrs)]\n      (if (seq group-reaches)\n        (let [new-attrs (persistent! (reachable-attributes* env group-reaches (transient attrs)))]\n          (recur\n            new-attrs\n            (reachable-attributes-for-groups* env (attrs-multi-deps env new-attrs) new-attrs)))\n        attrs))))\n\n(defn reachable-paths*\n  [{::keys [index-io] :as env} queue paths]\n  (if (seq queue)\n    (let [[[attr sub] & rest] queue\n          attrs (update paths attr pfsd/merge-shapes sub)]\n      (recur env\n        (into rest\n              (remove #(contains? attrs (key %)))\n              (get index-io #{attr}))\n        attrs))\n    paths))\n\n(defn reachable-paths-for-groups*\n  [{::keys [index-io]} groups attributes]\n  (->> (reduce\n         (fn [group attr]\n           (pfsd/merge-shapes group (get index-io attr)))\n         {}\n         (filterv #(every? (fn [x] (contains? attributes x)) %) groups))\n       (coll/remove-keys #(contains? attributes %))))\n\n(>defn reachable-paths\n  \"Discover which paths are available, given an index and a data context.\n\n  Also includes the attributes from available-data.\"\n  [{::keys [index-io] :as env} available-data]\n  [(s/keys) ::pfsd/shape-descriptor\n   => ::pfsd/shape-descriptor]\n  (let [queue (pfsd/merge-shapes (get index-io #{}) available-data)]\n    (loop [paths         (reachable-paths* env queue {})\n           group-reaches (reachable-paths-for-groups* env (attrs-multi-deps env (keys paths)) paths)]\n      (if (seq group-reaches)\n        (let [new-attrs (reachable-paths* env group-reaches paths)]\n          (recur\n            new-attrs\n            (reachable-paths-for-groups* env (attrs-multi-deps env (keys new-attrs)) new-attrs)))\n        paths))))\n\n(>defn attribute-reachable?\n  \"Discover which attributes are available, given an index and a data context.\"\n  [env available-data attr]\n  [(s/keys) map? ::p.attr/attribute\n   => boolean?]\n  (contains? (reachable-attributes env available-data) attr))\n"]}