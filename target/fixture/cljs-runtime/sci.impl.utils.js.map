{"version":3,"sources":["sci/impl/utils.cljc"],"mappings":";AAQA,+CAAA,qGAAA,pJAACA;AAED,iCAAA,jCAAMC,0EAAWC;AAAjB,AACE,oCAAA,3BAAI,OAASA,sBAAG,OAASA,oBAAG,cAAAC,bAAUD;;AAExC,kCAAA,lCAAME,4EACHC;AADH,AAEE,OAACC,kDACAD,IACA,WAAKE;AAAL,AACE,uDAAA,+DAAA,/GAACC,8CAAMD;;;AAEZ,6BAAA,7BAAME,kEAAOP;AAAb,AACE,IAAAQ,YAAQR;IAARQ,gBAAA,EAAA,CAAAA,aAAA,OAAA,KAAA,eAAAA,fAAUC;AAAV,AAAA,GAAA,CAAAD,iBAAA;AAAA;;AAAA,OAAA,6FAAAA;;;AAEF,AAAKE,qCAAuCC;AAE5C,AAAA,8BAAA,sCAAAC,pEAAME;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,4DAAA,5DAAMD;AAAN,AACM,OAACZ,gCAAiB,AAACc;;;AADzB,CAAA,4DAAA,5DAAMF,uEAEFG;AAFJ,AAEY,OAACf,gCAAiB,AAACc,+CAAOC;;;AAFtC,CAAA,sDAAA,tDAAMH;;AAAN,AAIA,gCAAA,hCAAMI,wEACHC;AADH,AAEE,OAACf,kDACAe,KACA,WAAKd;AAAL,AACE,uDAAA,+DAAA,/GAACC,8CAAMD;;;AAEZ,2BAAA,3BAAMe,8DACHD;AADH,AAEE,OAACf,kDACAe,KACA,WAAKd;AAAL,AACE,uDAAA,+DAAA,/GAACC,8CAAMD;;;AAEZ,AAAA,2CAAA,mDAAAO,9FAAMU;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAP,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yEAAA,zEAAMO,oFACFC,IAAIC;AADR,AACc,uFAAA,hFAACC,uEAA0BF,IAAIC;;;AAD7C,CAAA,yEAAA,zEAAMF,oFAEFC,IAAIC,KAAKE;AAFb,AAGG,IAAAC,cAA8B,AAAClB,eAAKe;IAApCG,kBAAA,AAAAC,4BAAAD;IAAAE,OAAA,AAAAC,4CAAAH,gBAAA;IAAAI,SAAA,AAAAD,4CAAAH,gBAAA;IACMJ,UAAI,kDAAA,LAAKA,aAEA,iBAAAS,qBAAA,AAAAC,gBAAcE;AAAd,AAAA,oBAAAH;AAAA,AAAA,QAAAA,JAAWE;AAAX,AACE,uDAAA,HAAKA;;AADP;;KAFL,0DAAA,gEAAA,tEAKKL,8DAAiBE;AANhC,AAOE,MAAO,AAACK,gDAAQb,QAAI,uGAAA,2CAAA,qDAAA,4DAAA,yDAAA,5TAACc,uTACaR,8DACEE,eAAQL;;;AAZjD,CAAA,mEAAA,nEAAMJ;;AAAN,AAcA,oCAAA,pCAAegB;AAEf,+CAAA,/CAAMC,sGAA+BC,IAAeC,EAAEC;AAAtD,AACE,GAAA,AAAAC,cAAQL;AACN,IAAMM,SACoB,AAAWH;AADrC,AAEE,oBAAI,iBAAAI,oBAAKD;AAAL,AAAA,oBAAAC;AAAY,6CAAA,tCAACC,+BAAcF;;AAA3BC;;;AACF,MAAOJ;;AACP,IAAAM,qBACyD,AAACtC,eAAKiC;IAD/DK,yBAAA,AAAAnB,4BAAAmB;IAAAlB,cAAA,AAAAC,4CAAAiB,uBAAA,oDAAuC,AAAA,kFAAOP;IAA9CT,gBAAA,AAAAD,4CAAAiB,uBAAA,yDACyC,AAAA,uFAASP;AADlD,AAEE,oBAAI,iBAAAK,oBAAKhB;AAAL,AAAA,oBAAAgB;AAAUd;;AAAVc;;;AACF,IAAMxC,WAAE,yFAAA,5CAAKuC,QACA,0BAAA,AAAA,IAAA,ZAAMA,yBAEN,iBAAAZ,qBAAA,AAAAC,gBAAcE;AAAd,AAAA,oBAAAH;AAAA,AAAA,QAAAA,JAAWE;AAAX,AACE,uDAAA,HAAKA;;AADP;;KAHL,iEAAA,uEAAA,pFAMKL,qEAAiBE;IACxBiB,uBACA,iBAAMC,IAAE,AAACC,kBAAQT;AAAjB,AACE,OAACL,gDAAQ/B,SAAE,uGAAA,2CAAA,qDAAA,4DAAA,gEAAA,uEAAA,1YAACgC,uTAEOR,qEACEE,yEACC1B,iBAAG4C,QAAGR;;AAbpC,AAcE,MAAOO;;AACT,MAAOP;;;;AACb,MAAOA;;AACT,MAAOA;;;AAEX,AAAA;;;iCAAA,yCAAA7B,1EAAM4C;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,2BAAA,AAAA;AAAA,AAAA,IAAAC,yBAAA;;AAAA,AAAA,GAAA,CAAAA,yBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,gBAAA,CAAAA,yBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,sEAAA,tEAAME,iFAEHO,IAAIC,EAAIC;AAFX,AAGE,oBAAI,iBAAApB,oBACc,EAAA,GAAA,QAAA,SAAA,EAAA,EAAA,CAAA,0CAAA,eAAA,CAAAqB,gCAAA,6BAAA,KAAA,OAAA,xJAAuBH,qBAAAA,0FAAAA;AADrC,AAAA,GAAAlB;AAEK,OAACpC,eAAKsD;;AAFXlB;;;AAGF,OAACsB,8CAAMC,oBAAUL,IAAIC,EAAEC;;AACvBF;;;;AAPJ,CAAA,yDAAA,zDAAMP;;AAAN;AAAA,CAAA,mDAAA,WAAAC,9DAAMD;AAAN,AAAA,IAAAE,YAAA,AAAAC,gBAAAF;IAAAA,gBAAA,AAAAG,eAAAH;IAAAI,YAAA,AAAAF,gBAAAF;IAAAA,gBAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAK,qBAAA;AAAA,AAAA,OAAAA,wDAAAJ,UAAAG,UAAAJ;;;AAAA,AASA;;;4BAAA,5BAAMY,gEAEHN,IAAId;AAFP,AAGE,oBAAI,iBAAAJ,oBAAKI;AAAL,AAAA,oBAAAJ;AACgB,GAAA,GAAA,QAAA,PAAuBkB;AAAvB,GAAA,EAAA,CAAA,0CAAA,eAAA,CAAAG,gCAAA,1FAAuBH,0FAAAA;AAAvB;;AAAA;;;AAAA;;;AADhBlB;;;AAEF,IAAAyB,qBAAW,AAAC7D,eAAKsD;AAAjB,AAAA,oBAAAO;AAAA,QAAAA,JAASjE;AAAT,AACE,OAACkE,oBAAUR,IAAI,AAAC1B,uGAAMhC,EAAE4C;;AACxBc;;;AACFA;;;AAEJ,+BAAA,/BAAMS,sEAAerE;AAArB,AACE,IAAAsE,YAAM,AAACC,oBAAUvE;AAAjB,AAAA,QAAAsE;KAAA;KAAA;AAC+B,OAACE,+CAAO,AAACC,eAAKzE;;;;AAC3CA;;;;AAEJ,AAAK0E,8BAAa,2EAAA,2CAAA,oDAAA,1KAACN,oBAAU,+CAAA,/CAACI;AAC9B,AAAKG,+BAAc,4EAAA,2CAAA,oDAAA,3KAACP,oBAAU,+CAAA,/CAACI;AAE/B,4BAAA,5BAAMI,gEACHC,MAAMC;AADT,AAEE,oBACE,AAAA,6FAAc,AAACxE,eAAKwE;AAAOA;;AAD7B,GAEE,AAACC,sBAAMD;AAAM,OAACV,oBAAU,AAACJ,8CAAMgB,eAAK,AAACC,4CAAIJ,MAAMC,OAChC,AAACxE,eAAKwE;;AAHvB,GAIwD,AAACI,2BAAWJ;AAEzD,YAAAK,mBAAW,iBAAAC,YAAO,AAACC,cAAIP;AAAZ,AAAA,kFAAAM,6BAAAA,vGAACP,sCAAAA,iDAAAA;KAAkB,iBAAAS,YAAO,AAACC,cAAIT;AAAZ,AAAA,kFAAAQ,6BAAAA,vGAACT,sCAAAA,iDAAAA;KAA/B;;AANX,GAOE,AAACW,qBAAKV;AAAM,OAACV,oBAAU,AAACqB,8CAAM,AAACR,4CAAIJ,MAAMC,OAC3B,AAACxE,eAAKwE;;AARtB,GAUW,AAACY,wBAAQZ;AAClB,OAACa,+CAAO,WAAKC,EAAE/F;AAAP,AAAU,OAACgG,6CAAKD,EAAE,CAACf,sCAAAA,yCAAAA,LAAMhF,qBAAAA;GAAKiF,KAAKA;;AAX7C,GAYE,AAACgB,sBAAMhB;AAAM,OAACiB,6CAAK,AAACC,gBAAMlB,MAAM,AAACG,4CAAIJ,MAAMC;;AAZ7C,AAaQA;;;;;;;;;AAEV;;;yBAAA,zBAAMmB,0DAEHpC,EAAEiB;AAFL,AAGE,OAACF,0BAAM,AAACsB,gDAAQD,uBAAQpC,GAAG,CAACA,kCAAAA,wCAAAA,RAAEiB,oBAAAA;;AAEhC;;;;;kCAAA,lCAAMqB,4EAIHC,IAAIC,OAAOC,cAAQC;AAJtB,AAKE,gBAAA,AAAAzE,ZAAM0E,4BAAMJ;IACNK,SAAO,yDAAA,mFAAA,5IAACC,+CAAOF,+JAAkBH;AADvC,AAEE,IAAAM,mBAAI,AAAA,gFAAMF;AAAV,AAAA,oBAAAE;AAAAA;;AACI,oBAAM,iBAAAA,uBAAIF;AAAJ,AAAA,oBAAAE;AAAAA;;AAAWL;;;AAAjB,AACE,IAAMM,SAAO,AAACC,gCAAoBR,OAAOE;AAAzC,AACE,0EAAA,mFAAA,yEAAA,tOAACO,mDAAMV,IAAIW,wKAAsBV,iEAAaO;;AAC9CA;;AAHJ;;;;AAKR,qCAAA,rCAAMI,kFAAgB3E,IAAIgE,OAAOE;AAAjC,AACE,IAAMH,MAAI,AAAA,kFAAM/D;IACVkE,eAAS,AAACrE,uGAAM,AAAC5B,eAAK+F,QAAQE;IAC9BK,SAAO,2CAAA,3CAACT,gCAAiBC,IAAIC,YAAYE;AAF/C,AAGE,OAACU,sBAASC,yBAAgBN;;AAE9B,AAAKO,iCAAgB,yBAAA,zBAACC;AACtB,AAAKC,oCAAmB,yBAAA,zBAACD;AACzB,AAAKE,gCAAe,yBAAA,zBAACF;AACrB,AAAKG,oCAAmB,yBAAA,zBAACH;AACzB,AAAKI,kCAAiB,yBAAA,zBAACJ;AAEvB;;;;4BAAA,5BAAMK,gEAGHC,KAAKC;AAHR,AAIE,YAAAC,kBAAA,KAAA;AAAA,AACC,IAAA/F,qBAAa,AAACiG,cAAIH;AAAlB,AAAA,GAAA9F;AAAA,AAAA,QAAAA,JAAWgG;AAAX,AACE,IAAME,MAAI,AAACvE,gBAAMqE;IACXhE,IAAE,AAACmE,qBAAWN;IACdO,MAAI,AAACC,eAAKH,IAAI,mDAAA,WAAAI,9DAACC;AAAD,AAAa,SAAAD,FAACtE;GAAK,AAACJ,eAAKoE;AAF7C,AAGE,OAACK,eAAKD,IAAI,iBAAAI,YAAYX;IAAZY,YAAiB,KAAAV,kBAAA,KAAA;AAAA,AAAU,OAACW,6CAAK,AAACC,gBAAMP,KAAKJ;GAA5B,KAAA;AAAjB,AAAA,0HAAAQ,UAAAC,iDAAAD,UAAAC,vLAACb,0DAAAA,+EAAAA;;;AAJf;;GADD,KAAA","names":["cljs.core.derive","sci.impl.utils/constant?","x","cljs.core/Keyword","sci.impl.utils/mark-resolve-sym","sym","cljs.core.vary_meta","m","cljs.core.assoc","sci.impl.utils/eval?","G__154122","cljs.core/meta","sci.impl.utils/kw-identical?","cljs.core/keyword-identical?","var_args","G__154126","sci.impl.utils/gensym*","js/Error","cljs.core.gensym","prefix","sci.impl.utils/mark-eval-call","expr","sci.impl.utils/mark-eval","G__154133","sci.impl.utils/throw-error-with-location","msg","iobj","sci.impl.utils.throw_error_with_location","data","map__154134","cljs.core/--destructure-map","line","cljs.core.get","column","temp__5753__auto__","cljs.core/deref","v","sci.impl.vars/current-file","cljs.core.ex_info","cljs.core.merge","sci.impl.utils/*in-try*","sci.impl.utils/rethrow-with-location-of-node","ctx","e","node","cljs.core/not","ex-msg","and__4221__auto__","clojure.string/includes?","map__154144","new-exception","d","cljs.core/ex-data","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","sci.impl.utils/vary-meta*","seq154145","G__154146","cljs.core/first","cljs.core/next","G__154147","self__4816__auto__","obj","f","args","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/vary-meta","sci.impl.utils/merge-meta","temp__5751__auto__","cljs.core/with-meta","sci.impl.utils/strip-core-ns","G__154150","cljs.core/namespace","cljs.core.symbol","cljs.core/name","sci.impl.utils/allowed-loop","sci.impl.utils/allowed-recur","sci.impl.utils/walk*","inner","form","cljs.core/list?","cljs.core/list","cljs.core.map","cljs.core/map-entry?","cljs.core/MapEntry","G__154151","cljs.core/key","G__154152","cljs.core/val","cljs.core/seq?","cljs.core.doall","cljs.core/record?","cljs.core.reduce","r","cljs.core.conj","cljs.core/coll?","cljs.core.into","cljs.core/empty","sci.impl.utils/prewalk","cljs.core.partial","sci.impl.utils/namespace-object","env","ns-sym","create?","attr-map","env*","ns-map","cljs.core.get_in","or__4223__auto__","ns-obj","sci.impl.vars/->SciNamespace","cljs.core.swap_BANG_","cljs.core/assoc-in","sci.impl.utils/set-namespace!","sci.impl.types/setVal","sci.impl.vars/current-ns","sci.impl.utils/eval-form-state","cljs.core/volatile!","sci.impl.utils/eval-require-state","sci.impl.utils/eval-use-state","sci.impl.utils/eval-resolve-state","sci.impl.utils/eval-refer-state","sci.impl.utils/split-when","pred","coll","cljs.core/LazySeq","s","cljs.core/seq","fst","cljs.core/complement","run","cljs.core/cons","p1__154153#","cljs.core.take_while","G__154155","G__154156","cljs.core.drop","cljs.core/count"],"sourcesContent":["(ns sci.impl.utils\n  {:no-doc true}\n  (:require [clojure.string :as str]\n            [sci.impl.types :as t]\n            [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(derive :sci.error/realized-beyond-max :sci/error)\n\n(defn constant? [x]\n  (or (number? x) (string? x) (keyword? x)))\n\n(defn mark-resolve-sym\n  [sym]\n  (vary-meta\n   sym\n   (fn [m]\n     (assoc m :sci.impl/op :resolve-sym))))\n\n(defn eval? [x]\n  (some-> x meta :sci.impl/op))\n\n(def kw-identical? #?(:clj identical? :cljs keyword-identical?))\n\n(defn gensym*\n  ([] (mark-resolve-sym (gensym)))\n  ([prefix] (mark-resolve-sym (gensym prefix))))\n\n(defn mark-eval-call\n  [expr]\n  (vary-meta\n   expr\n   (fn [m]\n     (assoc m :sci.impl/op :call))))\n\n(defn mark-eval\n  [expr]\n  (vary-meta\n   expr\n   (fn [m]\n     (assoc m :sci.impl/op :eval))))\n\n(defn throw-error-with-location\n  ([msg iobj] (throw-error-with-location msg iobj {}))\n  ([msg iobj data]\n   (let [{:keys [:line :column]} (meta iobj)\n         msg (str msg\n                  \" [at \"\n                  (when-let [v @vars/current-file]\n                    (str v \", \"))\n                  \"line \"\n                  line \", column \" column\"]\") ]\n     (throw (ex-info msg (merge {:type :sci/error\n                                 :line line\n                                 :column column} data))))))\n\n(def ^:dynamic *in-try* false)\n\n(defn rethrow-with-location-of-node [ctx ^Throwable e node]\n  (if-not *in-try*\n    (let [ex-msg (or #?(:clj (or (.getMessage e))\n                        :cljs (.-message e)))]\n      (if (and ex-msg (str/includes? ex-msg \"[at\"))\n        (throw e)\n        (let [{:keys [:line :column] :or {line (:line ctx)\n                                          column (:column ctx)}} (meta node)]\n          (if (and line column)\n            (let [m (str ex-msg\n                         (when ex-msg \" \")\n                         \"[at \"\n                         (when-let [v @vars/current-file]\n                           (str v \", \"))\n                         \"line \"\n                         line \", column \" column\"]\")\n                  new-exception\n                  (let [d (ex-data e)]\n                    (ex-info m (merge\n                                {:type :sci/error\n                                 :line line\n                                 :column column\n                                 :message m} d) e))]\n              (throw new-exception))\n            (throw e))))\n      (throw e))\n    (throw e)))\n\n(defn vary-meta*\n  \"Only adds metadata to obj if d is not nil and if obj already has meta\"\n  [obj f & args]\n  (if (and #?(:clj (instance? clojure.lang.IObj obj)\n              :cljs (implements? IWithMeta obj))\n           (meta obj))\n    (apply vary-meta obj f args)\n    obj))\n\n(defn merge-meta\n  \"Only adds metadata to obj if d is not nil and if meta on obj isn't already nil.\"\n  [obj d]\n  (if (and d #?(:clj (instance? clojure.lang.IObj obj)\n                :cljs (implements? IWithMeta obj)))\n    (if-let [m (meta obj)]\n      (with-meta obj (merge m d))\n      obj)\n    obj))\n\n(defn strip-core-ns [sym]\n  (case (namespace sym)\n    (\"clojure.core\" \"cljs.core\") (symbol (name sym))\n    sym))\n\n(def allowed-loop (with-meta (symbol \"loop\") {:line :allow}))\n(def allowed-recur (with-meta (symbol \"recur\") {:line :allow}))\n\n(defn walk*\n  [inner form]\n  (cond\n    (:sci.impl/op (meta form)) form\n    (list? form) (with-meta (apply list (map inner form))\n                   (meta form))\n    #?(:clj (instance? clojure.lang.IMapEntry form) :cljs (map-entry? form))\n    #?(:clj (clojure.lang.MapEntry/create (inner (key form)) (inner (val form)))\n       :cljs (MapEntry. (inner (key form)) (inner (val form)) nil))\n    (seq? form) (with-meta (doall (map inner form))\n                  (meta form))\n    #?(:clj (instance? clojure.lang.IRecord form)\n       :cljs (record? form))\n    (reduce (fn [r x] (conj r (inner x))) form form)\n    (coll? form) (into (empty form) (map inner form))\n    :else form))\n\n(defn prewalk\n  \"Prewalk with metadata preservation. Does not prewalk :sci.impl/op nodes.\"\n  [f form]\n  (walk* (partial prewalk f) (f form)))\n\n(defn namespace-object\n  \"Fetches namespaces from env if it exists. Else, if `create?`,\n  produces one regardless of the existince of the namespace in env and\n  adds it to env before returning it.\"\n  [env ns-sym create? attr-map]\n  (let [env* @env\n        ns-map (get-in env* [:namespaces ns-sym])]\n    (or (:obj ns-map)\n        (when (or ns-map create?)\n          (let [ns-obj (vars/->SciNamespace ns-sym attr-map)]\n            (swap! env assoc-in [:namespaces ns-sym :obj] ns-obj)\n            ns-obj)))))\n\n(defn set-namespace! [ctx ns-sym attr-map]\n  (let [env (:env ctx)\n        attr-map (merge (meta ns-sym) attr-map)\n        ns-obj (namespace-object env ns-sym true attr-map)]\n    (t/setVal vars/current-ns ns-obj)))\n\n(def eval-form-state (volatile! nil))\n(def eval-require-state (volatile! nil))\n(def eval-use-state (volatile! nil))\n(def eval-resolve-state (volatile! nil))\n(def eval-refer-state (volatile! nil))\n\n(defn split-when\n  \"Like partition-by but splits collection only when `pred` returns\n  a truthy value. E.g. `(split-when odd? [1 2 3 4 5]) => ((1 2) (3 4) (5))`\"\n  [pred coll]\n  (lazy-seq\n   (when-let [s (seq coll)]\n     (let [fst (first s)\n           f (complement pred)\n           run (cons fst (take-while #(f %) (next s)))]\n       (cons run (split-when pred (lazy-seq (drop (count run) s))))))))\n"]}